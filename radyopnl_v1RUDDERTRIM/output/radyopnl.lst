0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0001) ; Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0002) ;
                                   (0003) ;@Id: boot.tpl#682 @
                                   (0004) ;=============================================================================
                                   (0005) ;  FILENAME:   boot.asm
                                   (0006) ;  VERSION:    4.16
                                   (0007) ;  DATE:       6 October 2005
                                   (0008) ;
                                   (0009) ;  DESCRIPTION:
                                   (0010) ;  M8C Boot Code for CY8C24x90 microcontroller devices.
                                   (0011) ;
                                   (0012) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
                                   (0013) ;
                                   (0014) ; NOTES:
                                   (0015) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                   (0016) ; the project's root directory to create BOOT.ASM. Any changes made to
                                   (0017) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                   (0018) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0019) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                   (0020) ; are not accidentally modified.
                                   (0021) ;
                                   (0022) ;=============================================================================
                                   (0023) 
                                   (0024) include ".\lib\GlobalParams.inc"
                                   (0025) include "m8c.inc"
                                   (0026) include "m8ssc.inc"
                                   (0027) include "memory.inc"
                                   (0028) 
                                   (0029) ;--------------------------------------
                                   (0030) ; Export Declarations
                                   (0031) ;--------------------------------------
                                   (0032) 
                                   (0033) export __Start
                                   (0034) export __bss_start
                                   (0035) export __data_start
                                   (0036) export __idata_start
                                   (0037) export __func_lit_start
                                   (0038) export __text_start
                                   (0039) export  _bGetPowerSetting
                                   (0040) export   bGetPowerSetting
                                   (0041) 
                                   (0042) 
                                   (0043) ;--------------------------------------
                                   (0044) ; Optimization flags
                                   (0045) ;--------------------------------------
                                   (0046) ;
                                   (0047) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0048) ; boot.asm. See the notes in the banner comment at the beginning of
                                   (0049) ; this file.
                                   (0050) 
                                   (0051) ; Optimization for Assembly language (only) projects and C-language projects
                                   (0052) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                   (0053) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0054) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0055) ;
                                   (0056) C_LANGUAGE_SUPPORT:              equ 1
                                   (0057) 
                                   (0058) 
                                   (0059) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0060) ; to invoke the user's _main code. If _main executes a return instruction,
                                   (0061) ; boot provides an infinite loop. By changing the following equate from zero
                                   (0062) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0063) ; bytes on the stack which are otherwise required for the return address. If
                                   (0064) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                   (0065) ; release, the C compiler automatically places an infinite loop at the end
                                   (0066) ; of main, rather than a return instruction.)
                                   (0067) ;
                                   (0068) ENABLE_LJMP_TO_MAIN:             equ 0
                                   (0069) 
                                   (0070) 
                                   (0071) ;-----------------------------------------------------------------------------
                                   (0072) ; Interrupt Vector Table
                                   (0073) ;-----------------------------------------------------------------------------
                                   (0074) ;
                                   (0075) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0076) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                   (0077) ; very short ISRs could be encoded within the table itself. Normally,
                                   (0078) ; vector jump targets are modified automatically according to the user
                                   (0079) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0080) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0081) ; configuration files. If you need to hard code a vector, update the
                                   (0082) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0083) ; of this file.
                                   (0084) ;-----------------------------------------------------------------------------
                                   (0085) 
                                   (0086)     AREA TOP (ROM, ABS, CON)
                                   (0087) 
                                   (0088)     org   0                        ;Reset Interrupt Vector
                                   (0089)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0090) 
                                   (0091)     org   04h                      ;Supply Monitor Interrupt Vector
0004: 30       HALT                (0092)     halt                           ;Stop execution if power falls too low
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0093) 
                                   (0094)     org   08h                      ;Analog Column 0 Interrupt Vector
                                   (0095)     // call	void_handler
0008: 7E       RETI                (0096)     reti
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0097) 
                                   (0098)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                   (0099)     // call	void_handler
000C: 7E       RETI                (0100)     reti
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
0010: 30       HALT  
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
0014: 30       HALT  
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0101) 
                                   (0102)     org   18h                      ;VC3 Interrupt Vector
                                   (0103)     // call	void_handler
0018: 7E       RETI                (0104)     reti
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0105) 
                                   (0106)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0107)     // call	void_handler
001C: 7E       RETI                (0108)     reti
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0109) 
                                   (0110)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 09 CF LJMP  0x09CF        (0111)     ljmp	_ADCINC12_1_TMR_ISR
0023: 7E       RETI                (0112)     reti
                                   (0113) 
                                   (0114)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 09 CC LJMP  0x09CC        (0115)     ljmp	_ADCINC12_1_CNT_ISR
0027: 7E       RETI                (0116)     reti
                                   (0117) 
                                   (0118)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                   (0119)     // call	void_handler
0028: 7E       RETI                (0120)     reti
0029: 30       HALT  
002A: 30       HALT  
002B: 30       HALT  
                                   (0121) 
                                   (0122)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 0A 43 LJMP  __text_start  (0123)     ljmp	_Counter8_1_ISR
002F: 7E       RETI                (0124)     reti
0030: 30       HALT  
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
0034: 30       HALT  
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
0038: 30       HALT  
0039: 30       HALT  
003A: 30       HALT  
003B: 30       HALT  
003C: 30       HALT  
003D: 30       HALT  
003E: 30       HALT  
003F: 30       HALT  
                                   (0125) 
                                   (0126)     org   40h                      ;USB Reset Interrupt Vector
                                   (0127)     // call	void_handler
0040: 7E       RETI                (0128)     reti
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
                                   (0129) 
                                   (0130)     org   44h                      ;USB SOF Interrupt Vector
                                   (0131)     // call	void_handler
0044: 7E       RETI                (0132)     reti
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
                                   (0133) 
                                   (0134)     org   48h                      ;USB EP0 Interrupt Vector
                                   (0135)     // call	void_handler
0048: 7E       RETI                (0136)     reti
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
                                   (0137) 
                                   (0138)     org   4Ch                      ;USB EP1 Interrupt Vector
                                   (0139)     // call	void_handler
004C: 7E       RETI                (0140)     reti
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
                                   (0141) 
                                   (0142)     org   50h                      ;USB EP2 Interrupt Vector
                                   (0143)     // call	void_handler
0050: 7E       RETI                (0144)     reti
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
                                   (0145) 
                                   (0146)     org   54h                      ;USB EP3 Interrupt Vector
                                   (0147)     // call	void_handler
0054: 7E       RETI                (0148)     reti
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
                                   (0149) 
                                   (0150)     org   58h                      ;USB EP4 Interrupt Vector
                                   (0151)     // call	void_handler
0058: 7E       RETI                (0152)     reti
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
                                   (0153) 
                                   (0154)     org   5Ch                      ;USB Wakeup Interrupt Vector
                                   (0155)     // call	void_handler
005C: 7E       RETI                (0156)     reti
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0157) 
                                   (0158)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 07 EC LJMP  0x07EC        (0159)     ljmp	_I2CHW_1_ISR
0063: 7E       RETI                (0160)     reti
                                   (0161) 
                                   (0162)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0163)     // call	void_handler
0064: 7E       RETI                (0164)     reti
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0165) 
                                   (0166) ;-----------------------------------------------------------------------------
                                   (0167) ;  Start of Execution.
                                   (0168) ;-----------------------------------------------------------------------------
                                   (0169) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0170) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0171) ;
                                   (0172)     org 68h
                                   (0173) __Start:
                                   (0174) 
                                   (0175)     ; initialize values for voltage stabilization, if required,
                                   (0176)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0177)     ; least for now. 
                                   (0178)     ;
0068: 71 10    OR    F,16          (0179)     M8C_SetBank1
006A: 62 E3 05 MOV   REG[227],5    (0180)     mov   reg[VLT_CR], LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,239         (0181)     M8C_SetBank0
                                   (0182) 
                                   (0183)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
006F: 50 20    MOV   A,32          (0184)     mov   A, 20h
0071: 28       ROMX                (0185)     romx
                                   (0186)     ; %45%20%46%46% End workaround
                                   (0187) 	
                                   (0188) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0189)     M8C_EnableWatchDog
                                   (0190) ENDIF
                                   (0191) 
0072: 41 FE FB AND   REG[254],251  (0192)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0193) 
                                   (0194)     ;---------------------------
                                   (0195)     ; Set up the Temporary stack
                                   (0196)     ;---------------------------
                                   (0197)     ; A temporary stack is set up for the SSC instructions.
                                   (0198)     ; The real stack start will be assigned later.
                                   (0199)     ;
                                   (0200) _stack_start:          equ 80h
0075: 50 80    MOV   A,128         (0201)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A          (0202)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0203) 
                                   (0204)     ;------------------------
                                   (0205)     ; Set Power-related Trim 
                                   (0206)     ;------------------------
                                   (0207) 
                                   (0208) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                   (0209) 
                                   (0210)   IF ( AGND_BYPASS )
                                   (0211)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0212)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0213)     ; bit in the write-only BDG_TR register. Recalculate the register
                                   (0214)     ; value using the proper trim values.
                                   (0215)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0216)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0217)   ENDIF
                                   (0218) ELSE
                                   (0219) 	; 3.3V operation trim codes
                                   (0220) 	; Set the IMO and Bandgap trims for 3v operation
                                   (0221)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGN_BYPASS_JUST
                                   (0222) 	
                                   (0223) 	; Set the IMO Gain Trim for 3v operation
                                   (0224) 	M8SSC_SetTableIMOGainTrim 2, SSCTBL2_TRIM_IMO_GAIN_3V
                                   (0225) 
                                   (0226) ENDIF ; 3.3 Volt Operation
                                   (0227) 
0078: 55 F8 00 MOV   [248],0       (0228)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007B: 55 F9 00 MOV   [ekran_res],0 (0229)     mov  [bSSC_KEYSP], 0
                                   (0230) 				
                                   (0231)     ;---------------------------------------
                                   (0232)     ; Initialize Crystal Oscillator and PLL
                                   (0233)     ;---------------------------------------
                                   (0234) 
                                   (0235)     ; Either no ECO, or waiting for stable clock is to be done in main
007E: 71 10    OR    F,16          (0236)     M8C_SetBank1
0080: 62 E0 02 MOV   REG[224],2    (0237)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0083: 70 EF    AND   F,239         (0238)     M8C_SetBank0
0085: 62 E3 38 MOV   REG[227],56   (0239)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0240) 
                                   (0241)     ;---------------------------------------------
                                   (0242)     ; Enter the Large Memory Model, if applicable
                                   (0243)     ;---------------------------------------------
                                   (0244) IF ( SYSTEM_LARGE_MEMORY_MODEL )
0088: 62 D1 03 MOV   REG[209],3    (0245)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008B: 50 00    MOV   A,0           (0246)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
008D: 4E       SWAP  SP,A          (0247)     swap  A, SP
008E: 62 D3 03 MOV   REG[211],3    (0248)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
0091: 62 D0 00 MOV   REG[208],0    (0249)     RAM_SETPAGE_CUR 0
0094: 62 D5 00 MOV   REG[213],0    (0250)     RAM_SETPAGE_MVW 0
0097: 62 D4 00 MOV   REG[212],0    (0251)     RAM_SETPAGE_MVR 0
                                   (0252) 
                                   (0253)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009A: 71 C0    OR    F,192         (0254)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0255)   ELSE
                                   (0256)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0257)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0258) ELSE
                                   (0259)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                   (0260)     swap  SP, A
                                   (0261) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                   (0262) 
                                   (0263)     ;------------------------
                                   (0264)     ; Close CT leakage path.
                                   (0265)     ;------------------------
009C: 62 71 05 MOV   REG[113],5    (0266)     mov   reg[ACB00CR0], 05h
009F: 62 75 05 MOV   REG[117],5    (0267)     mov   reg[ACB01CR0], 05h
                                   (0268) 
                                   (0269)     ;-------------------------
                                   (0270)     ; Load Base Configuration
                                   (0271)     ;-------------------------
                                   (0272)     ; Load global parameter settings and load the user modules in the
                                   (0273)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0274)     ; to minimize start up time; (2) We may still need to play with the
                                   (0275)     ; Sleep Timer.
                                   (0276)     ;
00A2: 7C 05 33 LCALL 0x0533        (0277)     lcall LoadConfigInit
00A5: 71 10    OR    F,16          (0278) 	M8C_SetBank1
00A7: 41 E7 3F AND   REG[231],63   (0279) 	and  reg[DEC_CR1], 0x3F
00AA: 43 E7 80 OR    REG[231],128  (0280) 	or   reg[DEC_CR1], 0x80
00AD: 70 EF    AND   F,239         (0281) 	M8C_SetBank0
                                   (0282)     ;-----------------------------------
                                   (0283)     ; Initialize C Run-Time Environment
                                   (0284)     ;-----------------------------------
                                   (0285) IF ( C_LANGUAGE_SUPPORT )
                                   (0286) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                   (0287)     mov  A,0                           ; clear the 'bss' segment to zero
                                   (0288)     mov  [__r0],<__bss_start
                                   (0289) BssLoop:
                                   (0290)     cmp  [__r0],<__bss_end
                                   (0291)     jz   BssDone
                                   (0292)     mvi  [__r0],A
                                   (0293)     jmp  BssLoop
                                   (0294) BssDone:
                                   (0295)     mov  A,>__idata_start              ; copy idata to data segment
                                   (0296)     mov  X,<__idata_start
                                   (0297)     mov  [__r0],<__data_start
                                   (0298) IDataLoop:
                                   (0299)     cmp  [__r0],<__data_end
                                   (0300)     jz   C_RTE_Done
                                   (0301)     push A
                                   (0302)     romx
                                   (0303)     mvi  [__r0],A
                                   (0304)     pop  A
                                   (0305)     inc  X
                                   (0306)     adc  A,0
                                   (0307)     jmp  IDataLoop
                                   (0308) 
                                   (0309) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                   (0310) 
                                   (0311) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00AF: 62 D0 01 MOV   REG[208],1    (0312)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0313)                                        ; to use the Virtual Register page.
                                   (0314) 
                                   (0315)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0316)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0317)     ; text segment and may have been relocated by the Code Compressor.
                                   (0318)     ;
00B2: 50 03    MOV   A,3           (0319)     mov   A, >__pXIData                ; Get the address of the flash
00B4: 57 42    MOV   X,66          (0320)     mov   X, <__pXIData                ;   pointer to the xidata area.
00B6: 08       PUSH  A             (0321)     push  A
00B7: 28       ROMX                (0322)     romx                               ; get the MSB of xidata's address
00B8: 53 42    MOV   [__r0],A      (0323)     mov   [__r0], A
00BA: 18       POP   A             (0324)     pop   A
00BB: 75       INC   X             (0325)     inc   X
00BC: 09 00    ADC   A,0           (0326)     adc   A, 0
00BE: 28       ROMX                (0327)     romx                               ; get the LSB of xidata's address
00BF: 4B       SWAP  A,X           (0328)     swap  A, X
00C0: 51 42    MOV   A,[66]        (0329)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0330)                                        ;   XIData structure list in flash
00C2: 80 04    JMP   0x00C7        (0331)     jmp   .AccessStruct
                                   (0332) 
                                   (0333)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0334)     ; values of C variables. Each structure contains 3 member elements.
                                   (0335)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0336)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0337)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0338)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0339)     ; value in the second member element, an unsigned byte:
                                   (0340)     ; (1) If the value of the second element is non-zero, it represents
                                   (0341)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0342)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0343)     ; the bytes are copied to the block of RAM.
                                   (0344)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0345)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0346)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0347) 
                                   (0348) .AccessNextStructLoop:
00C4: 75       INC   X             (0349)     inc   X                            ; pXIData++
00C5: 09 00    ADC   A,0           (0350)     adc   A, 0
                                   (0351) .AccessStruct:                         ; Entry point for first block
                                   (0352)     ;
                                   (0353)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0354)     ;
00C7: 62 E3 00 MOV   REG[227],0    (0355)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CA: 08       PUSH  A             (0356)     push  A
00CB: 28       ROMX                (0357)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00CC: 60 D5    MOV   REG[213],A    (0358)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00CE: 74       INC   A             (0359)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00CF: A0 4B    JZ    0x011B        (0360)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D1: 18       POP   A             (0361)     pop   A                            ; restore pXIData to [A,X]
00D2: 75       INC   X             (0362)     inc   X                            ; pXIData++
00D3: 09 00    ADC   A,0           (0363)     adc   A, 0
00D5: 08       PUSH  A             (0364)     push  A
00D6: 28       ROMX                (0365)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00D7: 53 42    MOV   [__r0],A      (0366)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00D9: 18       POP   A             (0367)     pop   A                            ; restore pXIData to [A,X]
00DA: 75       INC   X             (0368)     inc   X                            ; pXIData++ (point to size)
00DB: 09 00    ADC   A,0           (0369)     adc   A, 0
00DD: 08       PUSH  A             (0370)     push  A
00DE: 28       ROMX                (0371)     romx                               ; Get the size (CPU.A <- *pXIData)
00DF: A0 1C    JZ    0x00FC        (0372)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E1: 53 41    MOV   [__r1],A      (0373)     mov   [__r1], A                    ;             else downcount in __r1
00E3: 18       POP   A             (0374)     pop   A                            ; restore pXIData to [A,X]
                                   (0375) 
                                   (0376) .CopyNextByteLoop:
                                   (0377)     ; For each byte in the structure's array member, copy from flash to RAM.
                                   (0378)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                   (0379)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                   (0380)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                   (0381)     ;
00E4: 75       INC   X             (0382)     inc   X                            ; pXIData++ (point to next data byte)
00E5: 09 00    ADC   A,0           (0383)     adc   A, 0
00E7: 08       PUSH  A             (0384)     push  A
00E8: 28       ROMX                (0385)     romx                               ; Get the data value (CPU.A <- *pXIData)
00E9: 3F 42    MVI   [__r0],A      (0386)     mvi   [__r0], A                    ; Transfer the data to RAM
00EB: 47 42 FF TST   [66],255      (0387)     tst   [__r0], 0xff                 ; Check for page crossing
00EE: B0 06    JNZ   0x00F5        (0388)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F0: 5D D5    MOV   A,REG[213]    (0389)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F2: 74       INC   A             (0390)     inc   A
00F3: 60 D5    MOV   REG[213],A    (0391)     mov   reg[ MVW_PP], A
                                   (0392) .CopyLoopTail:
00F5: 18       POP   A             (0393)     pop   A                            ; restore pXIData to [A,X]
00F6: 7A 41    DEC   [__r1]        (0394)     dec   [__r1]                       ; End of this array in flash?
00F8: BF EB    JNZ   0x00E4        (0395)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FA: 8F C9    JMP   0x00C4        (0396)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                   (0397) 
                                   (0398) .ClearRAMBlockToZero:
00FC: 18       POP   A             (0399)     pop   A                            ; restore pXIData to [A,X]
00FD: 75       INC   X             (0400)     inc   X                            ; pXIData++ (point to next data byte)
00FE: 09 00    ADC   A,0           (0401)     adc   A, 0
0100: 08       PUSH  A             (0402)     push  A
0101: 28       ROMX                (0403)     romx                               ; Get the run length (CPU.A <- *pXIData)
0102: 53 41    MOV   [__r1],A      (0404)     mov   [__r1], A                    ; Initialize downcounter
0104: 50 00    MOV   A,0           (0405)     mov   A, 0                         ; Initialize source data
                                   (0406) 
                                   (0407) .ClearRAMBlockLoop:
                                   (0408)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0409)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                   (0410)     ;
0106: 3F 42    MVI   [__r0],A      (0411)     mvi   [__r0], A                    ; Clear a byte
0108: 47 42 FF TST   [66],255      (0412)     tst   [__r0], 0xff                 ; Check for page crossing
010B: B0 08    JNZ   0x0114        (0413)     jnz   .ClearLoopTail               ;   No crossing, keep going
010D: 5D D5    MOV   A,REG[213]    (0414)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
010F: 74       INC   A             (0415)     inc   A
0110: 60 D5    MOV   REG[213],A    (0416)     mov   reg[ MVW_PP], A
0112: 50 00    MOV   A,0           (0417)     mov   A, 0                         ; Restore the zero used for clearing
                                   (0418) .ClearLoopTail:
0114: 7A 41    DEC   [__r1]        (0419)     dec   [__r1]                       ; Was this the last byte?
0116: BF EF    JNZ   0x0106        (0420)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0118: 18       POP   A             (0421)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0119: 8F AA    JMP   0x00C4        (0422)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                   (0423) 
                                   (0424) .C_RTE_WrapUp:
011B: 18       POP   A             (0425)     pop   A                            ; balance stack
                                   (0426) 
                                   (0427) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                   (0428) 
                                   (0429) C_RTE_Done:
                                   (0430) 
                                   (0431) ENDIF ; C_LANGUAGE_SUPPORT
                                   (0432) 
                                   (0433) 
                                   (0434)     ;-------------------------------
                                   (0435)     ; Set Power-On Reset (POR) Level
                                   (0436)     ;-------------------------------
011C: 71 10    OR    F,16          (0437)     M8C_SetBank1
                                   (0438) 
                                   (0439) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                   (0440)     or   reg[VLT_CR], VLT_CR_POR_LOW           ;   Yes, change to midpoint trip
                                   (0441) ELSE										   ; 5V Operation
                                   (0442)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
011E: 43 E3 00 OR    REG[227],0    (0443)     or   reg[VLT_CR], VLT_CR_POR_LOW           ;         No, change to midpoint trip
                                   (0444)   ELSE ; 24HMz                                 ;
                                   (0445)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                   (0446)   ENDIF ; 24MHz
                                   (0447) ENDIF ; 3.3V Operation
                                   (0448) 
0121: 70 EF    AND   F,239         (0449)     M8C_SetBank0
                                   (0450) 
                                   (0451)     ;----------------------------
                                   (0452)     ; Wrap up and invoke "main"
                                   (0453)     ;----------------------------
                                   (0454) 
                                   (0455)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                   (0456)     ; no interrupts should be enabled now, so may as well clear the register.
                                   (0457)     ;
0123: 62 E0 00 MOV   REG[224],0    (0458)     mov  reg[INT_MSK0],0
                                   (0459) 
                                   (0460)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                   (0461)     ;
0126: 71 10    OR    F,16          (0462)     M8C_SetBank1
0128: 62 E0 02 MOV   REG[224],2    (0463)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
012B: 70 EF    AND   F,239         (0464)     M8C_SetBank0
                                   (0465) 
                                   (0466)     ; Global Interrupt are NOT enabled, this should be done in main().
                                   (0467)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                   (0468)     ; Global Interrupts should be enabled as soon as possible in main().
                                   (0469)     ;
012D: 62 E2 00 MOV   REG[226],0    (0470)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                   (0471)                                    ; have been set during the boot process.
                                   (0472) IF ENABLE_LJMP_TO_MAIN
                                   (0473)     ljmp  _main                    ; goto main (no return)
                                   (0474) ELSE
0130: 7C 0D 81 LCALL _main         (0475)     lcall _main                    ; call main
                                   (0476) .Exit:
0133: 8F FF    JMP   0x0133        (0477)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                   (0478) ENDIF
                                   (0479) 
                                   (0480)     ;---------------------------------
                                   (0481)     ; Library Access to Global Parms
                                   (0482)     ;---------------------------------
                                   (0483)     ;
                                   (0484)  bGetPowerSetting:
                                   (0485) _bGetPowerSetting:
                                   (0486)     ; Returns value of POWER_SETTING in the A register.
                                   (0487)     ; No inputs. No Side Effects.
                                   (0488)     ;
0135: 50 10    MOV   A,16          (0489)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
0137: 7F       RET                 (0490)     ret
0138: 30       HALT  
0139: 30       HALT  
013A: 30       HALT  
013B: 30       HALT  
013C: 30       HALT  
013D: 30       HALT  
013E: 30       HALT  
013F: 30       HALT  
0140: 30       HALT  
0141: 30       HALT  
0142: 30       HALT  
0143: 30       HALT  
0144: 30       HALT  
0145: 30       HALT  
0146: 30       HALT  
0147: 30       HALT  
0148: 30       HALT  
0149: 30       HALT  
014A: 30       HALT  
014B: 30       HALT  
014C: 30       HALT  
014D: 30       HALT  
014E: 30       HALT  
014F: 30       HALT  
0150: 30       HALT  
0151: 30       HALT  
0152: 30       HALT  
0153: 30       HALT  
0154: 30       HALT  
0155: 30       HALT  
0156: 30       HALT  
0157: 30       HALT  
0158: 30       HALT  
0159: 30       HALT  
015A: 30       HALT  
015B: 30       HALT  
015C: 30       HALT  
015D: 30       HALT  
015E: 30       HALT  
015F: 30       HALT  
0160: 30       HALT  
0161: 30       HALT  
0162: 30       HALT  
0163: 30       HALT  
0164: 30       HALT  
0165: 30       HALT  
0166: 30       HALT  
0167: 30       HALT  
0168: 30       HALT  
0169: 30       HALT  
016A: 30       HALT  
016B: 30       HALT  
016C: 30       HALT  
016D: 30       HALT  
016E: 30       HALT  
016F: 30       HALT  
0170: 30       HALT  
0171: 30       HALT  
0172: 30       HALT  
0173: 30       HALT  
0174: 30       HALT  
0175: 30       HALT  
0176: 30       HALT  
0177: 30       HALT  
0178: 30       HALT  
0179: 30       HALT  
017A: 30       HALT  
017B: 30       HALT  
017C: 30       HALT  
017D: 30       HALT  
017E: 30       HALT  
017F: 30       HALT  
0180: 30       HALT  
0181: 30       HALT  
0182: 30       HALT  
0183: 30       HALT  
0184: 30       HALT  
0185: 30       HALT  
0186: 30       HALT  
0187: 30       HALT  
0188: 30       HALT  
0189: 30       HALT  
018A: 30       HALT  
018B: 30       HALT  
018C: 30       HALT  
018D: 30       HALT  
018E: 30       HALT  
018F: 30       HALT  
0190: 30       HALT  
0191: 30       HALT  
0192: 30       HALT  
0193: 30       HALT  
0194: 30       HALT  
0195: 30       HALT  
0196: 30       HALT  
0197: 30       HALT  
0198: 30       HALT  
0199: 30       HALT  
019A: 30       HALT  
019B: 30       HALT  
019C: 30       HALT  
019D: 30       HALT  
019E: 30       HALT  
019F: 30       HALT  
01A0: 20       POP   X
01A1: 20       POP   X
01A2: 20       POP   X
01A3: 20       POP   X
01A4: 20       POP   X
01A5: 00       SWI   
01A6: 20       POP   X
01A7: 58 20    MOV   X,[32]
01A9: 20       POP   X
01AA: 58 00    MOV   X,[COM_INT]
01AC: 20       POP   X
01AD: 58 58    MOV   X,[88]
01AF: 20       POP   X
01B0: 20       POP   X
01B1: 00       SWI   
01B2: 58 58    MOV   X,[88]
01B4: 58 20    MOV   X,[32]
01B6: 20       POP   X
01B7: 00       SWI   
01B8: 20       POP   X
01B9: 58 58    MOV   X,[88]
01BB: 58 20    MOV   X,[32]
01BD: 00       SWI   
01BE: 58 20    MOV   X,[32]
01C0: 20       POP   X
01C1: 20       POP   X
01C2: 58 00    MOV   X,[COM_INT]
01C4: 20       POP   X
01C5: 58 58    MOV   X,[88]
01C7: 20       POP   X
01C8: 20       POP   X
01C9: 00       SWI   
01CA: 20       POP   X
01CB: 20       POP   X
01CC: 58 20    MOV   X,[32]
01CE: 20       POP   X
01CF: 00       SWI   
01D0: 20       POP   X
01D1: 20       POP   X
01D2: 20       POP   X
01D3: 20       POP   X
01D4: 20       POP   X
01D5: 00       SWI   
01D6: 20       POP   X
01D7: 58 20    MOV   X,[32]
01D9: 20       POP   X
01DA: 58 00    MOV   X,[COM_INT]
01DC: 20       POP   X
01DD: 58 20    MOV   X,[32]
01DF: 58 20    MOV   X,[32]
01E1: 00       SWI   
01E2: 58 20    MOV   X,[32]
01E4: 20       POP   X
01E5: 20       POP   X
01E6: 20       POP   X
01E7: 00       SWI   
01E8: 20       POP   X
01E9: 20       POP   X
01EA: 58 20    MOV   X,[32]
01EC: 20       POP   X
01ED: 00       SWI   
01EE: 58 58    MOV   X,[88]
01F0: 20       POP   X
01F1: 58 58    MOV   X,[88]
01F3: 00       SWI   
01F4: 20       POP   X
01F5: 58 20    MOV   X,[32]
01F7: 58 20    MOV   X,[32]
01F9: 00       SWI   
01FA: 20       POP   X
01FB: 20       POP   X
01FC: 58 20    MOV   X,[32]
01FE: 20       POP   X
01FF: 00       SWI   
0200: 20       POP   X
0201: 20       POP   X
0202: 20       POP   X
0203: 20       POP   X
0204: 20       POP   X
0205: 00       SWI   
0206: 20       POP   X
0207: 58 20    MOV   X,[32]
0209: 20       POP   X
020A: 58 00    MOV   X,[COM_INT]
020C: 20       POP   X
020D: 58 20    MOV   X,[32]
020F: 58 20    MOV   X,[32]
0211: 00       SWI   
0212: 58 58    MOV   X,[88]
0214: 20       POP   X
0215: 20       POP   X
0216: 20       POP   X
0217: 00       SWI   
0218: 20       POP   X
0219: 20       POP   X
021A: 58 20    MOV   X,[32]
021C: 20       POP   X
021D: 00       SWI   
021E: 58 20    MOV   X,[32]
0220: 58 20    MOV   X,[32]
0222: 58 00    MOV   X,[COM_INT]
0224: 20       POP   X
0225: 58 58    MOV   X,[88]
0227: 20       POP   X
0228: 20       POP   X
0229: 00       SWI   
022A: 20       POP   X
022B: 20       POP   X
022C: 58 20    MOV   X,[32]
022E: 20       POP   X
022F: 00       SWI   
0230: 20       POP   X
0231: 20       POP   X
0232: 20       POP   X
0233: 20       POP   X
0234: 20       POP   X
0235: 00       SWI   
0236: 20       POP   X
0237: 58 20    MOV   X,[32]
0239: 20       POP   X
023A: 58 00    MOV   X,[COM_INT]
023C: 20       POP   X
023D: 58 20    MOV   X,[32]
023F: 58 20    MOV   X,[32]
0241: 00       SWI   
0242: 58 20    MOV   X,[32]
0244: 20       POP   X
0245: 20       POP   X
0246: 20       POP   X
0247: 00       SWI   
0248: 20       POP   X
0249: 20       POP   X
024A: 58 20    MOV   X,[32]
024C: 20       POP   X
024D: 00       SWI   
024E: 58 20    MOV   X,[32]
0250: 20       POP   X
0251: 20       POP   X
0252: 58 00    MOV   X,[COM_INT]
0254: 20       POP   X
0255: 58 20    MOV   X,[32]
0257: 58 20    MOV   X,[32]
0259: 00       SWI   
025A: 20       POP   X
025B: 20       POP   X
025C: 58 20    MOV   X,[32]
025E: 20       POP   X
025F: 00       SWI   
0260: 20       POP   X
0261: 20       POP   X
0262: 20       POP   X
0263: 20       POP   X
0264: 20       POP   X
0265: 00       SWI   
0266: 20       POP   X
0267: 20       POP   X
0268: 58 58    MOV   X,[88]
026A: 20       POP   X
026B: 00       SWI   
026C: 20       POP   X
026D: 58 58    MOV   X,[88]
026F: 20       POP   X
0270: 20       POP   X
0271: 00       SWI   
0272: 58 58    MOV   X,[88]
0274: 58 20    MOV   X,[32]
0276: 20       POP   X
0277: 00       SWI   
0278: 20       POP   X
0279: 20       POP   X
027A: 58 20    MOV   X,[32]
027C: 20       POP   X
027D: 00       SWI   
027E: 58 20    MOV   X,[32]
0280: 20       POP   X
0281: 20       POP   X
0282: 58 00    MOV   X,[COM_INT]
0284: 20       POP   X
0285: 58 20    MOV   X,[32]
0287: 58 20    MOV   X,[32]
0289: 00       SWI   
028A: 20       POP   X
028B: 20       POP   X
028C: 58 20    MOV   X,[32]
028E: 20       POP   X
028F: 00       SWI   
0290: 20       POP   X
0291: 20       POP   X
0292: 20       POP   X
0293: 20       POP   X
0294: 20       POP   X
0295: 00       SWI   
0296: 20       POP   X
0297: 20       POP   X
0298: 20       POP   X
0299: 20       POP   X
029A: 20       POP   X
029B: 00       SWI   
029C: 20       POP   X
029D: 20       POP   X
029E: 20       POP   X
029F: 20       POP   X
02A0: 20       POP   X
02A1: 00       SWI   
02A2: 20       POP   X
02A3: 20       POP   X
02A4: 20       POP   X
02A5: 20       POP   X
02A6: 20       POP   X
02A7: 00       SWI   
02A8: 20       POP   X
02A9: 20       POP   X
02AA: 20       POP   X
02AB: 20       POP   X
02AC: 20       POP   X
02AD: 00       SWI   
02AE: 20       POP   X
02AF: 20       POP   X
02B0: 20       POP   X
02B1: 20       POP   X
02B2: 20       POP   X
02B3: 00       SWI   
02B4: 20       POP   X
02B5: 20       POP   X
02B6: 20       POP   X
02B7: 20       POP   X
02B8: 20       POP   X
02B9: 00       SWI   
02BA: 20       POP   X
02BB: 20       POP   X
02BC: 20       POP   X
02BD: 20       POP   X
02BE: 20       POP   X
02BF: 00       SWI   
02C0: 20       POP   X
02C1: 20       POP   X
02C2: 20       POP   X
02C3: 20       POP   X
02C4: 20       POP   X
02C5: 00       SWI   
02C6: 20       POP   X
02C7: 20       POP   X
02C8: 20       POP   X
02C9: 20       POP   X
02CA: 20       POP   X
02CB: 00       SWI   
02CC: 20       POP   X
02CD: 20       POP   X
02CE: 20       POP   X
02CF: 20       POP   X
02D0: 20       POP   X
02D1: 00       SWI   
02D2: 20       POP   X
02D3: 20       POP   X
02D4: 20       POP   X
02D5: 20       POP   X
02D6: 20       POP   X
02D7: 00       SWI   
02D8: 20       POP   X
02D9: 20       POP   X
02DA: 20       POP   X
02DB: 20       POP   X
02DC: 20       POP   X
02DD: 00       SWI   
02DE: 20       POP   X
02DF: 20       POP   X
02E0: 20       POP   X
02E1: 20       POP   X
02E2: 20       POP   X
02E3: 00       SWI   
02E4: 20       POP   X
02E5: 20       POP   X
02E6: 20       POP   X
02E7: 20       POP   X
02E8: 20       POP   X
02E9: 00       SWI   
02EA: 20       POP   X
02EB: 20       POP   X
02EC: 20       POP   X
02ED: 20       POP   X
02EE: 20       POP   X
02EF: 00       SWI   
02F0: 20       POP   X
02F1: 20       POP   X
02F2: 20       POP   X
02F3: 20       POP   X
02F4: 20       POP   X
02F5: 00       SWI   
02F6: 20       POP   X
02F7: 20       POP   X
02F8: 20       POP   X
02F9: 20       POP   X
02FA: 20       POP   X
02FB: 00       SWI   
02FC: 20       POP   X
02FD: 20       POP   X
02FE: 20       POP   X
02FF: 20       POP   X
0300: 20       POP   X
0301: 00       SWI   
0302: 20       POP   X
0303: 20       POP   X
0304: 20       POP   X
0305: 20       POP   X
0306: 20       POP   X
0307: 00       SWI   
0308: 20       POP   X
0309: 20       POP   X
030A: 20       POP   X
030B: 20       POP   X
030C: 20       POP   X
030D: 00       SWI   
030E: 20       POP   X
030F: 20       POP   X
0310: 20       POP   X
0311: 20       POP   X
0312: 20       POP   X
0313: 00       SWI   
0314: 20       POP   X
0315: 20       POP   X
0316: 20       POP   X
0317: 20       POP   X
0318: 20       POP   X
0319: 00       SWI   
031A: 20       POP   X
031B: 20       POP   X
031C: 20       POP   X
031D: 20       POP   X
031E: 20       POP   X
031F: 00       SWI   
0320: 20       POP   X
0321: 20       POP   X
0322: 20       POP   X
0323: 20       POP   X
0324: 20       POP   X
0325: 20       POP   X
0326: 20       POP   X
0327: 20       POP   X
0328: 20       POP   X
0329: 20       POP   X
032A: 20       POP   X
032B: 20       POP   X
032C: 20       POP   X
032D: 20       POP   X
032E: 20       POP   X
032F: 20       POP   X
0330: 00       SWI   
0331: 20       POP   X
0332: 20       POP   X
0333: 52 55    MOV   A,[X+85]
0335: 44 44 45 OR    REG[X+68],69
0338: 52 20    MOV   A,[X+32]
033A: 20       POP   X
033B: 54 52    MOV   [X+82],A
033D: 49 4D 20 TST   REG[77],32
0340: 20       POP   X
0341: 00       SWI   
0342: 1C 9E    SBB   [158],A

FILE: lib\psocconfigtbl.asm
                                   (0001) ; Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0002) ;
                                   (0003) include "m8c.inc"
                                   (0004) ;  Personalization tables 
                                   (0005) export LoadConfigTBL_radyopnl
                                   (0006) AREA psoc_config(rom, rel)
                                   (0007) LoadConfigTBL_radyopnl:
                                   (0008) ;  Ordered Global Register values
0344: 71 10    OR    F,16          (0009) 	M8C_SetBank1
0346: 62 00 7F MOV   REG[0],127    (0010) 	mov	reg[00h], 7fh		; Port_0_DriveMode_0 register (PRT0DM0)
0349: 62 01 80 MOV   REG[1],128    (0011) 	mov	reg[01h], 80h		; Port_0_DriveMode_1 register (PRT0DM1)
034C: 70 EF    AND   F,239         (0012) 	M8C_SetBank0
034E: 62 03 80 MOV   REG[3],128    (0013) 	mov	reg[03h], 80h		; Port_0_DriveMode_2 register (PRT0DM2)
0351: 62 02 00 MOV   REG[2],0      (0014) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0354: 71 10    OR    F,16          (0015) 	M8C_SetBank1
0356: 62 02 00 MOV   REG[2],0      (0016) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0359: 62 03 00 MOV   REG[3],0      (0017) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
035C: 70 EF    AND   F,239         (0018) 	M8C_SetBank0
035E: 62 01 00 MOV   REG[1],0      (0019) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0361: 71 10    OR    F,16          (0020) 	M8C_SetBank1
0363: 62 04 A0 MOV   REG[4],160    (0021) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0366: 62 05 FF MOV   REG[5],255    (0022) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0369: 70 EF    AND   F,239         (0023) 	M8C_SetBank0
036B: 62 07 FF MOV   REG[7],255    (0024) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
036E: 62 06 00 MOV   REG[6],0      (0025) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0371: 71 10    OR    F,16          (0026) 	M8C_SetBank1
0373: 62 06 00 MOV   REG[6],0      (0027) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0376: 62 07 00 MOV   REG[7],0      (0028) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0379: 70 EF    AND   F,239         (0029) 	M8C_SetBank0
037B: 62 05 00 MOV   REG[5],0      (0030) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
037E: 71 10    OR    F,16          (0031) 	M8C_SetBank1
0380: 62 08 00 MOV   REG[8],0      (0032) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0383: 62 09 3F MOV   REG[9],63     (0033) 	mov	reg[09h], 3fh		; Port_2_DriveMode_1 register (PRT2DM1)
0386: 70 EF    AND   F,239         (0034) 	M8C_SetBank0
0388: 62 0B 3F MOV   REG[11],63    (0035) 	mov	reg[0bh], 3fh		; Port_2_DriveMode_2 register (PRT2DM2)
038B: 62 0A 00 MOV   REG[10],0     (0036) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
038E: 71 10    OR    F,16          (0037) 	M8C_SetBank1
0390: 62 0A 00 MOV   REG[10],0     (0038) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0393: 62 0B 00 MOV   REG[11],0     (0039) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0396: 70 EF    AND   F,239         (0040) 	M8C_SetBank0
0398: 62 09 00 MOV   REG[9],0      (0041) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
039B: 71 10    OR    F,16          (0042) 	M8C_SetBank1
039D: 62 0C 00 MOV   REG[12],0     (0043) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
03A0: 62 0D FF MOV   REG[13],255   (0044) 	mov	reg[0dh], ffh		; Port_3_DriveMode_1 register (PRT3DM1)
03A3: 70 EF    AND   F,239         (0045) 	M8C_SetBank0
03A5: 62 0F F0 MOV   REG[15],240   (0046) 	mov	reg[0fh], f0h		; Port_3_DriveMode_2 register (PRT3DM2)
03A8: 62 0E 00 MOV   REG[14],0     (0047) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
03AB: 71 10    OR    F,16          (0048) 	M8C_SetBank1
03AD: 62 0E 00 MOV   REG[14],0     (0049) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
03B0: 62 0F 00 MOV   REG[15],0     (0050) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
03B3: 70 EF    AND   F,239         (0051) 	M8C_SetBank0
03B5: 62 0D 00 MOV   REG[13],0     (0052) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
03B8: 71 10    OR    F,16          (0053) 	M8C_SetBank1
03BA: 62 10 00 MOV   REG[16],0     (0054) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
03BD: 62 11 FF MOV   REG[17],255   (0055) 	mov	reg[11h], ffh		; Port_4_DriveMode_1 register (PRT4DM1)
03C0: 70 EF    AND   F,239         (0056) 	M8C_SetBank0
03C2: 62 13 FF MOV   REG[19],255   (0057) 	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
03C5: 62 12 00 MOV   REG[18],0     (0058) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
03C8: 71 10    OR    F,16          (0059) 	M8C_SetBank1
03CA: 62 12 00 MOV   REG[18],0     (0060) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
03CD: 62 13 00 MOV   REG[19],0     (0061) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
03D0: 70 EF    AND   F,239         (0062) 	M8C_SetBank0
03D2: 62 11 00 MOV   REG[17],0     (0063) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
03D5: 71 10    OR    F,16          (0064) 	M8C_SetBank1
03D7: 62 14 00 MOV   REG[20],0     (0065) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
03DA: 62 15 FF MOV   REG[21],255   (0066) 	mov	reg[15h], ffh		; Port_5_DriveMode_1 register (PRT5DM1)
03DD: 70 EF    AND   F,239         (0067) 	M8C_SetBank0
03DF: 62 17 FF MOV   REG[23],255   (0068) 	mov	reg[17h], ffh		; Port_5_DriveMode_2 register (PRT5DM2)
03E2: 62 16 00 MOV   REG[22],0     (0069) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03E5: 71 10    OR    F,16          (0070) 	M8C_SetBank1
03E7: 62 16 00 MOV   REG[22],0     (0071) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03EA: 62 17 00 MOV   REG[23],0     (0072) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03ED: 70 EF    AND   F,239         (0073) 	M8C_SetBank0
03EF: 62 15 00 MOV   REG[21],0     (0074) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03F2: 71 10    OR    F,16          (0075) 	M8C_SetBank1
03F4: 62 1C 81 MOV   REG[28],129   (0076) 	mov	reg[1ch], 81h		; Port_7_DriveMode_0 register (PRT7DM0)
03F7: 62 1D 00 MOV   REG[29],0     (0077) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
03FA: 70 EF    AND   F,239         (0078) 	M8C_SetBank0
03FC: 62 1F 00 MOV   REG[31],0     (0079) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
03FF: 62 1E 00 MOV   REG[30],0     (0080) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0402: 71 10    OR    F,16          (0081) 	M8C_SetBank1
0404: 62 1E 00 MOV   REG[30],0     (0082) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0407: 62 1F 00 MOV   REG[31],0     (0083) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
040A: 70 EF    AND   F,239         (0084) 	M8C_SetBank0
040C: 62 1D 00 MOV   REG[29],0     (0085) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
040F: 70 EF    AND   F,239         (0086) 	M8C_SetBank0
                                   (0087) ;  Global Register values
0411: 62 60 08 MOV   REG[96],8     (0088) 	mov	reg[60h], 08h		; AnalogColumnInputSelect register (AMX_IN)
0414: 62 66 00 MOV   REG[102],0    (0089) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
0417: 62 61 C0 MOV   REG[97],192   (0090) 	mov	reg[61h], c0h		; AnalogMuxBusConfig register (AMUXCFG)
041A: 62 63 05 MOV   REG[99],5     (0091) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
041D: 62 65 00 MOV   REG[101],0    (0092) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
0420: 62 FD 00 MOV   REG[253],0    (0093) 	mov	reg[fdh], 00h		; DAC_Data register (DAC_D)
0423: 62 E6 00 MOV   REG[230],0    (0094) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
0426: 62 E7 03 MOV   REG[231],3    (0095) 	mov	reg[e7h], 03h		; DecimatorControl_1 register (DEC_CR1)
0429: 62 56 00 MOV   REG[86],0     (0096) 	mov	reg[56h], 00h		; Endpoint0Control register (EP0_CR)
042C: 62 57 00 MOV   REG[87],0     (0097) 	mov	reg[57h], 00h		; Endpoint0Count register (EP0_CNT)
042F: 62 58 00 MOV   REG[88],0     (0098) 	mov	reg[58h], 00h		; Endpoint0Data0 register (EP0_DR0)
0432: 62 59 00 MOV   REG[89],0     (0099) 	mov	reg[59h], 00h		; Endpoint0Data1 register (EP0_DR1)
0435: 62 5A 00 MOV   REG[90],0     (0100) 	mov	reg[5ah], 00h		; Endpoint0Data2 register (EP0_DR2)
0438: 62 5B 00 MOV   REG[91],0     (0101) 	mov	reg[5bh], 00h		; Endpoint0Data3 register (EP0_DR3)
043B: 62 5C 00 MOV   REG[92],0     (0102) 	mov	reg[5ch], 00h		; Endpoint0Data4 register (EP0_DR4)
043E: 62 5D 00 MOV   REG[93],0     (0103) 	mov	reg[5dh], 00h		; Endpoint0Data5 register (EP0_DR5)
0441: 62 5E 00 MOV   REG[94],0     (0104) 	mov	reg[5eh], 00h		; Endpoint0Data6 register (EP0_DR6)
0444: 62 5F 00 MOV   REG[95],0     (0105) 	mov	reg[5fh], 00h		; Endpoint0Data7 register (EP0_DR7)
0447: 62 4F 00 MOV   REG[79],0     (0106) 	mov	reg[4fh], 00h		; Endpoint1Count0 register (EP1_CNT)
044A: 62 4E 00 MOV   REG[78],0     (0107) 	mov	reg[4eh], 00h		; Endpoint1Count1 register (EP1_CNT1)
044D: 62 51 00 MOV   REG[81],0     (0108) 	mov	reg[51h], 00h		; Endpoint2Count0 register (EP2_CNT)
0450: 62 50 00 MOV   REG[80],0     (0109) 	mov	reg[50h], 00h		; Endpoint2Count1 register (EP2_CNT1)
0453: 62 53 00 MOV   REG[83],0     (0110) 	mov	reg[53h], 00h		; Endpoint3Count0 register (EP3_CNT)
0456: 62 52 00 MOV   REG[82],0     (0111) 	mov	reg[52h], 00h		; Endpoint3Count1 register (EP3_CNT1)
0459: 62 55 00 MOV   REG[85],0     (0112) 	mov	reg[55h], 00h		; Endpoint4Count0 register (EP4_CNT)
045C: 62 54 00 MOV   REG[84],0     (0113) 	mov	reg[54h], 00h		; Endpoint4Count1 register (EP4_CNT1)
045F: 62 D6 04 MOV   REG[214],4    (0114) 	mov	reg[d6h], 04h		; I2CConfig register (I2CCFG)
0462: 62 B0 00 MOV   REG[176],0    (0115) 	mov	reg[b0h], 00h		; Row_0_InputMux register (RDI0RI)
0465: 62 B1 00 MOV   REG[177],0    (0116) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
0468: 62 B2 00 MOV   REG[178],0    (0117) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
046B: 62 B3 33 MOV   REG[179],51   (0118) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
046E: 62 B4 33 MOV   REG[180],51   (0119) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
0471: 62 B5 00 MOV   REG[181],0    (0120) 	mov	reg[b5h], 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
0474: 62 B6 00 MOV   REG[182],0    (0121) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
0477: 62 4A 00 MOV   REG[74],0     (0122) 	mov	reg[4ah], 00h		; USBControl_0 register (USB_CR0)
047A: 62 4B 00 MOV   REG[75],0     (0123) 	mov	reg[4bh], 00h		; USBIOControl_0 register (USBIO_CR0)
047D: 62 4C 00 MOV   REG[76],0     (0124) 	mov	reg[4ch], 00h		; USBIOControl_1 register (USBIO_CR1)
                                   (0125) ;  Instance name ADCINC12_1, User Module ADCINC12
                                   (0126) ;       Instance name ADCINC12_1, Block Name ADC(ASC10)
0480: 62 80 90 MOV   REG[128],144  (0127) 	mov	reg[80h], 90h		;ADCINC12_1_AtoDcr0(ASC10CR0)
0483: 62 81 00 MOV   REG[129],0    (0128) 	mov	reg[81h], 00h		;ADCINC12_1_AtoDcr1(ASC10CR1)
0486: 62 82 60 MOV   REG[130],96   (0129) 	mov	reg[82h], 60h		;ADCINC12_1_AtoDcr2(ASC10CR2)
0489: 62 83 F0 MOV   REG[131],240  (0130) 	mov	reg[83h], f0h		;ADCINC12_1_AtoDcr3(ASC10CR3)
                                   (0131) ;       Instance name ADCINC12_1, Block Name CNT(DBB01)
048C: 62 27 00 MOV   REG[39],0     (0132) 	mov	reg[27h], 00h		;ADCINC12_1_CounterCR0(DBB01CR0)
048F: 62 25 00 MOV   REG[37],0     (0133) 	mov	reg[25h], 00h		;ADCINC12_1_CounterDR1(DBB01DR1)
0492: 62 26 00 MOV   REG[38],0     (0134) 	mov	reg[26h], 00h		;ADCINC12_1_CounterDR2(DBB01DR2)
                                   (0135) ;       Instance name ADCINC12_1, Block Name TMR(DBB00)
0495: 62 23 00 MOV   REG[35],0     (0136) 	mov	reg[23h], 00h		;ADCINC12_1_TimerCR0(DBB00CR0)
0498: 62 21 00 MOV   REG[33],0     (0137) 	mov	reg[21h], 00h		;ADCINC12_1_TimerDR1(DBB00DR1)
049B: 62 22 00 MOV   REG[34],0     (0138) 	mov	reg[22h], 00h		;ADCINC12_1_TimerDR2(DBB00DR2)
                                   (0139) ;  Instance name AMUX8_1, User Module AMUX8
                                   (0140) ;  Instance name Counter8_1, User Module Counter8
                                   (0141) ;       Instance name Counter8_1, Block Name CNTR8(DCB03)
049E: 62 2F 00 MOV   REG[47],0     (0142) 	mov	reg[2fh], 00h		;Counter8_1_CONTROL_REG(DCB03CR0)
04A1: 62 2D 64 MOV   REG[45],100   (0143) 	mov	reg[2dh], 64h		;Counter8_1_PERIOD_REG(DCB03DR1)
04A4: 62 2E 1F MOV   REG[46],31    (0144) 	mov	reg[2eh], 1fh		;Counter8_1_COMPARE_REG(DCB03DR2)
                                   (0145) ;  Instance name I2CHW_1, User Module I2CHW
                                   (0146) ;  Instance name LCD_1, User Module LCD
                                   (0147) ;  Instance name PGA_1, User Module PGA
                                   (0148) ;       Instance name PGA_1, Block Name GAIN(ACB00)
04A7: 62 71 FE MOV   REG[113],254  (0149) 	mov	reg[71h], feh		;PGA_1_GAIN_CR0(ACB00CR0)
04AA: 62 72 21 MOV   REG[114],33   (0150) 	mov	reg[72h], 21h		;PGA_1_GAIN_CR1(ACB00CR1)
04AD: 62 73 20 MOV   REG[115],32   (0151) 	mov	reg[73h], 20h		;PGA_1_GAIN_CR2(ACB00CR2)
04B0: 62 70 00 MOV   REG[112],0    (0152) 	mov	reg[70h], 00h		;PGA_1_GAIN_CR3(ACB00CR3)
04B3: 71 10    OR    F,16          (0153) 	M8C_SetBank1
                                   (0154) ;  Global Register values
04B5: 62 61 00 MOV   REG[97],0     (0155) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
04B8: 62 69 00 MOV   REG[105],0    (0156) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
04BB: 62 60 01 MOV   REG[96],1     (0157) 	mov	reg[60h], 01h		; AnalogColumnClockSelect register (CLK_CR0)
04BE: 62 62 00 MOV   REG[98],0     (0158) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
04C1: 62 67 33 MOV   REG[103],51   (0159) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
04C4: 62 68 00 MOV   REG[104],0    (0160) 	mov	reg[68h], 00h		; AnalogLUTControl1 register (ALT_CR1)
04C7: 62 63 00 MOV   REG[99],0     (0161) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
04CA: 62 66 00 MOV   REG[102],0    (0162) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
04CD: 62 64 00 MOV   REG[100],0    (0163) 	mov	reg[64h], 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
04D0: 62 64 00 MOV   REG[100],0    (0164) 	mov	reg[64h], 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
04D3: 62 FD 80 MOV   REG[253],128  (0165) 	mov	reg[fdh], 80h		; DAC_Control register (DAC_CR)
04D6: 62 C4 00 MOV   REG[196],0    (0166) 	mov	reg[c4h], 00h		; Endpoint1Control register (EP1_CR)
04D9: 62 C5 00 MOV   REG[197],0    (0167) 	mov	reg[c5h], 00h		; Endpoint2Control register (EP2_CR)
04DC: 62 C6 00 MOV   REG[198],0    (0168) 	mov	reg[c6h], 00h		; Endpoint3Control register (EP3_CR)
04DF: 62 C7 00 MOV   REG[199],0    (0169) 	mov	reg[c7h], 00h		; Endpoint4Control register (EP4_CR)
04E2: 62 D1 00 MOV   REG[209],0    (0170) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
04E5: 62 D3 00 MOV   REG[211],0    (0171) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
04E8: 62 D0 00 MOV   REG[208],0    (0172) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
04EB: 62 D2 00 MOV   REG[210],0    (0173) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
04EE: 62 E1 FE MOV   REG[225],254  (0174) 	mov	reg[e1h], feh		; OscillatorControl_1 register (OSC_CR1)
04F1: 62 E2 00 MOV   REG[226],0    (0175) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
04F4: 62 DF 09 MOV   REG[223],9    (0176) 	mov	reg[dfh], 09h		; OscillatorControl_3 register (OSC_CR3)
04F7: 62 DE 00 MOV   REG[222],0    (0177) 	mov	reg[deh], 00h		; OscillatorControl_4 register (OSC_CR4)
04FA: 62 DD 00 MOV   REG[221],0    (0178) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
04FD: 62 D8 00 MOV   REG[216],0    (0179) 	mov	reg[d8h], 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
0500: 62 D9 00 MOV   REG[217],0    (0180) 	mov	reg[d9h], 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
0503: 62 DA 00 MOV   REG[218],0    (0181) 	mov	reg[dah], 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
0506: 62 DB 00 MOV   REG[219],0    (0182) 	mov	reg[dbh], 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
0509: 62 EC 00 MOV   REG[236],0    (0183) 	mov	reg[ech], 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
050C: 62 ED 00 MOV   REG[237],0    (0184) 	mov	reg[edh], 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
050F: 62 E7 00 MOV   REG[231],0    (0185) 	mov	reg[e7h], 00h		; Type2Decimator_Control register (DEC_CR2)
0512: 62 C1 00 MOV   REG[193],0    (0186) 	mov	reg[c1h], 00h		; USBControl_1 register (USB_CR1)
                                   (0187) ;  Instance name ADCINC12_1, User Module ADCINC12
                                   (0188) ;       Instance name ADCINC12_1, Block Name ADC(ASC10)
                                   (0189) ;       Instance name ADCINC12_1, Block Name CNT(DBB01)
0515: 62 24 21 MOV   REG[36],33    (0190) 	mov	reg[24h], 21h		;ADCINC12_1_CounterFN(DBB01FN)
0518: 62 25 45 MOV   REG[37],69    (0191) 	mov	reg[25h], 45h		;ADCINC12_1_CounterSL(DBB01IN)
051B: 62 26 40 MOV   REG[38],64    (0192) 	mov	reg[26h], 40h		;ADCINC12_1_CounterOS(DBB01OU)
                                   (0193) ;       Instance name ADCINC12_1, Block Name TMR(DBB00)
051E: 62 20 20 MOV   REG[32],32    (0194) 	mov	reg[20h], 20h		;ADCINC12_1_TimerFN(DBB00FN)
0521: 62 21 15 MOV   REG[33],21    (0195) 	mov	reg[21h], 15h		;ADCINC12_1_TimerSL(DBB00IN)
0524: 62 22 40 MOV   REG[34],64    (0196) 	mov	reg[22h], 40h		;ADCINC12_1_TimerOS(DBB00OU)
                                   (0197) ;  Instance name AMUX8_1, User Module AMUX8
                                   (0198) ;  Instance name Counter8_1, User Module Counter8
                                   (0199) ;       Instance name Counter8_1, Block Name CNTR8(DCB03)
0527: 62 2C 21 MOV   REG[44],33    (0200) 	mov	reg[2ch], 21h		;Counter8_1_FUNC_REG(DCB03FN)
052A: 62 2D 17 MOV   REG[45],23    (0201) 	mov	reg[2dh], 17h		;Counter8_1_INPUT_REG(DCB03IN)
052D: 62 2E 40 MOV   REG[46],64    (0202) 	mov	reg[2eh], 40h		;Counter8_1_OUTPUT_REG(DCB03OU)
                                   (0203) ;  Instance name I2CHW_1, User Module I2CHW
                                   (0204) ;  Instance name LCD_1, User Module LCD
                                   (0205) ;  Instance name PGA_1, User Module PGA
                                   (0206) ;       Instance name PGA_1, Block Name GAIN(ACB00)
0530: 70 EF    AND   F,239         (0207) 	M8C_SetBank0
0532: 7F       RET                 (0208) 	ret

FILE: lib\psocconfig.asm
                                   (0001) ; Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0002) ;
                                   (0003) ;==========================================================================
                                   (0004) ;  PSoCConfig.asm
                                   (0005) ;  @PSOC_VERSION
                                   (0006) ;
                                   (0007) ;  Version: 0.85
                                   (0008) ;  Revised: June 22, 2004
                                   (0009) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0010) ;
                                   (0011) ;  This file is generated by the Device Editor on Application Generation.
                                   (0012) ;  It contains code which loads the configuration data table generated in
                                   (0013) ;  the file PSoCConfigTBL.asm
                                   (0014) ;
                                   (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0016) ;  Edits to this file will not be preserved.
                                   (0017) ;==========================================================================
                                   (0018) ;
                                   (0019) include "m8c.inc"
                                   (0020) include "memory.inc"
                                   (0021) include "GlobalParams.inc"
                                   (0022) 
                                   (0023) export LoadConfigInit
                                   (0024) export _LoadConfigInit
                                   (0025) export LoadConfig_radyopnl
                                   (0026) export _LoadConfig_radyopnl
                                   (0027) export Port_0_Data_SHADE
                                   (0028) export _Port_0_Data_SHADE
                                   (0029) export Port_0_DriveMode_0_SHADE
                                   (0030) export _Port_0_DriveMode_0_SHADE
                                   (0031) export Port_0_DriveMode_1_SHADE
                                   (0032) export _Port_0_DriveMode_1_SHADE
                                   (0033) 
                                   (0034) 
                                   (0035) export NO_SHADOW
                                   (0036) export _NO_SHADOW
                                   (0037) 
                                   (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                   (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0040) 
                                   (0041) AREA psoc_config(rom, rel)
                                   (0042) 
                                   (0043) 
                                   (0044) ;---------------------------------------------------------------------------
                                   (0045) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                   (0046) ;                  parameters handled by boot code, like CPU speed). This
                                   (0047) ;                  function can be called from user code, but typically it
                                   (0048) ;                  is only called from boot.
                                   (0049) ;
                                   (0050) ;       INPUTS: None.
                                   (0051) ;      RETURNS: Nothing.
                                   (0052) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0053) ;               In the large memory model currently only the page
                                   (0054) ;               pointer registers listed below are modified.  This does
                                   (0055) ;               not guarantee that in future implementations of this
                                   (0056) ;               function other page pointer registers will not be
                                   (0057) ;               modified.
                                   (0058) ;          
                                   (0059) ;               Page Pointer Registers Modified: 
                                   (0060) ;               CUR_PP
                                   (0061) ;
                                   (0062) _LoadConfigInit:
                                   (0063)  LoadConfigInit:
                                   (0064)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0065)     
0533: 55 00 00 MOV   [0],0         (0066) 	mov		[Port_0_Data_SHADE], 0h
0536: 55 01 7F MOV   [1],127       (0067) 	mov		[Port_0_DriveMode_0_SHADE], 7fh
0539: 55 02 80 MOV   [2],128       (0068) 	mov		[Port_0_DriveMode_1_SHADE], 80h
                                   (0069) 
053C: 7C 05 40 LCALL 0x0540        (0070) 	lcall	LoadConfig_radyopnl
                                   (0071) 
                                   (0072) 
                                   (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
053F: 7F       RET                 (0074)     ret
                                   (0075) 
                                   (0076) ;---------------------------------------------------------------------------
                                   (0077) ; Load Configuration radyopnl
                                   (0078) ;
                                   (0079) ;    Load configuration registers for radyopnl.
                                   (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0081) ;
                                   (0082) ;       INPUTS: None.
                                   (0083) ;      RETURNS: Nothing.
                                   (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0085) ;               modified as may the Page Pointer registers!
                                   (0086) ;               In the large memory model currently only the page
                                   (0087) ;               pointer registers listed below are modified.  This does
                                   (0088) ;               not guarantee that in future implementations of this
                                   (0089) ;               function other page pointer registers will not be
                                   (0090) ;               modified.
                                   (0091) ;          
                                   (0092) ;               Page Pointer Registers Modified: 
                                   (0093) ;               CUR_PP
                                   (0094) ;
                                   (0095) _LoadConfig_radyopnl:
                                   (0096)  LoadConfig_radyopnl:
                                   (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
0540: 7C 03 44 LCALL 0x0344        (0098)     lcall   LoadConfigTBL_radyopnl            ; Call load config table routine
                                   (0099) 
                                   (0100) 
0543: 70 EF    AND   F,239         (0101)     M8C_SetBank0                    ; Force return to bank 0
                                   (0102)     RAM_EPILOGUE RAM_USE_CLASS_4
0545: 7F       RET                 (0103)     ret

FILE: lib\lcd_1.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME:   LCD_1.asm
                                   (0004) ;;  Version: 1.4, Updated on 2006/06/09 at 09:53:12
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: LCD User Module software implementation file
                                   (0008) ;;               for the M8C based PSoC family of devices.
                                   (0009) ;;
                                   (0010) ;; This set of functions is written for the common 2 and 4 line
                                   (0011) ;; LCDs that use the Hitachi HD44780A controller.
                                   (0012) ;;
                                   (0013) ;;  LCD connections to PSoC port
                                   (0014) ;;
                                   (0015) ;;    PX.0 ==> LCD D4
                                   (0016) ;;    PX.1 ==> LCD D5
                                   (0017) ;;    PX.2 ==> LCD D6
                                   (0018) ;;    PX.3 ==> LCD D7
                                   (0019) ;;    PX.4 ==> LCD E
                                   (0020) ;;    PX.5 ==> LCD RS
                                   (0021) ;;    PX.6 ==> LCD R/W
                                   (0022) ;;
                                   (0023) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0024) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0025) ;;        This means it is the caller's responsibility to preserve any values
                                   (0026) ;;        in the X and A registers that are still needed after the API functions
                                   (0027) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0028) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0029) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0030) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0031) ;;-----------------------------------------------------------------------------
                                   (0032) ;;  Copyright (c) Cypress MicroSystems 2001-2006. All Rights Reserved.
                                   (0033) ;;*****************************************************************************
                                   (0034) ;;*****************************************************************************
                                   (0035) 
                                   (0036) include "m8c.inc"
                                   (0037) include "memory.inc"
                                   (0038) include "LCD_1.inc"
                                   (0039) 
                                   (0040) ;-----------------------------------------------
                                   (0041) ;  Global Symbols
                                   (0042) ;-----------------------------------------------
                                   (0043) 
                                   (0044) export   LCD_1_Start
                                   (0045) export  _LCD_1_Start
                                   (0046) export   LCD_1_Init
                                   (0047) export  _LCD_1_Init
                                   (0048) 
                                   (0049) export   LCD_1_WriteData
                                   (0050) export  _LCD_1_WriteData
                                   (0051) 
                                   (0052) export   LCD_1_Control
                                   (0053) export  _LCD_1_Control
                                   (0054) 
                                   (0055) export  LCD_1_PrString
                                   (0056) export _LCD_1_PrString
                                   (0057) 
                                   (0058) export  LCD_1_PrCString
                                   (0059) export _LCD_1_PrCString
                                   (0060) 
                                   (0061) export  LCD_1_Position
                                   (0062) export _LCD_1_Position
                                   (0063) 
                                   (0064) export  LCD_1_PrHexByte
                                   (0065) export _LCD_1_PrHexByte
                                   (0066) 
                                   (0067) export  LCD_1_PrHexInt
                                   (0068) export _LCD_1_PrHexInt
                                   (0069) 
                                   (0070) export  LCD_1_Delay50uTimes
                                   (0071) export _LCD_1_Delay50uTimes
                                   (0072) 
                                   (0073) export  LCD_1_Delay50u
                                   (0074) export _LCD_1_Delay50u
                                   (0075) 
                                   (0076) ;-----------------------------------------------
                                   (0077) ; If bargraph functions not required, don't
                                   (0078) ; export the function names.
                                   (0079) ;-----------------------------------------------
                                   (0080) 
                                   (0081) IF (LCD_1_BARGRAPH_ENABLE)
                                   (0082) export  LCD_1_InitBG
                                   (0083) export _LCD_1_InitBG
                                   (0084) 
                                   (0085) export  LCD_1_InitVBG
                                   (0086) export _LCD_1_InitVBG
                                   (0087) 
                                   (0088) ; NOTE: The two functions,
                                   (0089) ;
                                   (0090) ;    LCD_1_DrawVBG and
                                   (0091) ;    LCD_1_DrawBG
                                   (0092) ;
                                   (0093) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                   (0094) ; fall into a special and rare case where the calling sequences specified
                                   (0095) ; by the two disciplines are incompatible. The fastcall16 versions are
                                   (0096) ; provided for both C and Assembly users in all memory models. The legacy
                                   (0097) ; fastcall16 versions are provided only to support existing small memory
                                   (0098) ; model assembly language code---they do not work in the large memory
                                   (0099) ; model.
                                   (0100) ;
                                   (0101) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                   (0102) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                   (0103) ; ** deprecated and thier status is "No Further Maintenance".
                                   (0104) ;
                                   (0105) ; The fastcall16 versions of these functions are distinguished by a
                                   (0106) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                   (0107) ; in this comment) do not have the leading underscore. Details on the
                                   (0108) ; calling sequence to be used for fastcall16 are given in the user module
                                   (0109) ; datasheet.
                                   (0110) ;
                                   (0111) ; Fastcall16 versions:
                                   (0112) export _LCD_1_DrawVBG
                                   (0113) export _LCD_1_DrawBG
                                   (0114) 
                                   (0115) IF SYSTEM_SMALL_MEMORY_MODEL
                                   (0116) ; Legacy Fastcall versions:
                                   (0117) export  LCD_1_DrawVBG
                                   (0118) export  LCD_1_DrawBG
                                   (0119) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                   (0120) 
                                   (0121) ENDIF  ; BARGRAPH_ENABLE
                                   (0122) 
                                   (0123) ;
                                   (0124) ; The following functions are deprecated and will be eliminated in a future
                                   (0125) ; version of PSoC Designer.
                                   (0126) ;
                                   (0127) export   LCD_1_Write_Data
                                   (0128) export  _LCD_1_Write_Data
                                   (0129) 
                                   (0130) 
                                   (0131) ;-----------------------------------------------
                                   (0132) ;  EQUATES
                                   (0133) ;-----------------------------------------------
                                   (0134) 
                                   (0135) LCD_1_Port:           equ    PRT0DR
                                   (0136) LCD_1_PortMode0:      equ    PRT0DM0
                                   (0137) LCD_1_PortMode1:      equ    PRT0DM1
                                   (0138) 
                                   (0139) 
                                   (0140) IF LCD_UM_CONSTANTS
                                   (0141) ;; Already defined in another instance
                                   (0142) ELSE
                                   (0143) LCD_UM_CONSTANTS:  equ 1
                                   (0144) 
                                   (0145) LCD_E:              equ    10h
                                   (0146) LCD_RW:             equ    40h
                                   (0147) LCD_RS:             equ    20h
                                   (0148) 
                                   (0149) LCD_DATA_MASK:      equ    0Fh
                                   (0150) LCD_READY_BIT:      equ    08h
                                   (0151) 
                                   (0152) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                   (0153) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                   (0154) LCD_PORT_WRITE:     equ    7Fh
                                   (0155) LCD_PORT_MASK:      equ    7Fh
                                   (0156) 
                                   (0157) DISP_INC:           equ    03h
                                   (0158) DISP_OFF:           equ    08h
                                   (0159) DISP_ON:            equ    0Ch
                                   (0160) LCD_4BIT_2LINE:     equ    2Ch
                                   (0161) 
                                   (0162) 
                                   (0163) ;-----------------------------------------------
                                   (0164) ;      Bargraph definitions
                                   (0165) ;-----------------------------------------------
                                   (0166) 
                                   (0167) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                   (0168) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                   (0169) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                   (0170) 
                                   (0171)                                   ; Offsets for 2x16, 2x20, 4x20
                                   (0172)                                   ; Change these values for a custome LCD
                                   (0173) 
                                   (0174) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                   (0175) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                   (0176) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                   (0177) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                   (0178) 
                                   (0179) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                   (0180) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                   (0181) 
                                   (0182) CG_RAM_OFFSET:      equ    40h    ; Offset to character RAM
                                   (0183) ENDIF
                                   (0184) 
                                   (0185) AREA UserModules (ROM, REL)
                                   (0186) 
                                   (0187) .SECTION
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;  FUNCTION NAME: LCD_1_PrCString
                                   (0190) ;
                                   (0191) ;  DESCRIPTION:
                                   (0192) ;    Print constant (ROM) string to LCD
                                   (0193) ;-----------------------------------------------------------------------------
                                   (0194) ;
                                   (0195) ;  ARGUMENTS:
                                   (0196) ;     A:X  Pointer to String
                                   (0197) ;          A contains MSB of string address
                                   (0198) ;          X contains LSB of string address
                                   (0199) ;
                                   (0200) ;  RETURNS:  none
                                   (0201) ;
                                   (0202) ;  SIDE EFFECTS:
                                   (0203) ;    The A and X registers may be modified by this or future implementations
                                   (0204) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0205) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0206) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0207) ;    functions.
                                   (0208) ;          
                                   (0209) ;    Currently only the page pointer registers listed below are modified: 
                                   (0210) ;          CUR_PP
                                   (0211) ;
                                   (0212)  LCD_1_PrCString:
                                   (0213) _LCD_1_PrCString:
                                   (0214)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0215)  Loop_PrCString:
0546: 08       PUSH  A             (0216)     push  A                            ; Store ROM pointer
0547: 10       PUSH  X             (0217)     push  X
0548: 28       ROMX                (0218)     romx                               ; Get character from ROM
0549: B0 04    JNZ   0x054E        (0219)     jnz   LCD_PrCString_WR             ; print character and advance pointer
054B: 20       POP   X             (0220)     pop   X                            ; Restore the stack
054C: 18       POP   A             (0221)     pop   A
                                   (0222)     RAM_EPILOGUE RAM_USE_CLASS_1
054D: 7F       RET                 (0223)     ret                                ; Return
                                   (0224) 
                                   (0225) LCD_PrCString_WR:
054E: 90 44    CALL  0x0594        (0226)     call  LCD_1_WriteData              ; Write data to LCD
0550: 20       POP   X             (0227)     pop   X                            ; Get ROM pointer
0551: 18       POP   A             (0228)     pop   A
0552: 75       INC   X             (0229)     inc   X                            ; Inc LSB of pointer
0553: DF F2    JNC   0x0546        (0230)     jnc   Loop_PrCString
0555: 74       INC   A             (0231)     inc   A                            ; Inc MSB of pointer if LSB overflow
0556: 8F EF    JMP   0x0546        (0232)     jmp   Loop_PrCString
0558: 30       HALT  
0559: 31 32    XOR   A,50
055B: 33 34    XOR   A,[X+52]
055D: 35 36    XOR   [X+54],A
055F: 37 38 39 XOR   [X+56],57
0562: 41 42 43 AND   REG[66],67
0565: 44 45 46 OR    REG[X+69],70
                                   (0233) 
                                   (0234) .ENDSECTION
                                   (0235) 
                                   (0236) ;-----------------------------------------------------------------------------
                                   (0237) ;  FUNCTION NAME: LCD_1_PrHexByte
                                   (0238) ;
                                   (0239) ;  DESCRIPTION:
                                   (0240) ;     Print a byte in Hex (two characters) to current LCD position
                                   (0241) ;
                                   (0242) ;-----------------------------------------------------------------------------
                                   (0243) ;
                                   (0244) ;  ARGUMENTS:
                                   (0245) ;     A  => (BYTE) Data/char to be printed
                                   (0246) ;
                                   (0247) ;  RETURNS: none
                                   (0248) ;
                                   (0249) ;  SIDE EFFECTS:
                                   (0250) ;    The A and X registers may be modified by this or future implementations
                                   (0251) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0252) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0253) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0254) ;    functions.
                                   (0255) ;          
                                   (0256) ;    Currently only the page pointer registers listed below are modified: 
                                   (0257) ;          CUR_PP
                                   (0258) ;
                                   (0259) .LITERAL
                                   (0260) LCD_1_HEX_STR::
                                   (0261)      DS    "0123456789ABCDEF"
                                   (0262) .ENDLITERAL
                                   (0263) .SECTION
                                   (0264) 
                                   (0265)  LCD_1_PrHexByte:
                                   (0266) _LCD_1_PrHexByte:
                                   (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
0568: 08       PUSH  A             (0268)     push  A                            ; Save lower nibble
0569: 67       ASR   A             (0269)     asr   A                            ; Shift high nibble to right
056A: 67       ASR   A             (0270)     asr   A
056B: 67       ASR   A             (0271)     asr   A
056C: 67       ASR   A             (0272)     asr   A
056D: 21 0F    AND   A,15          (0273)     and   A,0Fh                        ; Mask off nibble
056F: FF E7    INDEX 0x0558        (0274)     index LCD_1_HEX_STR                  ; Get Hex value
0571: 90 21    CALL  0x0594        (0275)     call  LCD_1_WriteData              ; Write data to screen
0573: 18       POP   A             (0276)     pop   A                            ; Restore value
0574: 21 0F    AND   A,15          (0277)     and   A,0Fh                        ; Mask off lower nibble
0576: FF E0    INDEX 0x0558        (0278)     index LCD_1_HEX_STR                  ; Get Hex value
0578: 90 1A    CALL  0x0594        (0279)     call  LCD_1_WriteData              ; Write data to screen
                                   (0280)     RAM_EPILOGUE RAM_USE_CLASS_1
057A: 7F       RET                 (0281)     ret
                                   (0282) .ENDSECTION
                                   (0283) 
                                   (0284) .SECTION
                                   (0285) ;-----------------------------------------------------------------------------
                                   (0286) ;  FUNCTION NAME: LCD_1_PrHexInt
                                   (0287) ;
                                   (0288) ;  DESCRIPTION:
                                   (0289) ;     Print an Int in Hex (four characters) to current LCD position
                                   (0290) ;
                                   (0291) ;-----------------------------------------------------------------------------
                                   (0292) ;
                                   (0293) ;  ARGUMENTS:
                                   (0294) ;     A:X Integer value
                                   (0295) ;         A  contains LSB of Int
                                   (0296) ;         X  contains MSB of Int
                                   (0297) ;
                                   (0298) ;  RETURNS: none
                                   (0299) ;
                                   (0300) ;  SIDE EFFECTS:
                                   (0301) ;    The A and X registers may be modified by this or future implementations
                                   (0302) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0303) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0304) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0305) ;    functions.
                                   (0306) ;          
                                   (0307) ;    Currently only the page pointer registers listed below are modified: 
                                   (0308) ;          CUR_PP
                                   (0309) ;
                                   (0310)  LCD_1_PrHexInt:
                                   (0311) _LCD_1_PrHexInt:
                                   (0312)     RAM_PROLOGUE RAM_USE_CLASS_1
057B: 4B       SWAP  A,X           (0313)     swap  A,X
057C: 9F EA    CALL  0x0568        (0314)     call  LCD_1_PrHexByte              ; Print MSB
057E: 5B       MOV   A,X           (0315)     mov   A,X                          ; Move LSB into position
057F: 9F E7    CALL  0x0568        (0316)     call  LCD_1_PrHexByte              ; Print LSB
                                   (0317)     RAM_EPILOGUE RAM_USE_CLASS_1
0581: 7F       RET                 (0318)     ret
                                   (0319) .ENDSECTION
                                   (0320) 
                                   (0321) .SECTION
                                   (0322) ;-----------------------------------------------------------------------------
                                   (0323) ;  FUNCTION NAME: LCD_1_PrString
                                   (0324) ;
                                   (0325) ;  DESCRIPTION:
                                   (0326) ;     Print (RAM) ASCII string to LCD
                                   (0327) ;
                                   (0328) ;-----------------------------------------------------------------------------
                                   (0329) ;
                                   (0330) ;  ARGUMENTS:
                                   (0331) ;     A:X contains pointer to string
                                   (0332) ;         X  contains LSB of string pointer
                                   (0333) ;         A  contains MSB or page of string pointer (not used at this time)
                                   (0334) ;
                                   (0335) ;  RETURNS:
                                   (0336) ;
                                   (0337) ;  SIDE EFFECTS:
                                   (0338) ;    The A and X registers may be modified by this or future implementations
                                   (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0342) ;    functions.
                                   (0343) ;          
                                   (0344) ;    Currently only the page pointer registers listed below are modified: 
                                   (0345) ;          CUR_PP
                                   (0346) ;          IDX_PP
                                   (0347) ;
                                   (0348) ;
                                   (0349)  LCD_1_PrString:
                                   (0350) _LCD_1_PrString:
0582: 70 BF    AND   F,191         (0351)     RAM_PROLOGUE RAM_USE_CLASS_3
0584: 60 D3    MOV   REG[211],A    (0352)     RAM_SETPAGE_IDX A
                                   (0353)  Loop_PrString:
0586: 52 00    MOV   A,[X+0]       (0354)     mov   A,[X]                        ; Get value pointed to by X
0588: A0 06    JZ    0x058F        (0355)     jz    End_LCD_PrString             ; Check for end of string
                                   (0356)     ;LCD_1_writeData is known not to modify X so no need to perserve
058A: 90 08    CALL  0x0594        (0357)     call  LCD_1_WriteData              ; Write data to screen
058C: 75       INC   X             (0358)     inc   X                            ; Advance pointer to next character
058D: 8F F8    JMP   0x0586        (0359)     jmp   Loop_PrString                ; Go get next character
058F: 70 3F    AND   F,63
                                   (0360) End_LCD_PrString:
0591: 71 C0    OR    F,192         (0361)     RAM_EPILOGUE RAM_USE_CLASS_3
0593: 7F       RET                 (0362)     ret
                                   (0363) .ENDSECTION
                                   (0364) 
                                   (0365) .SECTION
                                   (0366) ;-----------------------------------------------------------------------------
                                   (0367) ;  FUNCTION NAME: LCD_1_WriteData
                                   (0368) ;
                                   (0369) ;  DESCRIPTION:
                                   (0370) ;     Write a byte to the LCD's data register.
                                   (0371) ;
                                   (0372) ;-----------------------------------------------------------------------------
                                   (0373) ;
                                   (0374) ;  ARGUMENTS:
                                   (0375) ;    A contains byte to be written to LCD data register
                                   (0376) ;
                                   (0377) ;  RETURNS: none
                                   (0378) ;
                                   (0379) ;  SIDE EFFECTS:
                                   (0380) ;    The A and X registers may be modified by this or future implementations
                                   (0381) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0382) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0383) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0384) ;    functions.
                                   (0385) ;          
                                   (0386) ;    Currently only the page pointer registers listed below are modified: 
                                   (0387) ;          CUR_PP
                                   (0388) ;
                                   (0389)  LCD_1_WriteData:
                                   (0390) _LCD_1_WriteData:
                                   (0391)  LCD_1_Write_Data:   ; Do not use
                                   (0392) _LCD_1_Write_Data:   ; Do not use
                                   (0393)     RAM_PROLOGUE RAM_USE_CLASS_1
0594: 90 65    CALL  0x05FB        (0394)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                   (0395)                                        ; A is preserved in LCD_1_Check_Ready
0596: 08       PUSH  A             (0396)     push  A                            ; Save copy of character
0597: 67       ASR   A             (0397)     asr   A                            ; Shift high nibble to right
0598: 67       ASR   A             (0398)     asr   A
0599: 67       ASR   A             (0399)     asr   A
059A: 67       ASR   A             (0400)     asr   A
059B: 21 0F    AND   A,15          (0401)     and   A,0Fh                        ; Mask off high nibble
059D: 90 3B    CALL  0x05DA        (0402)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
059F: 18       POP   A             (0403)     pop   A                            ; Retrieve copy of character
05A0: 21 0F    AND   A,15          (0404)     and   A,0Fh                        ; Mask off high nibble
05A2: 40       NOP                 (0405)     nop
05A3: 40       NOP                 (0406)     nop
05A4: 40       NOP                 (0407)     nop
05A5: 90 33    CALL  0x05DA        (0408)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                   (0409)     RAM_EPILOGUE RAM_USE_CLASS_1
05A7: 7F       RET                 (0410)     ret
                                   (0411) .ENDSECTION
                                   (0412) 
                                   (0413) .SECTION
                                   (0414) ;-----------------------------------------------------------------------------
                                   (0415) ;  FUNCTION NAME: LCD_1_Control
                                   (0416) ;
                                   (0417) ;  DESCRIPTION:
                                   (0418) ;     Write a byte to the LCD's control register.
                                   (0419) ;
                                   (0420) ;-----------------------------------------------------------------------------
                                   (0421) ;
                                   (0422) ;  ARGUMENTS:
                                   (0423) ;     A contains data to be written to LCD control register.
                                   (0424) ;
                                   (0425) ;  RETURNS: none
                                   (0426) ;
                                   (0427) ;  SIDE EFFECTS:
                                   (0428) ;    The A and X registers may be modified by this or future implementations
                                   (0429) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0430) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0431) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0432) ;    functions.
                                   (0433) ;          
                                   (0434) ;    Currently only the page pointer registers listed below are modified: 
                                   (0435) ;          CUR_PP
                                   (0436) ;
                                   (0437)  LCD_1_Control:
                                   (0438) _LCD_1_Control:
                                   (0439)     RAM_PROLOGUE RAM_USE_CLASS_1
05A8: 90 51    CALL  0x05FB        (0440)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                   (0441)                                        ; A is preserved in LCD_1_Check_Ready
05AA: 08       PUSH  A             (0442)     push  A                            ; Save copy of byte
05AB: 67       ASR   A             (0443)     asr   A                            ; Shift Upper Nibble to right
05AC: 67       ASR   A             (0444)     asr   A
05AD: 67       ASR   A             (0445)     asr   A
05AE: 67       ASR   A             (0446)     asr   A
05AF: 21 0F    AND   A,15          (0447)     and   A,0Fh                        ; Mask off, just in case
05B1: 90 09    CALL  0x05BC        (0448)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
05B3: 18       POP   A             (0449)     pop   A                            ; Restore copy of byte
05B4: 21 0F    AND   A,15          (0450)     and   A,0Fh                        ; Mask off high nibble
05B6: 40       NOP                 (0451)     nop
05B7: 40       NOP                 (0452)     nop
05B8: 40       NOP                 (0453)     nop
05B9: 90 01    CALL  0x05BC        (0454)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                   (0455)     RAM_EPILOGUE RAM_USE_CLASS_1
05BB: 7F       RET                 (0456)     ret
                                   (0457) .ENDSECTION
                                   (0458) 
                                   (0459) .SECTION
                                   (0460) ;-----------------------------------------------------------------------------
                                   (0461) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                   (0462) ;
                                   (0463) ;  DESCRIPTION:
                                   (0464) ;     Write a single nibble to the LCD's command register
                                   (0465) ;
                                   (0466) ;-----------------------------------------------------------------------------
                                   (0467) ;
                                   (0468) ;  ARGUMENTS:
                                   (0469) ;     A[3:0]   Contains Nibble to be written to command register
                                   (0470) ;
                                   (0471) ;  RETURNS: none
                                   (0472) ;
                                   (0473) ;  SIDE EFFECTS:
                                   (0474) ;    The A and X registers may be modified by this or future implementations
                                   (0475) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0476) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0477) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0478) ;    functions.
                                   (0479) ;          
                                   (0480) ;    Currently only the page pointer registers listed below are modified: 
                                   (0481) ;          CUR_PP
                                   (0482) ;
                                   (0483)  LCD_1_WCNTL_Nibble:
                                   (0484)     RAM_PROLOGUE RAM_USE_CLASS_4
05BC: 08       PUSH  A             (0485)     push  A
05BD: 62 D0 00 MOV   REG[208],0    (0486)     RAM_SETPAGE_CUR >Port_0_Data_SHADE       ; Set CUR_PP to LCD variable address
05C0: 26 00 80 AND   [0],128       (0487)     and   [Port_0_Data_SHADE],~LCD_PORT_MASK
05C3: 51 00    MOV   A,[0]         (0488)     mov   A,[Port_0_Data_SHADE]
05C5: 60 00    MOV   REG[0],A      (0489)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                   (0490) 
05C7: 18       POP   A             (0491)     pop   A
05C8: 21 0F    AND   A,15          (0492)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
05CA: 29 10    OR    A,16          (0493)     or    A,LCD_E                                ; Bring "E" Enable line high
05CC: 2A 00    OR    A,[0]         (0494)     or    A,[Port_0_Data_SHADE]                  ; OR in bit 7 just
05CE: 60 00    MOV   REG[0],A      (0495)     mov   reg[LCD_1_Port], A                     ; Write data
05D0: 53 00    MOV   [0],A         (0496)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
05D2: 40       NOP                 (0497)     nop
05D3: 21 8F    AND   A,143         (0498)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
05D5: 53 00    MOV   [0],A         (0499)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
05D7: 60 00    MOV   REG[0],A      (0500)     mov   reg[LCD_1_Port],A
                                   (0501)     RAM_EPILOGUE RAM_USE_CLASS_4
05D9: 7F       RET                 (0502)     ret
                                   (0503) .ENDSECTION
                                   (0504) 
                                   (0505) .SECTION
                                   (0506) ;-----------------------------------------------------------------------------
                                   (0507) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                   (0508) ;
                                   (0509) ;  DESCRIPTION:
                                   (0510) ;     Write a single nibble to the LCD's DATA register
                                   (0511) ;
                                   (0512) ;-----------------------------------------------------------------------------
                                   (0513) ;
                                   (0514) ;  ARGUMENTS:
                                   (0515) ;     A[3:0]   Contains Nibble to be written to data register
                                   (0516) ;
                                   (0517) ;  RETURNS: none
                                   (0518) ;
                                   (0519) ;  SIDE EFFECTS:
                                   (0520) ;    The A and X registers may be modified by this or future implementations
                                   (0521) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0522) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0523) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0524) ;    functions.
                                   (0525) ;          
                                   (0526) ;    Currently only the page pointer registers listed below are modified: 
                                   (0527) ;          CUR_PP
                                   (0528) ;
                                   (0529) LCD_1_WDATA_Nibble:
                                   (0530)     RAM_PROLOGUE RAM_USE_CLASS_4
05DA: 08       PUSH  A             (0531)     push  A
05DB: 62 D0 00 MOV   REG[208],0    (0532)     RAM_SETPAGE_CUR >Port_0_Data_SHADE          ; Set CUR_PP to LCD variable address
05DE: 26 00 80 AND   [0],128       (0533)     and   [Port_0_Data_SHADE],~LCD_PORT_MASK
05E1: 2E 00 20 OR    [0],32        (0534)     or    [Port_0_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
05E4: 51 00    MOV   A,[0]         (0535)     mov   A,[Port_0_Data_SHADE]
05E6: 60 00    MOV   REG[0],A      (0536)     mov   reg[LCD_1_Port],A
                                   (0537) 
05E8: 18       POP   A             (0538)     pop   A
05E9: 21 0F    AND   A,15          (0539)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
05EB: 29 30    OR    A,48          (0540)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
05ED: 2A 00    OR    A,[0]         (0541)     or    A,[Port_0_Data_SHADE]                       ; Keep shadow in sync
05EF: 60 00    MOV   REG[0],A      (0542)     mov   reg[LCD_1_Port], A                            ; Write data
05F1: 53 00    MOV   [0],A         (0543)     mov   [Port_0_Data_SHADE],A                       ; Keep shadow in sync
05F3: 40       NOP                 (0544)     NOP
05F4: 21 AF    AND   A,175         (0545)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
05F6: 53 00    MOV   [0],A         (0546)     mov   [Port_0_Data_SHADE],A                       ; keep shadow in sync
05F8: 60 00    MOV   REG[0],A      (0547)     mov   reg[LCD_1_Port],A
                                   (0548)     RAM_EPILOGUE RAM_USE_CLASS_4
05FA: 7F       RET                 (0549)     ret
                                   (0550) .ENDSECTION
                                   (0551) 
                                   (0552) .SECTION
                                   (0553) ;-----------------------------------------------------------------------------
                                   (0554) ;  FUNCTION NAME: LCD_1_Check_Ready
                                   (0555) ;
                                   (0556) ;  DESCRIPTION:
                                   (0557) ;     Wait until LCD has completed last command.
                                   (0558) ;
                                   (0559) ;-----------------------------------------------------------------------------
                                   (0560) ;
                                   (0561) ;  ARGUMENTS: none
                                   (0562) ;
                                   (0563) ;  RETURNS: none
                                   (0564) ;
                                   (0565) ;  SIDE EFFECTS:
                                   (0566) ;    The A and X registers may be modified by this or future implementations
                                   (0567) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0568) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0569) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0570) ;    functions.
                                   (0571) ;          
                                   (0572) ;    Currently only the page pointer registers listed below are modified: 
                                   (0573) ;          CUR_PP
                                   (0574) ;
                                   (0575) ;     If LCD is not present, this routine may never return.
                                   (0576) ;
                                   (0577) LCD_1_Check_Ready:
                                   (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
05FB: 08       PUSH  A             (0579)     push  A                                                     ; Save Accumulator
05FC: 62 D0 00 MOV   REG[208],0    (0580)     RAM_SETPAGE_CUR >Port_0_Data_SHADE          ; Set CUR_PP to LCD variable address
05FF: 26 00 80 AND   [0],128       (0581)     and   [Port_0_Data_SHADE],~LCD_PORT_MASK                    ; Mask of all LCD bits
0602: 51 00    MOV   A,[0]         (0582)     mov   A,[Port_0_Data_SHADE]
0604: 60 00    MOV   REG[0],A      (0583)     mov   reg[LCD_1_Port],A                                     ; Zero LCD port bits
                                   (0584) 
0606: 26 01 F0 AND   [1],240       (0585)     and   [Port_0_DriveMode_0_SHADE],~LCD_DATA_MASK             ; Clear out LCD mode bits.
0609: 51 01    MOV   A,[1]         (0586)     mov   A,[Port_0_DriveMode_0_SHADE]
060B: 71 10    OR    F,16          (0587)     M8C_SetBank1                                                ; Change port mode to read status
060D: 60 00    MOV   REG[0],A      (0588)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for reading
060F: 70 EF    AND   F,239         (0589)     M8C_SetBank0
                                   (0590) 
0611: 2E 00 40 OR    [0],64        (0591)     or    [Port_0_Data_SHADE],LCD_RW                            ; Raise RW to signify Read operation
0614: 51 00    MOV   A,[0]         (0592)     mov   A,[Port_0_Data_SHADE]
0616: 60 00    MOV   REG[0],A      (0593)     mov   reg[LCD_1_Port],A
0618: 40       NOP                 (0594)     NOP
                                   (0595) 
                                   (0596) LCD_RDY_LOOP:
0619: 2E 00 50 OR    [0],80        (0597)     or    [Port_0_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
061C: 51 00    MOV   A,[0]         (0598)     mov   A,[Port_0_Data_SHADE]
061E: 60 00    MOV   REG[0],A      (0599)     mov   reg[LCD_1_Port],A
                                   (0600) 
0620: 40       NOP                 (0601)     nop                                                         ; Wait 2 nops to make sure data is ready
0621: 40       NOP                 (0602)     nop
0622: 5D 00    MOV   A,REG[0]      (0603)     mov   A,reg[LCD_1_Port]
                                   (0604) 
                                   (0605) ; The code below is used to work around the async read issue with the ICE with the 
                                   (0606) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                   (0607) ; errors.  It is not required when running without the ICE or when using any other 
                                   (0608) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                   (0609) ; the ICE_PORT_SYNC flag should be set to 0.
                                   (0610) IF(ICE_PORT_SYNC)                          
                                   (0611)     mov   reg[ 0xfa], A                    
                                   (0612)     mov   A, reg[0xfa]                     
                                   (0613) ENDIF   
                                   (0614)                                    
0624: 08       PUSH  A             (0615)     push  A
0625: 26 00 C0 AND   [0],192       (0616)     and   [Port_0_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0628: 51 00    MOV   A,[0]         (0617)     mov   A,[Port_0_Data_SHADE]
062A: 60 00    MOV   REG[0],A      (0618)     mov   reg[LCD_1_Port],A
                                   (0619) 
062C: 40       NOP                 (0620)     nop                                    ; Add delay for the slowest part and the
062D: 40       NOP                 (0621)     nop                                    ; fastest PSoC
062E: 40       NOP                 (0622)     nop
                                   (0623)                                                                 ; Get the LSBs
062F: 2E 00 50 OR    [0],80        (0624)     or    [Port_0_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0632: 51 00    MOV   A,[0]         (0625)     mov   A,[Port_0_Data_SHADE]
0634: 60 00    MOV   REG[0],A      (0626)     mov   reg[LCD_1_Port],A
                                   (0627) 
0636: 40       NOP                 (0628)     nop
0637: 40       NOP                 (0629)     nop
                                   (0630) 
0638: 26 00 C0 AND   [0],192       (0631)     and   [Port_0_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
063B: 51 00    MOV   A,[0]         (0632)     mov   A,[Port_0_Data_SHADE]
063D: 60 00    MOV   REG[0],A      (0633)     mov   reg[LCD_1_Port],A
                                   (0634) 
063F: 18       POP   A             (0635)     pop   A
0640: 21 08    AND   A,8           (0636)     and   A,LCD_READY_BIT                                       ; Check busy
0642: BF D6    JNZ   0x0619        (0637)     jnz   LCD_RDY_LOOP                                          ; If LCD still busy, read again
                                   (0638) 
0644: 2E 01 7F OR    [1],127       (0639)     or    [Port_0_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Revert Data bit to Write mode
0647: 51 01    MOV   A,[1]         (0640)     mov   A,[Port_0_DriveMode_0_SHADE]
0649: 71 10    OR    F,16          (0641)     M8C_SetBank1
064B: 60 00    MOV   REG[0],A      (0642)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
064D: 70 EF    AND   F,239         (0643)     M8C_SetBank0
064F: 18       POP   A             (0644)     pop   A
                                   (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0650: 7F       RET                 (0646)     ret
                                   (0647) .ENDSECTION
                                   (0648) 
                                   (0649) .SECTION
                                   (0650) ;-----------------------------------------------------------------------------
                                   (0651) ;  FUNCTION NAME: LCD_1_Start
                                   (0652) ;  FUNCTION NAME: LCD_1_Init
                                   (0653) ;
                                   (0654) ;  DESCRIPTION:
                                   (0655) ;     Initialize LCD
                                   (0656) ;
                                   (0657) ;-----------------------------------------------------------------------------
                                   (0658) ;
                                   (0659) ;  ARGUMENTS: none
                                   (0660) ;
                                   (0661) ;  RETURNS: none
                                   (0662) ;
                                   (0663) ;  SIDE EFFECTS:
                                   (0664) ;    The A and X registers may be modified by this or future implementations
                                   (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0667) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0668) ;    functions.
                                   (0669) ;          
                                   (0670) ;    Currently only the page pointer registers listed below are modified: 
                                   (0671) ;          CUR_PP
                                   (0672) ;
                                   (0673) ;  THEORY of OPERATION or PROCEDURE:
                                   (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                   (0675) ;    This initialization is a bit long, but it should work for
                                   (0676) ;    most 2 and 4 line LCDs.
                                   (0677) ;
                                   (0678)  LCD_1_Start:
                                   (0679) _LCD_1_Start:
                                   (0680)  LCD_1_Init:
                                   (0681) _LCD_1_Init:
                                   (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
0651: 62 D0 00 MOV   REG[208],0    (0683)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                   (0684) 
0654: 26 01 80 AND   [1],128       (0685)     and   [Port_0_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0657: 2E 01 7F OR    [1],127       (0686)     or    [Port_0_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
065A: 26 02 80 AND   [2],128       (0687)     and   [Port_0_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                   (0688) 
065D: 51 01    MOV   A,[1]         (0689)     mov   A,[Port_0_DriveMode_0_SHADE]
065F: 71 10    OR    F,16          (0690)     M8C_SetBank1
0661: 60 00    MOV   REG[0],A      (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0663: 51 02    MOV   A,[2]         (0692)     mov   A,[Port_0_DriveMode_1_SHADE]
0665: 60 01    MOV   REG[1],A      (0693)     mov   reg[LCD_1_PortMode1],A
0667: 70 EF    AND   F,239         (0694)     M8C_SetBank0
                                   (0695) 
0669: 50 FA    MOV   A,250         (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
066B: 90 67    CALL  0x06D4        (0697)     call  LCD_1_Delay50uTimes
066D: 50 FA    MOV   A,250         (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
066F: 90 63    CALL  0x06D4        (0699)     call  LCD_1_Delay50uTimes
                                   (0700) 
0671: 50 03    MOV   A,3           (0701)     mov   A,03h
0673: 9F 47    CALL  0x05BC        (0702)     call  LCD_1_WCNTL_Nibble
                                   (0703) 
0675: 50 52    MOV   A,82          (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0677: 90 5B    CALL  0x06D4        (0705)     call  LCD_1_Delay50uTimes
                                   (0706) 
0679: 50 03    MOV   A,3           (0707)     mov   A,03h
067B: 9F 3F    CALL  0x05BC        (0708)     call  LCD_1_WCNTL_Nibble
                                   (0709) 
067D: 90 63    CALL  0x06E2        (0710)     call  LCD_1_Delay50u
067F: 90 61    CALL  0x06E2        (0711)     call  LCD_1_Delay50u
0681: 90 5F    CALL  0x06E2        (0712)     call  LCD_1_Delay50u
                                   (0713) 
0683: 50 03    MOV   A,3           (0714)     mov   A,03h
0685: 9F 35    CALL  0x05BC        (0715)     call  LCD_1_WCNTL_Nibble
                                   (0716) 
0687: 50 5A    MOV   A,90          (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0689: 90 49    CALL  0x06D4        (0718)     call  LCD_1_Delay50uTimes
                                   (0719) 
068B: 50 02    MOV   A,2           (0720)     mov   A,02h
068D: 9F 2D    CALL  0x05BC        (0721)     call  LCD_1_WCNTL_Nibble
                                   (0722) 
068F: 50 5A    MOV   A,90          (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0691: 90 41    CALL  0x06D4        (0724)     call  LCD_1_Delay50uTimes
                                   (0725) 
0693: 50 08    MOV   A,8           (0726)     mov   A,08h
0695: 9F 11    CALL  0x05A8        (0727)     call  LCD_1_Control
0697: 50 5A    MOV   A,90          (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0699: 90 39    CALL  0x06D4        (0729)     call  LCD_1_Delay50uTimes
                                   (0730) 
069B: 50 01    MOV   A,1           (0731)     mov   A,01h
069D: 9F 09    CALL  0x05A8        (0732)     call  LCD_1_Control
069F: 50 5A    MOV   A,90          (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06A1: 90 31    CALL  0x06D4        (0734)     call  LCD_1_Delay50uTimes
                                   (0735) 
06A3: 50 06    MOV   A,6           (0736)     mov   A,06h
06A5: 9F 01    CALL  0x05A8        (0737)     call  LCD_1_Control
                                   (0738) 
06A7: 50 0E    MOV   A,14          (0739)     mov   A,0Eh
06A9: 9E FD    CALL  0x05A8        (0740)     call  LCD_1_Control
                                   (0741) 
06AB: 50 2C    MOV   A,44          (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
06AD: 9E F9    CALL  0x05A8        (0743)     call  LCD_1_Control
                                   (0744) 
06AF: 50 08    MOV   A,8           (0745)     mov   A,DISP_OFF
06B1: 9E F5    CALL  0x05A8        (0746)     call  LCD_1_Control
                                   (0747) 
06B3: 50 0C    MOV   A,12          (0748)     mov   A,DISP_ON
06B5: 9E F1    CALL  0x05A8        (0749)     call  LCD_1_Control
                                   (0750) 
06B7: 50 03    MOV   A,3           (0751)     mov   A,DISP_INC
06B9: 9E ED    CALL  0x05A8        (0752)     call  LCD_1_Control
                                   (0753) 
06BB: 50 5A    MOV   A,90          (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06BD: 90 15    CALL  0x06D4        (0755)     call  LCD_1_Delay50uTimes
                                   (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
06BF: 7F       RET                 (0757)     ret
06C0: 80 C0    JMP   0x0781
06C2: 94 D4    CALL  0x0B98
                                   (0758) .ENDSECTION
                                   (0759) 
                                   (0760) ;-----------------------------------------------------------------------------
                                   (0761) ;  FUNCTION NAME: LCD_1_Position
                                   (0762) ;
                                   (0763) ;  DESCRIPTION:
                                   (0764) ;     Position Cursor at Row and Col location
                                   (0765) ;
                                   (0766) ;-----------------------------------------------------------------------------
                                   (0767) ;
                                   (0768) ;  ARGUMENTS:
                                   (0769) ;     A => Row  0 to 3
                                   (0770) ;     X => Col  0 to 39+
                                   (0771) ;
                                   (0772) ;  RETURNS:  none
                                   (0773) ;
                                   (0774) ;  SIDE EFFECTS:
                                   (0775) ;    The A and X registers may be modified by this or future implementations
                                   (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0778) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0779) ;    functions.
                                   (0780) ;
                                   (0781) .LITERAL
                                   (0782) LCD_1_ROW_OFFSET::
                                   (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                   (0784) .ENDLITERAL
                                   (0785) 
                                   (0786) .SECTION
                                   (0787)  LCD_1_Position:
                                   (0788) _LCD_1_Position:
                                   (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
06C4: 21 03    AND   A,3           (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
06C6: 10       PUSH  X             (0791)     push  X                            ; Store COL
06C7: FF F7    INDEX 0x06C0        (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
06C9: 4F       MOV   X,SP          (0793)     mov   X,SP                         ; Get Stack pointer
06CA: 03 FF    ADD   A,[X-1]       (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
06CC: 20       POP   X             (0795)     pop   X
                                   (0796) 
                                   (0797) LCD_POS_IT:
06CD: 9E D9    CALL  0x05A8        (0798)     call  LCD_1_Control                ; Write control byte
06CF: 70 3F    AND   F,63
06D1: 71 C0    OR    F,192         (0799)     RAM_EPILOGUE RAM_USE_CLASS_2
06D3: 7F       RET                 (0800)     ret
                                   (0801) .ENDSECTION
                                   (0802) 
                                   (0803) .SECTION
                                   (0804) ;-----------------------------------------------------------------------------
                                   (0805) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                   (0806) ;
                                   (0807) ;  DESCRIPTION:
                                   (0808) ;     Delay increments of 50uSeconds
                                   (0809) ;
                                   (0810) ;-----------------------------------------------------------------------------
                                   (0811) ;
                                   (0812) ;  ARGUMENTS:
                                   (0813) ;     A contains the delay multiplier
                                   (0814) ;
                                   (0815) ;  RETURNS:
                                   (0816) ;
                                   (0817) ;  SIDE EFFECTS:
                                   (0818) ;    The A and X registers may be modified by this or future implementations
                                   (0819) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0820) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0821) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0822) ;    functions.
                                   (0823) ;
                                   (0824) ;
                                   (0825)  LCD_1_Delay50uTimes:
                                   (0826) _LCD_1_Delay50uTimes:
                                   (0827)     RAM_PROLOGUE RAM_USE_CLASS_1
06D4: 90 0C    CALL  0x06E2        (0828)     call  LCD_1_Delay50u
06D6: 78       DEC   A             (0829)     dec   A
06D7: BF FC    JNZ   0x06D4        (0830)     jnz   LCD_1_Delay50uTimes
                                   (0831)     RAM_EPILOGUE RAM_USE_CLASS_1
06D9: 7F       RET                 (0832)     ret
06DA: 08       PUSH  A
06DB: 19 3A    SBB   A,58
06DD: 7C 01 01 LCALL 0x0101
06E0: 01 01    ADD   A,1
                                   (0833) 
                                   (0834) .ENDSECTION
                                   (0835) 
                                   (0836) ;-----------------------------------------------------------------------------
                                   (0837) ;  FUNCTION NAME: LCD_1_Delay50u
                                   (0838) ;
                                   (0839) ;  DESCRIPTION:
                                   (0840) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                   (0841) ;     Slower clock frequencies the delay will be;
                                   (0842) ;           1.5
                                   (0843) ;        -------------- * 50uSec
                                   (0844) ;        clock_freq(MHz)
                                   (0845) ;
                                   (0846) ;
                                   (0847) ;-----------------------------------------------------------------------------
                                   (0848) ;
                                   (0849) ;  ARGUMENTS: none
                                   (0850) ;
                                   (0851) ;  RETURNS: none
                                   (0852) ;
                                   (0853) ;  SIDE EFFECTS:
                                   (0854) ;    The A and X registers may be modified by this or future implementations
                                   (0855) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0856) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0857) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0858) ;    functions.
                                   (0859) ;
                                   (0860) ;  THEORY of OPERATION or PROCEDURE:
                                   (0861) ;
                                   (0862) .LITERAL
                                   (0863)  LCD_1_Delay50u_Table::
                                   (0864)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                   (0865) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                   (0866) .ENDLITERAL
                                   (0867) .SECTION
                                   (0868) 
                                   (0869)   LCD_1_Delay50u:
                                   (0870)  _LCD_1_Delay50u:                      ; [11]  Call
                                   (0871)     RAM_PROLOGUE RAM_USE_CLASS_1
06E2: 08       PUSH  A             (0872)     push  A
06E3: 71 10    OR    F,16          (0873)     M8C_SetBank1                         ; [4]
06E5: 5D E0    MOV   A,REG[224]    (0874)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
06E7: 70 EF    AND   F,239         (0875)     M8C_SetBank0                         ; [4]
06E9: 21 07    AND   A,7           (0876)     and   A,07h                          ; [4] Mask off only the clock bits
06EB: 39 05    CMP   A,5           (0877)     cmp   A,05h
06ED: D0 06    JNC   0x06F4        (0878)     jnc   Delay50u_End
06EF: FF E9    INDEX 0x06DA        (0879)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                   (0880) Delay50u_Loop:                           ;
06F1: 78       DEC   A             (0881)     dec   A                              ; [4]
06F2: BF FE    JNZ   0x06F1        (0882)     jnz   Delay50u_Loop                  ; [5]
                                   (0883) Delay50u_End:
06F4: 18       POP   A             (0884)     pop   A
                                   (0885)     RAM_EPILOGUE RAM_USE_CLASS_1
06F5: 7F       RET                 (0886)     ret
                                   (0887) .ENDSECTION
                                   (0888) 
                                   (0889) 
                                   (0890) ;-----------------------------------------------------------------------------
                                   (0891) ;      If bargraph is not enabled, the following functions are not required.
                                   (0892) ;-----------------------------------------------------------------------------
                                   (0893) 
                                   (0894) IF (LCD_1_BARGRAPH_ENABLE)
                                   (0895) 
                                   (0896) IF SYSTEM_SMALL_MEMORY_MODEL
                                   (0897) .SECTION
                                   (0898) ;-----------------------------------------------------------------------------
                                   (0899) ;  FUNCTION NAME: LCD_1_DrawBG
                                   (0900) ;
                                   (0901) ;  DESCRIPTION:
                                   (0902) ;  This legacy fastcall version are provided only to support existing small
                                   (0903) ;  memory model assembly language code---it does not work in the large memory
                                   (0904) ;  model.
                                   (0905) ;
                                   (0906) ;  ** This legacy fastcall version is provided on a temporary basis to
                                   (0907) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                   (0908) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                   (0909) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                   (0910) ;  ** (with a leading underscore) and the fastcall16 interface
                                   (0911) ;
                                   (0912) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                   (0913) ;  is a legacy function that is intended to support existing Assembly
                                   (0914) ;  language programs that call this function.  This should not be used for
                                   (0915) ;  new code or with Large Memory Model programs.
                                   (0916) ;-----------------------------------------------------------------------------
                                   (0917) ;
                                   (0918) ;  LEGACY FASTCALL ARGUMENTS:
                                   (0919) ;    A    => Starting row for bargraph 0 to 3
                                   (0920) ;   [X]   => Starting Column for bargraph 0 to 39+
                                   (0921) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                   (0922) ;   [X-2] => Position of pointer in segments 5 times Length
                                   (0923) ;
                                   (0924) ;
                                   (0925) ;  RETURNS:  none
                                   (0926) ;
                                   (0927) ;  SIDE EFFECTS:
                                   (0928) ;    The A and X registers may be modified by this or future implementations
                                   (0929) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0930) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0931) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0932) ;    functions.
                                   (0933) ;
                                   (0934) ;    If LCD_1_Init is not called before this function, the
                                   (0935) ;    bargraph will not be drawn properly.
                                   (0936) ;
                                   (0937) ; Stack offset constants
                                   (0938) BG_COLX:       equ  0                   ; Stack position of Column
                                   (0939) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                   (0940) BG_LENGTHX:    equ -2                   ; Stack postion of bargraph pointer position
                                   (0941) 
                                   (0942) 
                                   (0943) LCD_1_DrawBG:
                                   (0944)     push  X
                                   (0945)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                   (0946)     call  LCD_1_Position               ; Set cursor position
                                   (0947)     pop   X                            ; Restore pointer
                                   (0948) 
                                   (0949) LCD_BG_LOOP1X:
                                   (0950)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                   (0951)     jnz   LCD_CHECK1X
                                   (0952)     mov   A,00h                        ; Load empty character
                                   (0953)     jmp   LCD_BG_DOITX                  ;
                                   (0954) 
                                   (0955) LCD_CHECK1X:
                                   (0956)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                   (0957)     jnc   LCD_CHECK2X                   ; Note yet, use full character
                                   (0958)     mov   A,[X+BG_LENGTHX]
                                   (0959)     sub   [X+BG_LENGTHX],A
                                   (0960)     jmp   LCD_BG_DOITX
                                   (0961) 
                                   (0962) LCD_CHECK2X:                            ; Put index to full character
                                   (0963)     mov   A, 06h
                                   (0964)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                   (0965) 
                                   (0966) LCD_BG_DOITX:
                                   (0967)     call  LCD_1_WriteData              ; Display BG character
                                   (0968) 
                                   (0969)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                   (0970)     jnz   LCD_BG_LOOP1X                 ; Do it all over again
                                   (0971)     ret
                                   (0972) .ENDSECTION
                                   (0973) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                   (0974) 
                                   (0975) .SECTION
                                   (0976) ;-----------------------------------------------------------------------------
                                   (0977) ;  FUNCTION NAME: LCD_1_DrawBG
                                   (0978) ;
                                   (0979) ;  DESCRIPTION:
                                   (0980) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                   (0981) ;
                                   (0982) ;
                                   (0983) ;-----------------------------------------------------------------------------
                                   (0984) ;
                                   (0985) ;  FASTCALL16 ARGUMENTS:
                                   (0986) ;   [SP-3] => Starting row for bargraph 0 to 3
                                   (0987) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                   (0988) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                   (0989) ;   [SP-6] => Position of pointer in segments 5 times Length
                                   (0990) ;
                                   (0991) ;
                                   (0992) ;  RETURNS:  none
                                   (0993) ;
                                   (0994) ;  SIDE EFFECTS:
                                   (0995) ;    The A and X registers may be modified by this or future implementations
                                   (0996) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0997) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0998) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0999) ;    functions.
                                   (1000) ;          
                                   (1001) ;    Currently only the page pointer registers listed below are modified: 
                                   (1002) ;          CUR_PP
                                   (1003) ;
                                   (1004) ;    If LCD_1_Init is not called before this function, the
                                   (1005) ;    bargraph will not be drawn properly.
                                   (1006) ;
                                   (1007) ; Stack offset constants
                                   (1008) BG_ROW:       equ -3
                                   (1009) BG_COL:       equ -4                   ; Stack position of Column
                                   (1010) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                   (1011) BG_LENGTH:    equ -6                   ; Stack postion of bargraph pointer position
                                   (1012) 
                                   (1013) 
                                   (1014) _LCD_1_DrawBG:
                                   (1015)     RAM_PROLOGUE RAM_USE_CLASS_2
06F6: 4F       MOV   X,SP          (1016)     mov   X, SP
06F7: 10       PUSH  X             (1017)     push  X
06F8: 52 FD    MOV   A,[X-3]       (1018)     mov   A,[X+BG_ROW]                 ; Row in A
06FA: 59 FC    MOV   X,[X-4]       (1019)     mov   X,[X+BG_COL]                 ; Col in X
06FC: 9F C6    CALL  0x06C4        (1020)     call  LCD_1_Position               ; Set cursor position
06FE: 20       POP   X             (1021)     pop  X
                                   (1022) 
                                   (1023) LCD_BG_LOOP1:
06FF: 3D FA 00 CMP   [X-6],0       (1024)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0702: B0 05    JNZ   0x0708        (1025)     jnz   LCD_CHECK1
0704: 50 00    MOV   A,0           (1026)     mov   A,00h                        ; Load empty character
0706: 80 11    JMP   0x0718        (1027)     jmp   LCD_BG_DOIT                  ;
                                   (1028) 
                                   (1029) LCD_CHECK1:
0708: 3D FA 06 CMP   [X-6],6       (1030)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
070B: D0 07    JNC   0x0713        (1031)     jnc   LCD_CHECK2                   ; Note yet, use full character
070D: 52 FA    MOV   A,[X-6]       (1032)     mov   A,[X+BG_LENGTH]
070F: 15 FA    SUB   [X-6],A       (1033)     sub   [X+BG_LENGTH],A
0711: 80 06    JMP   0x0718        (1034)     jmp   LCD_BG_DOIT
                                   (1035) 
                                   (1036) LCD_CHECK2:                            ; Put index to full character
0713: 50 06    MOV   A,6           (1037)     mov   A, 06h
0715: 17 FA 05 SUB   [X-6],5       (1038)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                   (1039) 
                                   (1040) LCD_BG_DOIT:
0718: 9E 7A    CALL  0x0594        (1041)     call  LCD_1_WriteData              ; Display BG character
                                   (1042) 
071A: 7B FB    DEC   [X-5]         (1043)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
071C: BF E2    JNZ   0x06FF        (1044)     jnz   LCD_BG_LOOP1                 ; Do it all over again
071E: 70 3F    AND   F,63
0720: 71 C0    OR    F,192         (1045)     RAM_EPILOGUE RAM_USE_CLASS_2
0722: 7F       RET                 (1046)     ret
                                   (1047) .ENDSECTION
                                   (1048) 
                                   (1049) IF SYSTEM_SMALL_MEMORY_MODEL
                                   (1050) .SECTION
                                   (1051) ;-----------------------------------------------------------------------------
                                   (1052) ;  FUNCTION NAME: LCD_1_DrawVBG
                                   (1053) ;
                                   (1054) ;  DESCRIPTION:
                                   (1055) ;  This legacy fastcall version are provided only to support existing small
                                   (1056) ;  memory model assembly language code---it does not work in the large memory
                                   (1057) ;  model.
                                   (1058) ;
                                   (1059) ;  ** This legacy fastcall version is provided on a temporary basis to
                                   (1060) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                   (1061) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                   (1062) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                   (1063) ;  ** (with a leading underscore) and the fastcall16 interface
                                   (1064) ;
                                   (1065) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                   (1066) ;  is a legacy function that is intended to support existing Assembly
                                   (1067) ;  language programs that call this function.  This should not be used for
                                   (1068) ;  new code or with Large Memory Model programs.
                                   (1069) ;-----------------------------------------------------------------------------
                                   (1070) ;
                                   (1071) ;  LEGACY FASTCALL ARGUMENTS:
                                   (1072) ;    A    => Starting row for bargraph 0 to 3
                                   (1073) ;   [X]   => Starting Column for bargraph 0 to 40+
                                   (1074) ;   [x-1] => Height of bargraph in chars 1 - 4
                                   (1075) ;   [X-2] => Position of pointer in segments 8 times height
                                   (1076) ;  RETURNS:
                                   (1077) ;
                                   (1078) ;  SIDE EFFECTS:
                                   (1079) ;    The A and X registers may be modified by this or future implementations
                                   (1080) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1082) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1083) ;    functions.
                                   (1084) ;    
                                   (1085) ;    If LCD_1_Init is not called before this function, the
                                   (1086) ;    bargraph will not be drawn properly.
                                   (1087) ;
                                   (1088) ; Stack offset constants
                                   (1089) VBG_COLX:            equ  0
                                   (1090) VBG_CHAR_HEIGHTX:    equ -1
                                   (1091) VBG_SEG_HEIGHTX:     equ -2
                                   (1092) 
                                   (1093) LCD_1_DrawVBG:
                                   (1094) 
                                   (1095)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                   (1096) VBG_LOOPX:
                                   (1097)     push  A
                                   (1098)     index LCD_1_ROW_OFFSET  ; Get row offset
                                   (1099)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                   (1100)     call  LCD_1_Control                ; Position Cursor
                                   (1101)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                   (1102)     jnz   VBG_NZ_SEGX
                                   (1103)     mov   A,' '                        ; Load space character
                                   (1104)     jmp   VBG_WRITE_CHARX
                                   (1105) VBG_NZ_SEGX:
                                   (1106)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                   (1107)     jnc   VBG_FULL_SEGX
                                   (1108)                                         ; Partial segment between 1 and 8
                                   (1109)     mov   A,[X+VBG_SEG_HEIGHTX]
                                   (1110)     dec   A
                                   (1111)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                   (1112)     jmp   VBG_WRITE_CHARX
                                   (1113) 
                                   (1114) VBG_FULL_SEGX:                          ; Bargaph
                                   (1115)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                   (1116)     mov   A,07h                        ; Load full segment
                                   (1117) 
                                   (1118) VBG_WRITE_CHARX:                        ; Write character to display
                                   (1119)     call  LCD_1_WriteData              ; Write value
                                   (1120)     pop   A
                                   (1121)     dec   A
                                   (1122)     dec   [X+VBG_CHAR_HEIGHTX]
                                   (1123)     jnz   VBG_LOOPX
                                   (1124)     ret
                                   (1125) .ENDSECTION
                                   (1126) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                   (1127) 
                                   (1128) .SECTION
                                   (1129) ;-----------------------------------------------------------------------------
                                   (1130) ;  FUNCTION NAME: LCD_1_DrawVBG
                                   (1131) ;
                                   (1132) ;  DESCRIPTION:
                                   (1133) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                   (1134) ;
                                   (1135) ;
                                   (1136) ;-----------------------------------------------------------------------------
                                   (1137) ;
                                   (1138) ;  FASTCALL16 ARGUMENTS:
                                   (1139) ;
                                   (1140) ;   [SP-3] => Starting row for bargraph 0 to 3
                                   (1141) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                   (1142) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                   (1143) ;   [SP-6] => Position of pointer in segments 8 times height
                                   (1144) ;  RETURNS:
                                   (1145) ;
                                   (1146) ;  SIDE EFFECTS:
                                   (1147) ;    The A and X registers may be modified by this or future implementations
                                   (1148) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1150) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1151) ;    functions.
                                   (1152) ;          
                                   (1153) ;    Currently only the page pointer registers listed below are modified: 
                                   (1154) ;          CUR_PP
                                   (1155) ;
                                   (1156) ;    If LCD_1_Init is not called before this function, the
                                   (1157) ;    bargraph will not be drawn properly.
                                   (1158) ;
                                   (1159) ; Stack offset constants
                                   (1160) VBG_ROW:        equ -3
                                   (1161) VBG_COL:            equ -4
                                   (1162) VBG_CHAR_HEIGHT:    equ -5
                                   (1163) VBG_SEG_HEIGHT:     equ -6
                                   (1164) 
                                   (1165) _LCD_1_DrawVBG:
                                   (1166)     RAM_PROLOGUE RAM_USE_CLASS_2
0723: 4F       MOV   X,SP          (1167)     mov   X, SP
0724: 52 FD    MOV   A,[X-3]       (1168)     mov   A, [X+VBG_ROW]
0726: 21 03    AND   A,3           (1169)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                   (1170) VBG_LOOP:
0728: 08       PUSH  A             (1171)     push  A
0729: FF 95    INDEX 0x06C0        (1172)     index LCD_1_ROW_OFFSET  ; Get row offset
072B: 03 FC    ADD   A,[X-4]       (1173)     add   A,[X+VBG_COL]                ; Add column offset to position
072D: 9E 79    CALL  0x05A8        (1174)     call  LCD_1_Control                ; Position Cursor
072F: 3D FA 00 CMP   [X-6],0       (1175)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0732: B0 05    JNZ   0x0738        (1176)     jnz   VBG_NZ_SEG
0734: 50 20    MOV   A,32          (1177)     mov   A,' '                        ; Load space character
0736: 80 13    JMP   0x074A        (1178)     jmp   VBG_WRITE_CHAR
                                   (1179) VBG_NZ_SEG:
0738: 3D FA 09 CMP   [X-6],9       (1180)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
073B: D0 09    JNC   0x0745        (1181)     jnc   VBG_FULL_SEG
                                   (1182)                                        ; Partial segment between 1 and 8
073D: 52 FA    MOV   A,[X-6]       (1183)     mov   A,[X+VBG_SEG_HEIGHT]
073F: 78       DEC   A             (1184)     dec   A
0740: 56 FA 00 MOV   [X-6],0       (1185)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0743: 80 06    JMP   0x074A        (1186)     jmp   VBG_WRITE_CHAR
                                   (1187) 
                                   (1188) VBG_FULL_SEG:                          ; Bargaph
0745: 17 FA 08 SUB   [X-6],8       (1189)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0748: 50 07    MOV   A,7           (1190)     mov   A,07h                        ; Load full segment
                                   (1191) 
                                   (1192) VBG_WRITE_CHAR:                        ; Write character to display
074A: 9E 48    CALL  0x0594        (1193)     call  LCD_1_WriteData              ; Write value
074C: 18       POP   A             (1194)     pop   A
074D: 78       DEC   A             (1195)     dec   A
074E: 7B FB    DEC   [X-5]         (1196)     dec   [X+VBG_CHAR_HEIGHT]
0750: BF D7    JNZ   0x0728        (1197)     jnz   VBG_LOOP
0752: 70 3F    AND   F,63
0754: 71 C0    OR    F,192         (1198)     RAM_EPILOGUE RAM_USE_CLASS_2
0756: 7F       RET                 (1199)     ret
                                   (1200) .ENDSECTION
                                   (1201) 
                                   (1202) .SECTION
                                   (1203) ;-----------------------------------------------------------------------------
                                   (1204) ;  FUNCTION NAME: LCD_1_InitVBG
                                   (1205) ;
                                   (1206) ;  DESCRIPTION:
                                   (1207) ;     Initialize the vertical bargraph characters.
                                   (1208) ;
                                   (1209) ;-----------------------------------------------------------------------------
                                   (1210) ;
                                   (1211) ;  ARGUMENTS:  none
                                   (1212) ;
                                   (1213) ;  RETURNS:  none
                                   (1214) ;
                                   (1215) ;  SIDE EFFECTS:
                                   (1216) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                   (1217) ;    Only one type of bargraph (horizontal or vertical) may be used
                                   (1218) ;    at a time since they each require their own set of characters.
                                   (1219) ;
                                   (1220) ;  SIDE EFFECTS:
                                   (1221) ;    The A and X registers may be modified by this or future implementations
                                   (1222) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1224) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1225) ;    functions.
                                   (1226) ;          
                                   (1227) ;    Currently only the page pointer registers listed below are modified: 
                                   (1228) ;          CUR_PP
                                   (1229) ;
                                   (1230) ; Stack offset constants
                                   (1231) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                   (1232) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                   (1233) 
                                   (1234)  LCD_1_InitVBG:
                                   (1235) _LCD_1_InitVBG:
                                   (1236)     RAM_PROLOGUE RAM_USE_CLASS_2
0757: 4F       MOV   X,SP          (1237)     mov   X,SP                         ; Get location of stack
0758: 08       PUSH  A             (1238)     push  A                            ; Create 2 locations
0759: 08       PUSH  A             (1239)     push  A
                                   (1240) 
075A: 50 40    MOV   A,64          (1241)     mov   A,CG_RAM_OFFSET              ; Setup pointer
075C: 9E 4A    CALL  0x05A8        (1242)     call  LCD_1_Control                ; Position the CG pointer
075E: 56 00 01 MOV   [X+0],1       (1243)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                   (1244) 
                                   (1245)  VBG_Loop1:                            ; loop once for each 8 characters
0761: 56 01 08 MOV   [X+1],8       (1246)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                   (1247)  VBG_Loop2:                            ; Loop once for each line in character (8 times)
0764: 52 00    MOV   A,[X+0]       (1248)     mov   A,[X+VBGDATA_CTR]
0766: 3B 01    CMP   A,[X+1]       (1249)     cmp   A,[X+VBG_BYTES]
0768: D0 05    JNC   0x076E        (1250)     jnc   VBG_SOLID
076A: 50 00    MOV   A,0           (1251)     mov   A,00h                        ; Empty line
076C: 80 03    JMP   0x0770        (1252)     jmp   VBG_Load                     ; Jump to load the bargraph
                                   (1253) VBG_SOLID:
076E: 50 FF    MOV   A,255         (1254)     mov   A,FFh                        ; Load solid line
                                   (1255) VBG_Load:
0770: 9E 22    CALL  0x0594        (1256)     call  LCD_1_WriteData              ; character data
0772: 7B 01    DEC   [X+1]         (1257)     dec   [X+VBG_BYTES]                ; Dec byte counter
0774: BF EF    JNZ   0x0764        (1258)     jnz   VBG_Loop2                    ; End Loop 2
0776: 77 00    INC   [X+0]         (1259)     inc   [X+VBGDATA_CTR]
0778: 3D 00 09 CMP   [X+0],9       (1260)     cmp   [X+VBGDATA_CTR],09h
077B: BF E5    JNZ   0x0761        (1261)     jnz   VBG_Loop1                    ; End Loop1
                                   (1262) 
077D: 18       POP   A             (1263)     pop  A
077E: 18       POP   A             (1264)     pop  A
077F: 50 0C    MOV   A,12          (1265)     mov  A,DISP_ON                    ; Turn on display, don't really
0781: 9E 25    CALL  0x05A8        (1266)     call LCD_1_Control                 ; need this.
0783: 70 3F    AND   F,63
0785: 71 C0    OR    F,192         (1267)     RAM_EPILOGUE RAM_USE_CLASS_2
0787: 7F       RET                 (1268)     ret
0788: 00       SWI   
0789: 10       PUSH  X
078A: 18       POP   A
078B: 1C 1E    SBB   [30],A
078D: 1F 1F 00 SBB   [X+31],0
0790: 10       PUSH  X
0791: 08       PUSH  A
0792: 04 02    ADD   [2],A
0794: 01 00    ADD   A,0
                                   (1269) .ENDSECTION
                                   (1270) 
                                   (1271) ;-----------------------------------------------------------------------------
                                   (1272) ;  FUNCTION NAME: LCD_1_InitBG
                                   (1273) ;
                                   (1274) ;  DESCRIPTION:
                                   (1275) ;     Initialize horizontal bargraph characters
                                   (1276) ;
                                   (1277) ;-----------------------------------------------------------------------------
                                   (1278) ;
                                   (1279) ;  ARGUMENTS:
                                   (1280) ;     A = type  0 = full                   |||||||||........
                                   (1281) ;               1 = single vertical line   ..........|......
                                   (1282) ;
                                   (1283) ;  RETURNS:
                                   (1284) ;
                                   (1285) ;  SIDE EFFECTS:
                                   (1286) ;    The A and X registers may be modified by this or future implementations
                                   (1287) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1288) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1289) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1290) ;    functions.
                                   (1291) ;          
                                   (1292) ;    Currently only the page pointer registers listed below are modified: 
                                   (1293) ;          CUR_PP
                                   (1294) ;
                                   (1295) ;    Only one type of bargraph (horizontal or vertical) may be used
                                   (1296) ;    at a time since they each require their own set of characters.
                                   (1297) ;
                                   (1298) ;  THEORY of OPERATION or PROCEDURE:
                                   (1299) ;    This function writes to the LCD character RAM to generate 8 custom
                                   (1300) ;    characters used to generated one of two horizontal bargraphs.
                                   (1301) ;
                                   (1302) .LITERAL
                                   (1303)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                   (1304)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                   (1305)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                   (1306)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                   (1307) .ENDLITERAL
                                   (1308) 
                                   (1309) .SECTION
                                   (1310) ; Stack offset constants
                                   (1311) BGDATA_PTR:   equ    00h               ; Stack offsets
                                   (1312) BGCHARS:      equ    01h
                                   (1313) BGTYPE:       equ    02h
                                   (1314) 
                                   (1315)  LCD_1_InitBG:
                                   (1316) _LCD_1_InitBG:
                                   (1317)     RAM_PROLOGUE RAM_USE_CLASS_2
0796: 4F       MOV   X,SP          (1318)     mov   X,SP                         ; Get location of stack
0797: 38 03    ADD   SP,3          (1319)     add   SP,3
0799: 54 02    MOV   [X+2],A       (1320)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                   (1321) 
079B: 50 40    MOV   A,64          (1322)     mov   A,CG_RAM_OFFSET              ; Setup pointer
079D: 9E 09    CALL  0x05A8        (1323)     call  LCD_1_Control                ; Position the CG pointer
079F: 56 00 00 MOV   [X+0],0       (1324)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                   (1325) 
                                   (1326)  BG_Loop1:
07A2: 56 01 08 MOV   [X+1],8       (1327)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                   (1328)  BG_Loop2:
07A5: 52 00    MOV   A,[X+0]       (1329)     mov   A,[X+BGDATA_PTR]
07A7: 3D 02 00 CMP   [X+2],0       (1330)     cmp   [X+BGTYPE],00h               ; Check which bargraph
07AA: B0 05    JNZ   0x07B0        (1331)     jnz   BG_OTHER
07AC: FF DA    INDEX 0x0788        (1332)     index LCD_1_BG_TYPE1
07AE: 80 03    JMP   0x07B2        (1333)     jmp   BG_Load
                                   (1334)  BG_OTHER:
07B0: FF DD    INDEX 0x078F        (1335)     index LCD_1_BG_TYPE2
                                   (1336)  BG_Load:
07B2: 9D E0    CALL  0x0594        (1337)     call  LCD_1_WriteData
07B4: 7B 01    DEC   [X+1]         (1338)     dec   [X+BGCHARS]                  ; Character builder counter
07B6: BF EE    JNZ   0x07A5        (1339)     jnz   BG_Loop2
07B8: 77 00    INC   [X+0]         (1340)     inc   [X+BGDATA_PTR]               ; Advance to next character
07BA: 3D 00 07 CMP   [X+0],7       (1341)     cmp   [X+BGDATA_PTR],07h
07BD: BF E4    JNZ   0x07A2        (1342)     jnz   BG_Loop1
                                   (1343) 
07BF: 38 FD    ADD   SP,253        (1344)     add   SP,-3
07C1: 50 0C    MOV   A,12          (1345)     mov   A,DISP_ON
07C3: 9D E3    CALL  0x05A8        (1346)     call  LCD_1_Control
07C5: 70 3F    AND   F,63
07C7: 71 C0    OR    F,192         (1347)     RAM_EPILOGUE RAM_USE_CLASS_2
07C9: 7F       RET                 (1348)     ret

FILE: lib\i2chw_1rsrcinits.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME: I2CHW_1.asm
                                   (0004) ;;   Version: 1.5, Updated on 2006/06/06 at 13:39:08
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                   (0008) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0009) ;;
                                   (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0012) ;;        This means it is the caller's responsibility to preserve any values
                                   (0013) ;;        in the X and A registers that are still needed after the API functions
                                   (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0018) ;;-----------------------------------------------------------------------------
                                   (0019) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                   (0020) ;;*****************************************************************************
                                   (0021) ;;*****************************************************************************
                                   (0022) 
                                   (0023) include "m8c.inc"
                                   (0024) include "memory.inc"
                                   (0025) include "I2CHW_1Common.inc"
                                   (0026) 
                                   (0027) ;-----------------------------------------------
                                   (0028) ; include instance specific register definitions
                                   (0029) ;-----------------------------------------------
                                   (0030) 
                                   (0031) ;-----------------------------------------------
                                   (0032) ;  Global Symbols
                                   (0033) ;-----------------------------------------------
                                   (0034) ;-------------------------------------------------------------------
                                   (0035) ;  Declare the functions global for both assembler and C compiler.
                                   (0036) ;
                                   (0037) ;  Note that there are two names for each API. First name is
                                   (0038) ;  assembler reference. Name with underscore is name refence for
                                   (0039) ;  C compiler.  Calling function in C source code does not require
                                   (0040) ;  the underscore.
                                   (0041) ;-------------------------------------------------------------------
                                   (0042) 
                                   (0043) export    I2CHW_1_EnableInt
                                   (0044) export   _I2CHW_1_EnableInt
                                   (0045) export    I2CHW_1_EnableSlave
                                   (0046) export   _I2CHW_1_EnableSlave
                                   (0047) export    I2CHW_1_EnableMstr
                                   (0048) export   _I2CHW_1_EnableMstr
                                   (0049) export    I2CHW_1_Start
                                   (0050) export   _I2CHW_1_Start
                                   (0051) export    I2CHW_1_DisableInt
                                   (0052) export   _I2CHW_1_DisableInt
                                   (0053) export    I2CHW_1_DisableSlave
                                   (0054) export   _I2CHW_1_DisableSlave
                                   (0055) export    I2CHW_1_DisableMstr
                                   (0056) export   _I2CHW_1_DisableMstr
                                   (0057) export    I2CHW_1_Stop
                                   (0058) export   _I2CHW_1_Stop
                                   (0059) 
                                   (0060) 
                                   (0061) AREA UserModules (ROM, REL)
                                   (0062) 
                                   (0063) .SECTION
                                   (0064) 
                                   (0065) ;-----------------------------------------------------------------------------
                                   (0066) ;  FUNCTION NAME: I2CHW_1_Start
                                   (0067) ;
                                   (0068) ;  DESCRIPTION:
                                   (0069) ;   Initialize the I2CHW_1 I2C bus interface.
                                   (0070) ;
                                   (0071) ;-----------------------------------------------------------------------------
                                   (0072) ;
                                   (0073) ;  ARGUMENTS:
                                   (0074) ;
                                   (0075) ;  RETURNS: none
                                   (0076) ;
                                   (0077) ;  SIDE EFFECTS:
                                   (0078) ;    The A and X registers may be modified by this or future implementations
                                   (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0082) ;    functions.
                                   (0083) ;          
                                   (0084)  I2CHW_1_Start:
                                   (0085) _I2CHW_1_Start:
                                   (0086)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0087)     RAM_EPILOGUE RAM_USE_CLASS_1
07CA: 7F       RET                 (0088)     ret
                                   (0089) .ENDSECTION
                                   (0090) 
                                   (0091) .SECTION
                                   (0092) ;-----------------------------------------------------------------------------
                                   (0093) ;  FUNCTION NAME: I2CHW_1_EnableInt
                                   (0094) ;
                                   (0095) ;  DESCRIPTION:
                                   (0096) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                   (0097) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0098) ;
                                   (0099) ;-----------------------------------------------------------------------------
                                   (0100) ;
                                   (0101) ;  ARGUMENTS: none
                                   (0102) ;
                                   (0103) ;  RETURNS: none
                                   (0104) ;
                                   (0105) ;  SIDE EFFECTS:
                                   (0106) ;    The A and X registers may be modified by this or future implementations
                                   (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0110) ;    functions.
                                   (0111) ;          
                                   (0112)  I2CHW_1_EnableInt:
                                   (0113) _I2CHW_1_EnableInt:
                                   (0114)     RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0115)     ;first clear any pending interrupts
07CB: 08       PUSH  A             (0116)     push A
07CC: 5D DD    MOV   A,REG[221]    (0117)     mov A, reg[INT_CLR3]
07CE: 21 FE    AND   A,254         (0118)     and A, ~I2CHW_1_INT_MASK
07D0: 60 DD    MOV   REG[221],A    (0119)     mov reg[INT_CLR3], A
07D2: 43 DE 01 OR    REG[222],1    (0120)     M8C_EnableIntMask I2CHW_1_INT_REG, I2CHW_1_INT_MASK
07D5: 18       POP   A             (0121)     pop A
                                   (0122)     RAM_EPILOGUE RAM_USE_CLASS_1
07D6: 7F       RET                 (0123)     ret
                                   (0124) 
                                   (0125) .ENDSECTION
                                   (0126) 
                                   (0127) .SECTION
                                   (0128) ;-----------------------------------------------------------------------------
                                   (0129) ;  FUNCTION NAME: I2CHW_1_EnableMstr
                                   (0130) ;
                                   (0131) ;  DESCRIPTION:
                                   (0132) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                   (0133) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0134) ;
                                   (0135) ;-----------------------------------------------------------------------------
                                   (0136) ;
                                   (0137) ;  ARGUMENTS: none
                                   (0138) ;
                                   (0139) ;  RETURNS: none
                                   (0140) ;
                                   (0141) ;  SIDE EFFECTS:
                                   (0142) ;    The A and X registers may be modified by this or future implementations
                                   (0143) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0144) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0145) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0146) ;    functions.
                                   (0147) ;          
                                   (0148)  I2CHW_1_EnableMstr:
                                   (0149) _I2CHW_1_EnableMstr:
                                   (0150)     RAM_PROLOGUE RAM_USE_CLASS_1
07D7: 43 D6 02 OR    REG[214],2    (0151)     BitSetI2CHW_1_CFG I2C_M_EN                                       ;Enable SDA interupt
                                   (0152)     RAM_EPILOGUE RAM_USE_CLASS_1
07DA: 7F       RET                 (0153)     ret
                                   (0154) 
                                   (0155) .ENDSECTION
                                   (0156) 
                                   (0157) .SECTION
                                   (0158) ;-----------------------------------------------------------------------------
                                   (0159) ;  FUNCTION NAME: I2CHW_1_EnableSlave
                                   (0160) ;
                                   (0161) ;  DESCRIPTION:
                                   (0162) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                   (0163) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0164) ;
                                   (0165) ;-----------------------------------------------------------------------------
                                   (0166) ;
                                   (0167) ;  ARGUMENTS: none
                                   (0168) ;
                                   (0169) ;  RETURNS: none
                                   (0170) ;
                                   (0171) ;  SIDE EFFECTS:
                                   (0172) ;    The A and X registers may be modified by this or future implementations
                                   (0173) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0174) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0176) ;    functions.
                                   (0177) ;          
                                   (0178)  I2CHW_1_EnableSlave:
                                   (0179) _I2CHW_1_EnableSlave:
                                   (0180)     RAM_PROLOGUE RAM_USE_CLASS_1
07DB: 43 D6 01 OR    REG[214],1    (0181)     BitSetI2CHW_1_CFG I2C_S_EN                                       ;Enable SDA interupt
                                   (0182)     RAM_EPILOGUE RAM_USE_CLASS_1
07DE: 7F       RET                 (0183)     ret
                                   (0184) 
                                   (0185) .ENDSECTION
                                   (0186) 
                                   (0187) .SECTION
                                   (0188) ;-----------------------------------------------------------------------------
                                   (0189) ;  FUNCTION NAME: I2CHW_1_DisableInt
                                   (0190) ;  FUNCTION NAME: I2CHW_1_Stop
                                   (0191) ;
                                   (0192) ;  DESCRIPTION:
                                   (0193) ;     Disables I2CHW_1 slave by disabling SDA interrupt
                                   (0194) ;
                                   (0195) ;-----------------------------------------------------------------------------
                                   (0196) ;
                                   (0197) ;  ARGUMENTS: none
                                   (0198) ;
                                   (0199) ;  RETURNS: none
                                   (0200) ;
                                   (0201) ;  SIDE EFFECTS:
                                   (0202) ;    The A and X registers may be modified by this or future implementations
                                   (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0206) ;    functions.
                                   (0207) ;          
                                   (0208)  I2CHW_1_DisableInt:
                                   (0209) _I2CHW_1_DisableInt:
                                   (0210)  I2CHW_1_Stop:
                                   (0211) _I2CHW_1_Stop:
                                   (0212)     RAM_PROLOGUE RAM_USE_CLASS_1
07DF: 41 DE FE AND   REG[222],254  (0213)     M8C_DisableIntMask I2CHW_1_INT_REG, I2CHW_1_INT_MASK
                                   (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
07E2: 7F       RET                 (0215)     ret
                                   (0216) 
                                   (0217) .ENDSECTION
                                   (0218) 
                                   (0219) .SECTION
                                   (0220) ;-----------------------------------------------------------------------------
                                   (0221) ;  FUNCTION NAME: I2CHW_1_DisableSlave
                                   (0222) ;
                                   (0223) ;  DESCRIPTION:
                                   (0224) ;     Disables I2CHW_1 slave by disabling SDA interrupt
                                   (0225) ;
                                   (0226) ;-----------------------------------------------------------------------------
                                   (0227) ;
                                   (0228) ;  ARGUMENTS: none
                                   (0229) ;
                                   (0230) ;  RETURNS: none
                                   (0231) ;
                                   (0232) ;  SIDE EFFECTS:
                                   (0233) ;    The A and X registers may be modified by this or future implementations
                                   (0234) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0235) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0236) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0237) ;    functions.
                                   (0238) ;          
                                   (0239)  I2CHW_1_DisableSlave:
                                   (0240) _I2CHW_1_DisableSlave:
                                   (0241)     RAM_PROLOGUE RAM_USE_CLASS_1
07E3: 41 D6 FE AND   REG[214],254  (0242)     BitClrI2CHW_1_CFG I2C_S_EN                                       ;Disable the Slave
                                   (0243)     RAM_EPILOGUE RAM_USE_CLASS_1
07E6: 7F       RET                 (0244)     ret
                                   (0245) 
                                   (0246) .ENDSECTION
                                   (0247) 
                                   (0248) .SECTION
                                   (0249) ;-----------------------------------------------------------------------------
                                   (0250) ;  FUNCTION NAME: I2CHW_1_DisableMstr
                                   (0251) ;
                                   (0252) ;  DESCRIPTION:
                                   (0253) ;     Disables I2CHW_1 slave by disabling SDA interrupt
                                   (0254) ;
                                   (0255) ;-----------------------------------------------------------------------------
                                   (0256) ;
                                   (0257) ;  ARGUMENTS: none
                                   (0258) ;
                                   (0259) ;  RETURNS: none
                                   (0260) ;
                                   (0261) ;  SIDE EFFECTS:
                                   (0262) ;    The A and X registers may be modified by this or future implementations
                                   (0263) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0264) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0265) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0266) ;    functions.
                                   (0267) ;          
                                   (0268)  I2CHW_1_DisableMstr:
                                   (0269) _I2CHW_1_DisableMstr:
                                   (0270)     RAM_PROLOGUE RAM_USE_CLASS_1
07E7: 41 D6 FD AND   REG[214],253  (0271)     BitClrI2CHW_1_CFG I2C_M_EN                                       ;Disable the Master
                                   (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
07EA: 7F       RET                 (0273)    ret

FILE: lib\i2chw_1int.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME: I2CHW_1INT.asm
                                   (0004) ;;   Version: 1.5, Updated on 2006/06/06 at 13:39:08
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: I2CHW (Slave) Interrupt Service Routine for the 
                                   (0008) ;;               22/24/27/29xxx PSoC family of devices.
                                   (0009) ;;  This is the interrupt seveice routine for the Slave I2C function.
                                   (0010) ;;-----------------------------------------------------------------------------
                                   (0011) ;;  Copyright (c) Cypress MicroSystems 2000-2006. All Rights Reserved.
                                   (0012) ;;*****************************************************************************
                                   (0013) ;;*****************************************************************************
                                   (0014) include "m8c.inc"
                                   (0015) include "memory.inc"
                                   (0016) include "I2CHW_1Slave.inc"
                                   (0017) include "I2CHW_1Common.inc"
                                   (0018) 
                                   (0019) 
                                   (0020) ;-----------------------------------------------
                                   (0021) ;  Global Symbols
                                   (0022) ;-----------------------------------------------
                                   (0023) export     I2CHW_1_RsrcStatus                                        ; upper (7x) bits write status, lower 3 bits read status
                                   (0024) export    _I2CHW_1_RsrcStatus                                        ; upper (7x) bits write status, lower 3 bits read status
                                   (0025) export     I2CHW_1_Read_Count
                                   (0026) export    _I2CHW_1_Read_Count
                                   (0027) export     I2CHW_1_Write_Count
                                   (0028) export    _I2CHW_1_Write_Count
                                   (0029) export    pI2CHW_1_Read_BufLO
                                   (0030) export   _pI2CHW_1_Read_BufLO
                                   (0031) export    pI2CHW_1_Write_BufLO
                                   (0032) export   _pI2CHW_1_Write_BufLO
                                   (0033) export   _I2CHW_1_bStatus
                                   (0034) export    I2CHW_1_bStatus
                                   (0035) 
                                   (0036) ;-----------------------------------------------
                                   (0037) ; WARNING: The variables below are deprecated
                                   (0038) ; and have been replaced with Read_BufLO
                                   (0039) ; and Write_BufLO
                                   (0040) ;-----------------------------------------------
                                   (0041) export    pI2CHW_1_Read_Buf
                                   (0042) export   _pI2CHW_1_Read_Buf
                                   (0043) export    pI2CHW_1_Write_Buf
                                   (0044) export   _pI2CHW_1_Write_Buf
                                   (0045) ;-----------------------------------------------
                                   (0046) ; END WARNING
                                   (0047) ;-----------------------------------------------
                                   (0048) 
                                   (0049) area InterruptRAM(RAM, REL, CON)	 
                                   (0050) 
                                   (0051) ;-----------------------------------------------
                                   (0052) ; Variable Allocation
                                   (0053) ;-----------------------------------------------
                                   (0054) 
                                   (0055)  _I2CHW_1_bStatus:
                                   (0056)   I2CHW_1_bStatus:                           blk 1
                                   (0057)   I2CHW_1_RsrcStatus:
                                   (0058)  _I2CHW_1_RsrcStatus:                        blk     1
                                   (0059)   I2CHW_1_Write_Count:
                                   (0060)  _I2CHW_1_Write_Count:                       blk    1
                                   (0061) IF SYSTEM_LARGE_MEMORY_MODEL
                                   (0062) export    pI2CHW_1_Write_BufHI
                                   (0063) export   _pI2CHW_1_Write_BufHI
                                   (0064) 
                                   (0065)  pI2CHW_1_Write_BufHI:
                                   (0066) _pI2CHW_1_Write_BufHI:                       blk     1
                                   (0067) ENDIF
                                   (0068) ;-----------------------------------------------
                                   (0069) ; WARNING: The variable below is deprecated
                                   (0070) ; and has been replaced Write_BufLO
                                   (0071) ;-----------------------------------------------
                                   (0072)  pI2CHW_1_Write_Buf:
                                   (0073) _pI2CHW_1_Write_Buf:
                                   (0074) ;-----------------------------------------------
                                   (0075) ; END WARNING
                                   (0076) ;-----------------------------------------------
                                   (0077)  pI2CHW_1_Write_BufLO:
                                   (0078) _pI2CHW_1_Write_BufLO:                       blk      1
                                   (0079) 
                                   (0080) IF I2CHW_1_READ_FLASH
                                   (0081) export    pI2CHW_1_Read_BufHI
                                   (0082) export   _pI2CHW_1_Read_BufHI
                                   (0083) 
                                   (0084)  pI2CHW_1_Read_BufHI:
                                   (0085) _pI2CHW_1_Read_BufHI:                        blk     1
                                   (0086) ELSE
                                   (0087) IF SYSTEM_LARGE_MEMORY_MODEL
                                   (0088) export    pI2CHW_1_Read_BufHI
                                   (0089) export   _pI2CHW_1_Read_BufHI
                                   (0090) 
                                   (0091)  pI2CHW_1_Read_BufHI:
                                   (0092) _pI2CHW_1_Read_BufHI:                        blk     1
                                   (0093) ENDIF
                                   (0094) ENDIF
                                   (0095) 
                                   (0096) ;-----------------------------------------------
                                   (0097) ; WARNING: The variable below is deprecated
                                   (0098) ; and has been replaced Read_BufLO
                                   (0099) ;-----------------------------------------------
                                   (0100)  pI2CHW_1_Read_Buf:
                                   (0101) _pI2CHW_1_Read_Buf:
                                   (0102) ;-----------------------------------------------
                                   (0103) ; END WARNING
                                   (0104) ;-----------------------------------------------
                                   (0105)  pI2CHW_1_Read_BufLO:
                                   (0106) _pI2CHW_1_Read_BufLO:                        blk       1
                                   (0107) 
                                   (0108) IF I2CHW_1_READ_FLASH
                                   (0109) export    I2CHW_1_Read_CountHI
                                   (0110) export   _I2CHW_1_Read_CountHI
                                   (0111) 
                                   (0112)  I2CHW_1_Read_CountHI:
                                   (0113) _I2CHW_1_Read_CountHI:                       blk    1
                                   (0114) ENDIF
                                   (0115) 
                                   (0116)  I2CHW_1_Read_Count:
                                   (0117) _I2CHW_1_Read_Count:                         blk      1
                                   (0118) 
                                   (0119) 
                                   (0120) IF I2CHW_1_POLLED_PROCESS
                                   (0121) 
                                   (0122) I2CHW_1_Poll_Status:                             blk      1  ;internal variable used for polled operation
                                   (0123) ;bit 0 - Write transaction started begin looking for the STOP state to terminate the transaction
                                   (0124) I2C_WRITE_STARTED:       equ     0x01
                                   (0125) ;bit 1 - Undefined
                                   (0126) ;bit 2 - Undefined
                                   (0127) ;bit 3 - Undefined
                                   (0128) ;bit 4 - Undefined
                                   (0129) ;bit 5 - Undefined
                                   (0130) ;bit 6 - Undefined
                                   (0131) ;bit 7 - Undefined
                                   (0132) 
                                   (0133) ENDIF
                                   (0134) 
                                   (0135) 
                                   (0136) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                   (0137) ;---------------------------------------------------
                                   (0138) ; Insert your custom declarations below this banner
                                   (0139) ;---------------------------------------------------
                                   (0140) 
                                   (0141) ;------------------------
                                   (0142) ; Includes
                                   (0143) ;------------------------
                                   (0144) 
                                   (0145) 	
                                   (0146) ;------------------------
                                   (0147) ;  Constant Definitions
                                   (0148) ;------------------------
                                   (0149) 
                                   (0150) 
                                   (0151) ;------------------------
                                   (0152) ; Variable Allocation
                                   (0153) ;------------------------
                                   (0154) 
                                   (0155) 
                                   (0156) ;---------------------------------------------------
                                   (0157) ; Insert your custom declarations above this banner
                                   (0158) ;---------------------------------------------------
                                   (0159) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0160) 
                                   (0161) 
                                   (0162) 
                                   (0163) 
                                   (0164) AREA UserModules (ROM, REL)
                                   (0165) 
                                   (0166) export _I2CHW_1_ISR
                                   (0167) export _I2CHW_1_Poll
                                   (0168) export  I2CHW_1_Poll
                                   (0169) 
                                   (0170) ;;****************************************************
                                   (0171) ;; I2C_ISR  main entry point from vector 60h
                                   (0172) ;;
                                   (0173) ;;****************************************************
                                   (0174) 
                                   (0175) IF I2CHW_1_POLLED_PROCESS
                                   (0176) 
                                   (0177) _I2CHW_1_ISR:
                                   (0178)     reti ; stub out the ISR if this is going to be a polled function
                                   (0179) 
                                   (0180)  
                                   (0181)  
                                   (0182)  I2CHW_1_Poll:
                                   (0183) _I2CHW_1_Poll:
                                   (0184) ;    cases are:
                                   (0185) ;    1. Stop state after a Master write to this slave
                                   (0186) ;    2. possible Stop condition COMBINED with a new transaction is not a problem since the Stop will only flag that the 
                                   (0187) ;       previous write has been completed. (so just call the I2CA_Process routine for this case and let the process routine take
                                   (0188) ;       care of it.
                                   (0189)     ;case 1
                                   (0190)     RAM_SETPAGE_CUR	( >I2CHW_1_Poll_Status )
                                   (0191) 
                                   (0192)     tst [I2CHW_1_Poll_Status], I2C_WRITE_STARTED
                                   (0193)     jz  NOT_I2C_Write
                                   (0194)     tst reg[ I2CHW_1_SCR], I2C_STOP_ST
                                   (0195)     jz  NOT_I2C_Write
                                   (0196)     ;make sure the pushes and pops 'line up' or die horribly
                                   (0197)     push A
                                   (0198)     push X
                                   (0199) IF SYSTEM_LARGE_MEMORY_MODEL
                                   (0200)     REG_PRESERVE IDX_PP
                                   (0201) ENDIF
                                   (0202)     jmp STOPTRAP
                                   (0203)     
                                   (0204) NOT_I2C_Write:    
                                   (0205)     tst reg[ I2CHW_1_SCR], I2C_BYTE_COMPL
                                   (0206)     jnz  I2CHW_1_Process   ;if no other critical eventa are in evidence, process an I2C byte if it's done
                                   (0207)     ret
                                   (0208) 
                                   (0209)  I2CHW_1_Process:
                                   (0210) _I2CHW_1_Process:  ;don't need to export user will call I2CA_POLL which will call the I2CA_Process routine if necessary
                                   (0211) 
                                   (0212) 
                                   (0213) 
                                   (0214) ELSE
                                   (0215) ;; STUB for polling function when it's un-defined
                                   (0216)  I2CHW_1_Poll:
                                   (0217) _I2CHW_1_Poll:
07EB: 7F       RET                 (0218)     ret
                                   (0219) 
                                   (0220) 
                                   (0221) ;;*****************************************************************************************
                                   (0222) ;;                 I2C_MASTER  main entry point from vector 60h
                                   (0223) ;;*****************************************************************************************
                                   (0224) 
                                   (0225) _I2CHW_1_ISR:
                                   (0226) ENDIF
07EC: 08       PUSH  A             (0227)     push A
07ED: 10       PUSH  X             (0228)     push X
07EE: 5D D3    MOV   A,REG[211]
                                   (0229) 
                                   (0230) IF SYSTEM_LARGE_MEMORY_MODEL
07F0: 08       PUSH  A             (0231)     REG_PRESERVE IDX_PP
                                   (0232) ENDIF
                                   (0233) 
                                   (0234) Process_REENTRY:
                                   (0235) 
                                   (0236) ;******************************************************************************************
                                   (0237) ;Before doing anything else check for the presence of a STOP_ST in combination with the
                                   (0238) ;STOP Interrupt Enable (STOPIE).  If this is what happened set appropriate bits, 
                                   (0239) ;clear and reset the main I2CHW interrupt to assure that we haven't missed a BYTE_COMPLETE
                                   (0240) ;interrupt and exit the interrupt.  If a BYTE_COMPLETE interrupt is concurrent with the STOP 
                                   (0241) ;interrupt the next entry to this interrupt will be immediate and the STOPIE bit will now be 
                                   (0242) ;cleared.  This removes the possibility of trying to process two different events within one 
                                   (0243) ;interrupt.
                                   (0244) ;          
                                   (0245) ;******************************************************************************************
                                   (0246) ; Check the Stop Bit in SCR only if the Stop Interrupt is enabled.    
                                   (0247) 
07F1: 49 D6 10 TST   REG[214],16   (0248)     tst reg[I2CHW_1_CFG],I2C_STOPIE
07F4: A0 06    JZ    0x07FB        (0249)     jz  ByteComplProcess
07F6: 49 D7 20 TST   REG[215],32   (0250)     tst reg[I2CHW_1_SCR],I2C_STOP_ST                         ; Test if the Interrupt is due to Stop Condition
                                   (0251) ;conditions that must be met here are Slave-enabled, STOP int enabled (STOPIE), and STOP_ST (status bit set)
07F9: B0 EB    JNZ   0x08E5        (0252)     jnz STOPTRAP                                       ; If yes process Stop Trap
                                   (0253) 
                                   (0254) ByteComplProcess:
                                   (0255) ;*********END TEST OF STOP STATUS**********************************************************       
                                   (0256) 
                                   (0257) ;       file stored in Slave directory of user module
                                   (0258) ;program flow would likely be to first determine what 'mode' the device is in.  I.e. is Master and Slave mode enabled?
                                   (0259) ; control of program flow must take more into account when all more modes are enabled.
                                   (0260) ;
                                   (0261) ;* Slave only
                                   (0262)     ;very first thing to test is the I2C_ADDRIN bit.  If set then we are getting an address after a START
07FB: 49 D7 08 TST   REG[215],8    (0263)     tst reg[I2CHW_1_SCR], I2C_ADDRIN
07FE: B0 74    JNZ   0x0873        (0264)     jnz I2C_EvaluateADDRIN
                                   (0265) 
                                   (0266)     ; if slave didn't recieve an address, then this must be data for it to deal with
0800: 49 D7 04 TST   REG[215],4    (0267)     tst reg[I2CHW_1_SCR], I2C_TX  ;if set we are transmitting => this is at end of byte to eval the ACK
0803: B0 BE    JNZ   0x08C2        (0268)     jnz I2C_EvaluateACKIN
                                   (0269)     ; if slave NOT transmitting and NOT an address then data is being recieved
                                   (0270)     ; ack it and process it.
                                   (0271) 
                                   (0272)     ;UNLESS the stop bit turns out to have been set...
0805: 49 D7 20 TST   REG[215],32   (0273)     tst reg[I2CHW_1_SCR], I2C_STOP_ST
0808: B0 DC    JNZ   0x08E5        (0274)     jnz STOPTRAP
                                   (0275)     ; if slave NOT transmitting and NOT an address and Master is NOT terminating the then data is being recieved
                                   (0276)     ; ack it and process it.
                                   (0277) 
                                   (0278) ;;code snipped from old SW I2C below
                                   (0279) ;
                                   (0280) ; MASTER WRITE to SLAVE
                                   (0281) ;
                                   (0282) ;@PSoC_UserCode_BODY1@ (Do not change this line.)
                                   (0283) ;---------------------------------------------------
                                   (0284) ; Insert your custom code below this banner
                                   (0285) ;---------------------------------------------------
                                   (0286) ; By modifying the section from here down to the next comment block
                                   (0287) ; a user could process data for a custom I2C WRITE application
                                   (0288) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                   (0289) ;********************************************************
080A: 47 03 04 TST   [3],4         (0290)    tst   [I2CHW_1_bStatus], fI2C_NAKnextWr
080D: B0 14    JNZ   0x0822        (0291)    jnz   WrStoreData
                                   (0292)    ;
                                   (0293)    ;process write data here
                                   (0294)    ;
080F: 7A 05    DEC   [5]           (0295)    dec   [I2CHW_1_Write_Count]
0811: C0 39    JC    0x084B        (0296)    jc    I2CHW_1_WriteOverflow                                       ; carry set if value became -1
                                   (0297)    ;jz    WrStoreData
0813: 3C 05 00 CMP   [5],0         (0298)    cmp   [I2CHW_1_Write_Count], 00                                   ;set nak flag, dec count, and store data
0816: A0 03    JZ    0x081A        (0299)    jz    WrNakNextByte
0818: 80 06    JMP   0x081F        (0300)    jmp   WrNotBufEnd
                                   (0301) WrNakNextByte:                                                       ;set the nakflag in I2CHW_1_bStatus
081A: 2E 03 04 OR    [3],4         (0302)    or    [I2CHW_1_bStatus], fI2C_NAKnextWr
081D: 80 04    JMP   0x0822        (0303)    jmp   WrStoreData
                                   (0304) WrNotBufEnd:
081F: 26 03 FB AND   [3],251       (0305)    and   [I2CHW_1_bStatus], ~fI2C_NAKnextWr                          ;clear the nak flag in case it was set from a previous operation
                                   (0306) WrStoreData:
                                   (0307)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0822: 2E 04 10 OR    [4],16        (0308)    or    [I2CHW_1_RsrcStatus], I2CHW_WR_NOERR                        ;set current status
                                   (0309) IF SYSTEM_LARGE_MEMORY_MODEL
0825: 51 06    MOV   A,[6]         (0310)    mov   A, [pI2CHW_1_Write_BufHI]
                                   (0311) ENDIF
0827: 60 D3    MOV   REG[211],A    (0312)    RAM_SETPAGE_IDX A
0829: 58 07    MOV   X,[7]         (0313)    mov   X, [pI2CHW_1_Write_BufLO]
082B: 5D D8    MOV   A,REG[216]    (0314)    mov   A, reg[I2CHW_1_DR]
082D: 70 3F    AND   F,63
082F: 71 80    OR    F,128         (0315)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0831: 54 00    MOV   [X+0],A       (0316)    mov   [X], A
0833: 70 3F    AND   F,63
0835: 71 00    OR    F,0           (0317)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0837: 76 07    INC   [7]           (0318)    inc   [pI2CHW_1_Write_BufLO]
                                   (0319) 
0839: 47 03 04 TST   [3],4         (0320)    tst   [I2CHW_1_bStatus], fI2C_NAKnextWr
083C: B0 16    JNZ   0x0853        (0321)    jnz   NAK_this_one
                                   (0322) 
                                   (0323) 
                                   (0324) ;---------------------------------------------------
                                   (0325) ; End user I2C WRITE Customization
                                   (0326) ; Insert your custom code above this banner
                                   (0327) ;---------------------------------------------------
                                   (0328) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0329) ;;code snipped form SW I2C to maintain api compatibility above
                                   (0330) 
                                   (0331) ;
                                   (0332) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                   (0333) ;
083E: 62 D7 10 MOV   REG[215],16   (0334)     SetI2CHW_1_SCR  (I2C_ACKOUT )
0841: 18       POP   A
                                   (0335) 
                                   (0336) 
                                   (0337) IF SYSTEM_LARGE_MEMORY_MODEL
0842: 60 D3    MOV   REG[211],A    (0338)     REG_RESTORE IDX_PP
                                   (0339) ENDIF
0844: 20       POP   X             (0340)     pop X
0845: 18       POP   A             (0341)     pop A
0846: 70 3F    AND   F,63
0848: 71 C0    OR    F,192         (0342)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
084A: 7E       RETI                (0343)     I2CHW_1_SERVICE_RETURN
                                   (0344) 
                                   (0345) 
                                   (0346) ;
                                   (0347) ;ram-write-overflow label here, just rewrite the last location in the buffer
                                   (0348) ;    and set the overflow flag
                                   (0349) ;
                                   (0350) I2CHW_1_WriteOverflow:
084B: 2E 04 20 OR    [4],32        (0351)    or    [I2CHW_1_RsrcStatus], I2CHW_WR_OVERFLOW                     ; flag the overflow
084E: 26 04 EF AND   [4],239       (0352)    and   [I2CHW_1_RsrcStatus], ~I2CHW_WR_NOERR
0851: 76 05    INC   [5]           (0353)    inc   [I2CHW_1_Write_Count]                                       ; put it back to zero
                                   (0354)    ;If data is to be Nak'ed
                                   (0355) NAK_this_one:
0853: 26 03 FB AND   [3],251       (0356)    and   [I2CHW_1_bStatus], ~fI2C_NAKnextWr                          ;clear the nak flag in case it was set from a previous operation
                                   (0357) 
                                   (0358) ;
                                   (0359) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                   (0360) ;
0856: 62 D7 00 MOV   REG[215],0    (0361)     SetI2CHW_1_SCR ( 0 )
0859: 18       POP   A
                                   (0362) 
                                   (0363) 
                                   (0364) IF SYSTEM_LARGE_MEMORY_MODEL
085A: 60 D3    MOV   REG[211],A    (0365)     REG_RESTORE IDX_PP
                                   (0366) ENDIF
085C: 20       POP   X             (0367)     pop X
085D: 18       POP   A             (0368)     pop A
085E: 70 3F    AND   F,63
0860: 71 C0    OR    F,192         (0369)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0862: 7E       RETI                (0370)     I2CHW_1_SERVICE_RETURN                                                              ;return and wait for the next interrupt (on data)
                                   (0371) 
                                   (0372) 
                                   (0373) ;********************************************************
                                   (0374) ; Treat the case where the Slave will be continuing to
                                   (0375) ; receive data after receiving the address
                                   (0376) ;********************************************************
                                   (0377) I2C_AckAddr_RXdata:
                                   (0378) IF I2CHW_1_POLLED_PROCESS
                                   (0379)     or [I2CHW_1_Poll_Status], I2C_WRITE_STARTED
                                   (0380) ELSE
0863: 43 D6 10 OR    REG[214],16   (0381)     BitSetI2CHW_1_CFG ( I2C_STOPIE )
                                   (0382) ENDIF
                                   (0383) 
                                   (0384) ;
                                   (0385) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                   (0386) ;
0866: 62 D7 10 MOV   REG[215],16   (0387)     SetI2CHW_1_SCR ( I2C_ACKOUT )
0869: 18       POP   A
                                   (0388) 
                                   (0389) 
                                   (0390) IF SYSTEM_LARGE_MEMORY_MODEL
086A: 60 D3    MOV   REG[211],A    (0391)     REG_RESTORE IDX_PP
                                   (0392) ENDIF
086C: 20       POP   X             (0393)     pop X
086D: 18       POP   A             (0394)     pop A
086E: 70 3F    AND   F,63
0870: 71 C0    OR    F,192         (0395)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0872: 7E       RETI                (0396)     I2CHW_1_SERVICE_RETURN
                                   (0397) 
                                   (0398) ;********************************************************
                                   (0399) ; Look to see if the address is us or someone else
                                   (0400) ; use the carry flag to idendify a READ or WRITE address
                                   (0401) ;********************************************************
                                   (0402) I2C_EvaluateADDRIN:
0873: 51 04    MOV   A,[4]         (0403)     mov A, [I2CHW_1_RsrcStatus]
0875: 21 30    AND   A,48          (0404)     and A, (I2CHW_WR_NOERR | I2CHW_WR_OVERFLOW)
0877: A0 07    JZ    0x087F        (0405)     jz  NewADDRNotSet                                                                                             ;set new addr only if previous data appears to be in buffer
0879: 2E 04 40 OR    [4],64        (0406)     or  [I2CHW_1_RsrcStatus], I2CHW_WR_COMPLETE                      ;Same bit as I2CHW_ISR_NEW_ADDR
                                   (0407) 
                                   (0408) IF I2CHW_1_POLLED_PROCESS						                              ;if a new addr was received it's OK to terminate stop detection
                                   (0409)     and [I2CHW_1_Poll_Status], ~I2C_WRITE_STARTED            ;used to determine the end of a Master write to a slave.
                                   (0410) ELSE													                                            ;A REPEAT START could have terminated the transaction without a STOP
087C: 41 D6 EF AND   REG[214],239  (0411)     BitClrI2CHW_1_CFG I2C_STOPIE
                                   (0412) ENDIF
                                   (0413)                                                                                                                                           ;SET WR_COMPL bit if it appears there was write taking place just previous
                                   (0414) NewADDRNotSet:                                                       ;may use as a way to tag the end of a master write to slave
                                   (0415) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                   (0416) ;---------------------------------------------------
                                   (0417) ; Insert your custom code below this banner
                                   (0418) ;---------------------------------------------------
                                   (0419) ; By replacing the section from here down to the next block
                                   (0420) ; a user could process I2C addresses differently
                                   (0421) ;********************************************************
                                   (0422)                                                                                                                                           ;to this new address by looking at the status bits
                                   (0423)     ;inc [rec_cnt]
087F: 5D D8    MOV   A,REG[216]    (0424)     mov A, reg[I2CHW_1_DR]
0881: 70 F9    AND   F,249         (0425)     and F, 0xF9                                                      ;clear Carry (C) AND Zero (Z) in Flag reg
0883: 6D       RRC   A             (0426)     rrc A                                                            ;carry now holds bit 0 (r/~w) from addr byte
0884: 31 15    XOR   A,21          (0427)     xor A,  I2CHW_1_SLAVE_ADDR                                       ;for an equate
                                   (0428) 
0886: B0 4E    JNZ   0x08D5        (0429)     jnz I2C_Terminate
0888: 2E 04 80 OR    [4],128       (0430)     or [I2CHW_1_RsrcStatus], I2CHW_ISR_ACTIVE
                                   (0431) 
                                   (0432) ;********************************************************
                                   (0433) ; User could modify this section to allow the I2C routine
                                   (0434) ; to respond to multiple addresses, ram addresses, i/o pin
                                   (0435) ; based addresses, etc.
                                   (0436) ;********************************************************
                                   (0437) ;---------------------------------------------------
                                   (0438) ; End user I2C ADDR Compare Customization
                                   (0439) ; Insert your custom code above this banner
                                   (0440) ;---------------------------------------------------
                                   (0441) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0442) 
                                   (0443) I2CHW_1_send_ack:                                                    ;slave send adress ack
                                   (0444) 
                                   (0445) 
                                   (0446)     ;OK so the addreses were the same was it a read (c=1) or a write (c=0)
088B: DF D7    JNC   0x0863        (0447)     jnc I2C_AckAddr_RXdata ;(Master Write/Slave Receive) for this case we receive data and ack it
                                   (0448) 
                                   (0449) ;********************************************************
                                   (0450) ;Master Read (Master Read/Slave Transmit) Ack the address too.
                                   (0451) ;for this case the master has just sent us OUR read address which must be Ack'ed and will
                                   (0452) ;subsequently be reading from us (which the master will Ack.  So for the first bit we must
                                   (0453) ; set the I2C_TX AND the ACK bits in the I2C_SCR (first byte only)
                                   (0454) ; THEN we'll just be reading the ACK from the master as it reads our data
                                   (0455) ;********************************************************
                                   (0456) 
088D: 26 04 FB AND   [4],251       (0457)     and [I2CHW_1_RsrcStatus], ~I2CHW_RD_COMPLETE                     ;Master will NAK us at the end of transaction
                                   (0458) 
0890: 50 14    MOV   A,20          (0459)     mov A, (I2C_ACKOUT | I2C_TX)
0892: 08       PUSH  A             (0460)     push A
                                   (0461) 
                                   (0462) 
                                   (0463) ;
                                   (0464) ;MASTER is READING FROM SLAVE (ram or flash buffer)
                                   (0465) ;
                                   (0466) ;;code snipped from old SW I2C below
                                   (0467) 
                                   (0468) I2C_ObtainReadData:
                                   (0469) 
                                   (0470) ;********************************************************
                                   (0471) ; here we need to get the next data to output (master-read)
                                   (0472) ; also set the status byte for use on exit
                                   (0473) ;********************************************************
                                   (0474) IF I2CHW_1_READ_FLASH
                                   (0475) ;@PSoC_UserCode_BODY2@ (Do not change this line.)
                                   (0476) ;---------------------------------------------------
                                   (0477) ; Insert your custom code below this banner
                                   (0478) ; User flash read customization could take place within
                                   (0479) ; this area
                                   (0480) ;---------------------------------------------------
                                   (0481)     tst  [I2CHW_1_RsrcStatus],I2CHW_READFLASH
                                   (0482)     jz   ReadRamData
                                   (0483) 
                                   (0484)     ;
                                   (0485)     ;get the data
                                   (0486)     ;
                                   (0487)     mov  X, [pI2CHW_1_Read_BufLO]
                                   (0488)     mov  A, [pI2CHW_1_Read_BufHI]
                                   (0489)     romx
                                   (0490)     mov  reg[I2CHW_1_DR],A
                                   (0491)     dec  [I2CHW_1_Read_Count]                                        ;calc addr lsb
                                   (0492)     jnc  NoDecHighCount
                                   (0493)     dec  [I2CHW_1_Read_CountHI]
                                   (0494)     jc   FlashRdOverflow
                                   (0495) 
                                   (0496) NoDecHighCount:
                                   (0497) 
                                   (0498)     inc  [pI2CHW_1_Read_BufLO]                                       ;set the next flash address to read
                                   (0499)     jnc  NoIncHiAddr
                                   (0500)     inc  [pI2CHW_1_Read_BufHI]
                                   (0501) NoIncHiAddr:
                                   (0502)    jmp   I2CNormalRead
                                   (0503) 
                                   (0504) FlashRdOverflow:
                                   (0505)     ;deal with the over flow cond by resending last data byte (dec the low order addr byte)
                                   (0506) 
                                   (0507)    or    [I2CHW_1_RsrcStatus], I2CHW_RD_OVERFLOW
                                   (0508)    and   [I2CHW_1_RsrcStatus], ~I2CHW_RD_NOERR
                                   (0509)    ;set count back to 0
                                   (0510)    mov   [I2CHW_1_Read_CountHI], 0                                   ;functionally the same as incrementing ffff and less instructions
                                   (0511)    mov   [I2CHW_1_Read_Count], 0
                                   (0512)    jmp   I2CNormalRead
                                   (0513) ;---------------------------------------------------
                                   (0514) ; Insert your custom code above this banner
                                   (0515) ; END User flash read customization
                                   (0516) ;---------------------------------------------------
                                   (0517) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0518) ENDIF
                                   (0519) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                   (0520) ;---------------------------------------------------
                                   (0521) ; Insert your custom code below this banner
                                   (0522) ;---------------------------------------------------
                                   (0523) ; By replacing the section from here down to the next block
                                   (0524) ; a user could process data for a custom I2C READ application
                                   (0525) ;********************************************************
                                   (0526) ReadRamData:
                                   (0527)    ;read the current data byte
                                   (0528) IF SYSTEM_LARGE_MEMORY_MODEL
0893: 51 08    MOV   A,[8]         (0529)    mov   A, [pI2CHW_1_Read_BufHI]
                                   (0530) ENDIF
0895: 60 D3    MOV   REG[211],A    (0531)    RAM_SETPAGE_IDX A
0897: 58 09    MOV   X,[9]         (0532)    mov   X, [pI2CHW_1_Read_BufLO]
0899: 70 3F    AND   F,63
089B: 71 80    OR    F,128         (0533)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
089D: 52 00    MOV   A,[X+0]       (0534)    mov   A, [X]
089F: 70 3F    AND   F,63
08A1: 71 00    OR    F,0           (0535)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
08A3: 60 D8    MOV   REG[216],A    (0536)    mov   reg[I2CHW_1_DR], A
08A5: 7A 0A    DEC   [10]          (0537)    dec   [I2CHW_1_Read_Count]
08A7: C0 05    JC    0x08AD        (0538)    jc    I2CHW_1_readOverflow
08A9: 76 09    INC   [9]           (0539)    inc   [pI2CHW_1_Read_BufLO]
08AB: 80 09    JMP   0x08B5        (0540)    jmp   I2CNormalRead
                                   (0541) ;
                                   (0542) ;ram read overflow detected here, just resend the last location in the buffer
                                   (0543) ;
                                   (0544) I2CHW_1_readOverflow:
08AD: 2E 04 02 OR    [4],2         (0545)    or    [I2CHW_1_RsrcStatus], I2CHW_RD_OVERFLOW
08B0: 26 04 FE AND   [4],254       (0546)    and   [I2CHW_1_RsrcStatus], ~I2CHW_RD_NOERR
08B3: 76 0A    INC   [10]          (0547)    inc   [I2CHW_1_Read_Count]                                        ; set back to zero
                                   (0548) 
                                   (0549) ;********************************************************
                                   (0550) ; End user I2C READ customization section
                                   (0551) ;********************************************************
                                   (0552) ; Insert your custom code above this banner
                                   (0553) ;---------------------------------------------------
                                   (0554) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0555) 
                                   (0556) ;;code snipped form SW I2C to maintain api compatibility above
                                   (0557) I2CNormalRead:
                                   (0558) 
                                   (0559)         ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                   (0560)         ;and place there based on whether or not the previous transmission was our I2C address.
08B5: 18       POP   A             (0561)         pop A
                                   (0562) 
                                   (0563) ;
                                   (0564) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                   (0565) ;
08B6: 60 D7    MOV   REG[215],A    (0566)     SetI2CHW_1_SCR A     ;set read bit as (bit0) and Addr bit (bit7)in the I2C_SCR
08B8: 18       POP   A
                                   (0567) 
                                   (0568) 
                                   (0569) IF SYSTEM_LARGE_MEMORY_MODEL
08B9: 60 D3    MOV   REG[211],A    (0570)     REG_RESTORE IDX_PP
                                   (0571) ENDIF
08BB: 20       POP   X             (0572)     pop X
08BC: 18       POP   A             (0573)     pop A
08BD: 70 3F    AND   F,63
08BF: 71 C0    OR    F,192         (0574)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
08C1: 7E       RETI                (0575)     I2CHW_1_SERVICE_RETURN ;return and wait for the next interrupt (on data)
                                   (0576) 
                                   (0577) 
                                   (0578) 
                                   (0579) I2C_EvaluateACKIN:
                                   (0580) 
08C2: 49 D7 02 TST   REG[215],2    (0581)     tst reg[I2CHW_1_SCR], I2C_LST_BIT
08C5: B0 06    JNZ   0x08CC        (0582)     jnz I2C_LastByteToMstr  ;NAK recd on TX so this is the end set mode to interrup only on ADDR IN
                                   (0583)     ; got here we were ACK'ed so send another byte
08C7: 50 04    MOV   A,4           (0584)     mov A, ( I2C_TX )
                                   (0585)         ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                   (0586)         ;and place there based on whether or not the previous transmission was our I2C address.
08C9: 08       PUSH  A             (0587)         push A
08CA: 8F C8    JMP   0x0893        (0588)         jmp I2C_ObtainReadData
                                   (0589) 
                                   (0590) 
                                   (0591) I2C_LastByteToMstr:
08CC: 2E 04 01 OR    [4],1         (0592)     or  [I2CHW_1_RsrcStatus], I2CHW_RD_NOERR                         ;Master NAK'ed us at the end of transaction
08CF: 2E 04 04 OR    [4],4         (0593)     or  [I2CHW_1_RsrcStatus], I2CHW_RD_COMPLETE
08D2: 26 04 7F AND   [4],127       (0594)     and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                   (0595) 
                                   (0596) I2C_Terminate:
08D5: 26 04 7F AND   [4],127       (0597)     and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                   (0598) 
                                   (0599) ;
                                   (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                   (0601) ;
08D8: 62 D7 00 MOV   REG[215],0    (0602)     SetI2CHW_1_SCR 0     ;the default mode to wait for an address
08DB: 18       POP   A
                                   (0603) 
                                   (0604) 
                                   (0605) IF SYSTEM_LARGE_MEMORY_MODEL
08DC: 60 D3    MOV   REG[211],A    (0606)     REG_RESTORE IDX_PP
                                   (0607) ENDIF
08DE: 20       POP   X             (0608)     pop X
08DF: 18       POP   A             (0609)     pop A
08E0: 70 3F    AND   F,63
08E2: 71 C0    OR    F,192         (0610)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
08E4: 7E       RETI                (0611)     I2CHW_1_SERVICE_RETURN
                                   (0612) 
                                   (0613) STOPTRAP:
                                   (0614)     ;I2C stop detected
                                   (0615) ;
                                   (0616) ; set a flag to indicate END OF TRANSMISSION
                                   (0617) ;
08E5: 2E 04 40 OR    [4],64        (0618)     or  [I2CHW_1_RsrcStatus], I2CHW_WR_COMPLETE                      ;only SET by ISR USER must clear.
08E8: 26 04 7F AND   [4],127       (0619)     and [I2CHW_1_RsrcStatus], ~I2CHW_ISR_ACTIVE
                                   (0620) 
                                   (0621) IF I2CHW_1_POLLED_PROCESS
                                   (0622)     and [I2CHW_1_Poll_Status], ~I2C_WRITE_STARTED
                                   (0623) 	jmp ExitISR
                                   (0624) ELSE
08EB: 41 D6 EF AND   REG[214],239  (0625)     BitClrI2CHW_1_CFG I2C_STOPIE
08EE: 49 D7 01 TST   REG[215],1    (0626)     tst reg[I2CHW_1_SCR], I2C_BYTE_COMPL
                                   (0627) ;;if BYTE_COMPL is set, there's an excellent chance to lose an ISR.  Because of the way they are
                                   (0628) ;; latched into the INT_MSK.  Therefore clear the applicable bit (STOPIE) and jump directly to the 
                                   (0629) ;; top of this routing since the bus is currently stalled.  Just in case the ISR is properly latched,
                                   (0630) ;; clear the mask bit since it's is serviced manually.
08F1: A0 06    JZ    0x08F8        (0631)     jz ExitISR
08F3: 41 DD FE AND   REG[221],254  (0632)     and  reg[INT_CLR3], ~0x01                                ;clear the I2C interrupt
                                   (0633) ENDIF
                                   (0634) 
08F6: 8E FA    JMP   0x07F1        (0635) 	jmp Process_REENTRY
08F8: 18       POP   A
                                   (0636) 
                                   (0637) ExitISR:
                                   (0638) 
                                   (0639) IF SYSTEM_LARGE_MEMORY_MODEL
08F9: 60 D3    MOV   REG[211],A    (0640)     REG_RESTORE IDX_PP
                                   (0641) ENDIF
08FB: 20       POP   X             (0642)     pop X
08FC: 18       POP   A             (0643)     pop A
08FD: 70 3F    AND   F,63
08FF: 71 C0    OR    F,192         (0644)     RAM_RESTORE_NATIVE_PAGING      		;has no effect if this is an ISR
0901: 7E       RETI                (0645)     I2CHW_1_SERVICE_RETURN

FILE: lib\i2chw_1common.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME: I2CHW_1Common.asm
                                   (0004) ;;   Version: 1.5, Updated on 2006/06/06 at 13:39:08
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                   (0008) ;;               for the (22/24/27/29xxx) PSoC family of devices
                                   (0009) ;;
                                   (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0012) ;;        This means it is the caller's responsibility to preserve any values
                                   (0013) ;;        in the X and A registers that are still needed after the API functions
                                   (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0018) ;;-----------------------------------------------------------------------------
                                   (0019) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                   (0020) ;;*****************************************************************************
                                   (0021) ;;*****************************************************************************
                                   (0022) 
                                   (0023) include "m8c.inc"
                                   (0024) include "memory.inc"
                                   (0025) include "I2CHW_1Common.inc"
                                   (0026) 
                                   (0027) ;-----------------------------------------------
                                   (0028) ; include instance specific register definitions
                                   (0029) ;-----------------------------------------------
                                   (0030) 
                                   (0031) ;-----------------------------------------------
                                   (0032) ;  Global Symbols
                                   (0033) ;-----------------------------------------------
                                   (0034) ;-------------------------------------------------------------------
                                   (0035) ;  Declare the functions global for both assembler and C compiler.
                                   (0036) ;
                                   (0037) ;  Note that there are two names for each API. First name is
                                   (0038) ;  assembler reference. Name with underscore is name refence for
                                   (0039) ;  C compiler.  Calling function in C source code does not require
                                   (0040) ;  the underscore.
                                   (0041) ;-------------------------------------------------------------------
                                   (0042) 
                                   (0043) export    I2CHW_1_InitWrite
                                   (0044) export   _I2CHW_1_InitWrite
                                   (0045) export    I2CHW_1_InitRamRead
                                   (0046) export   _I2CHW_1_InitRamRead
                                   (0047) export    I2CHW_1_InitFlashRead
                                   (0048) export   _I2CHW_1_InitFlashRead
                                   (0049) export    I2CHW_1_bReadI2CStatus
                                   (0050) export   _I2CHW_1_bReadI2CStatus
                                   (0051) export    I2CHW_1_ClrRdStatus
                                   (0052) export   _I2CHW_1_ClrRdStatus
                                   (0053) export    I2CHW_1_ClrWrStatus
                                   (0054) export   _I2CHW_1_ClrWrStatus
                                   (0055) 
                                   (0056) 
                                   (0057) AREA UserModules (ROM, REL)
                                   (0058) 
                                   (0059) 
                                   (0060) .SECTION
                                   (0061) ;-----------------------------------------------------------------------------
                                   (0062) ;  FUNCTION NAME: I2CHW_1_InitWrite
                                   (0063) ;
                                   (0064) ;  DESCRIPTION:
                                   (0065) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                   (0066) ;     zeroes the value of a count byte for the same buffer.
                                   (0067) ;
                                   (0068) ;-----------------------------------------------------------------------------
                                   (0069) ;
                                   (0070) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                   (0071) ;              [SP-4]   -- Hi order part of address Wrbuf
                                   (0072) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                   (0073) ;
                                   (0074) ;  RETURNS:  none
                                   (0075) ;
                                   (0076) ;    Write Status bits are cleared
                                   (0077) ;
                                   (0078) ;  SIDE EFFECTS:
                                   (0079) ;    The A and X registers may be modified by this or future implementations
                                   (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0083) ;    functions.
                                   (0084) ;          
                                   (0085) ;    Currently only the page pointer registers listed below are modified: 
                                   (0086) ;          CUR_PP
                                   (0087) ;
                                   (0088) ;    Write Status bits are cleared
                                   (0089) ;
                                   (0090) ;  THEORY of OPERATION or PROCEDURE:
                                   (0091) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                   (0092) ;     the accumulator.  X register is the low order pointer.
                                   (0093) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                   (0094) ;
                                   (0095) 
                                   (0096)  I2CHW_1_InitWrite:
                                   (0097) _I2CHW_1_InitWrite:
                                   (0098) 
                                   (0099) WrCnt:   equ -5
                                   (0100) WrBufHi: equ -4
                                   (0101) WrBufLo: equ -3
                                   (0102) 
                                   (0103) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0104)     RAM_PROLOGUE RAM_USE_CLASS_2
0902: 10       PUSH  X             (0105) 	push  X
0903: 4F       MOV   X,SP          (0106) 	mov   X, SP
0904: 79       DEC   X             (0107)     dec   X                                                          ;set up the pointer for correct param access
0905: 08       PUSH  A             (0108)     push  A
0906: 5D DE    MOV   A,REG[222]    (0109)     mov   A, reg[INT_MSK3]
0908: 08       PUSH  A             (0110)     push  A                                                           ;preserve flags prior to disabling int
0909: 41 DE FE AND   REG[222],254  (0111)     M8C_DisableIntMask INT_MSK3, INT_MSK3_I2C
                                   (0112) 
090C: 62 D0 00 MOV   REG[208],0    (0113)     RAM_SETPAGE_CUR >I2CHW_1_bStatus						                           ;Set the Page Pointer for LMM
090F: 26 03 FB AND   [3],251       (0114)     and    [I2CHW_1_bStatus], ~fI2C_NAKnextWr                        ;reset the nak-next-written-byte flag.
                                   (0115) IF SYSTEM_LARGE_MEMORY_MODEL
0912: 52 FC    MOV   A,[X-4]       (0116)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0914: 53 06    MOV   [6],A         (0117)     mov   [pI2CHW_1_Write_BufHI], A
                                   (0118) ENDIF
0916: 52 FD    MOV   A,[X-3]       (0119)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0918: 53 07    MOV   [7],A         (0120)     mov   [pI2CHW_1_Write_BufLO], A
091A: 52 FB    MOV   A,[X-5]       (0121)     mov   A, [X + WrCnt]                                               ;move Write_count to A
091C: 53 05    MOV   [5],A         (0122)     mov   [I2CHW_1_Write_Count], A
091E: 39 01    CMP   A,1           (0123)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0920: A0 08    JZ    0x0929        (0124)     jz    I2CHW_1_SetNak
0922: C0 06    JC    0x0929        (0125)     jc    I2CHW_1_SetNak
0924: 26 04 8F AND   [4],143       (0126)     and   [I2CHW_1_RsrcStatus], ~0x70                                ;clear the 0x10, 0x20 (Write status bits)
0927: 80 09    JMP   0x0931        (0127)     jmp   I2Cs_1_ResetFlgs
                                   (0128) 
                                   (0129) I2CHW_1_SetNak:
0929: 2E 03 04 OR    [3],4         (0130)     or    [I2CHW_1_bStatus], fI2C_NAKnextWr                          ;set the nak-next-written-byte flag.
092C: 26 04 8F AND   [4],143       (0131)     and   [I2CHW_1_RsrcStatus], ~0x70                                ; clear the 0x10, 0x20 (Write status bits)
092F: 80 01    JMP   0x0931        (0132)     jmp   I2Cs_1_ResetFlgs
                                   (0133) 
                                   (0134) I2Cs_1_ResetFlgs:
0931: 18       POP   A             (0135)     pop A
0932: 21 01    AND   A,1           (0136)     and A, INT_MSK3_I2C                                                ; Only enable if it was previously enabled
0934: A0 04    JZ    0x0939        (0137)     jz  . + 5
0936: 43 DE 01 OR    REG[222],1    (0138)     M8C_EnableIntMask INT_MSK3, INT_MSK3_I2C
0939: 18       POP   A             (0139)     pop A
093A: 20       POP   X             (0140)     pop X
093B: 70 3F    AND   F,63
                                   (0141) 	RAM_EPILOGUE RAM_USE_CLASS_4
093D: 71 C0    OR    F,192         (0142)     RAM_EPILOGUE RAM_USE_CLASS_2
093F: 7F       RET                 (0143)     ret
                                   (0144) 
                                   (0145) .ENDSECTION
                                   (0146) 
                                   (0147) .SECTION
                                   (0148) ;-----------------------------------------------------------------------------
                                   (0149) ;  FUNCTION NAME: I2CHW_1_InitRamRead
                                   (0150) ;
                                   (0151) ;  DESCRIPTION:
                                   (0152) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                   (0153) ;     and zeroes the value of a count byte for the same buffer.
                                   (0154) ;
                                   (0155) ;-----------------------------------------------------------------------------
                                   (0156) ;
                                   (0157) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                   (0158) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                   (0159) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                   (0160) ;
                                   (0161) ;  RETURNS: none
                                   (0162) ;
                                   (0163) ;  SIDE EFFECTS:
                                   (0164) ;    The A and X registers may be modified by this or future implementations
                                   (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0168) ;    functions.
                                   (0169) ;          
                                   (0170) ;    Currently only the page pointer registers listed below are modified: 
                                   (0171) ;          CUR_PP
                                   (0172) ;
                                   (0173) ;     Read Status bits are cleared
                                   (0174) ;
                                   (0175) ;  THEORY of OPERATION or PROCEDURE:
                                   (0176) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                   (0177) ;     the accumulator.  X register is the low order pointer.
                                   (0178) ;
                                   (0179) 
                                   (0180)  I2CHW_1_InitRamRead:
                                   (0181) _I2CHW_1_InitRamRead:
                                   (0182) 
                                   (0183) RdCnt:     equ   -5
                                   (0184) RdBufHi:   equ   -4
                                   (0185) RdBufLo:   equ   -3
                                   (0186) 
                                   (0187)     RAM_PROLOGUE RAM_USE_CLASS_2
                                   (0188) 	RAM_PROLOGUE RAM_USE_CLASS_4
0940: 62 D0 00 MOV   REG[208],0    (0189) 	RAM_SETPAGE_CUR >I2CHW_1_Read_Count
0943: 10       PUSH  X             (0190)     push  X
0944: 4F       MOV   X,SP          (0191) 	mov   X, SP
0945: 79       DEC   X             (0192)     dec   X                                                          ;set up the pointer for correct param access
0946: 08       PUSH  A             (0193)     push  A
0947: 5D DE    MOV   A,REG[222]    (0194)     mov   A, reg[INT_MSK3]
0949: 08       PUSH  A             (0195)     push  A                                                            ;preserve flags prior to disabling int
094A: 41 DE FE AND   REG[222],254  (0196)     M8C_DisableIntMask INT_MSK3, INT_MSK3_I2C
                                   (0197) 
                                   (0198) IF SYSTEM_LARGE_MEMORY_MODEL
094D: 52 FC    MOV   A,[X-4]       (0199)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
094F: 53 08    MOV   [8],A         (0200)     mov   [pI2CHW_1_Read_BufHI], A
                                   (0201) ENDIF
0951: 52 FD    MOV   A,[X-3]       (0202)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0953: 53 09    MOV   [9],A         (0203)     mov   [pI2CHW_1_Read_BufLO], A
0955: 52 FB    MOV   A,[X-5]       (0204)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0957: 53 0A    MOV   [10],A        (0205)     mov   [I2CHW_1_Read_Count], A
0959: 7A 0A    DEC   [10]          (0206)     dec   [I2CHW_1_Read_Count]                                       ; since we decrement through zero...
095B: 26 04 F0 AND   [4],240       (0207)     and   [I2CHW_1_RsrcStatus], ~0x0f                                ; clear the lower 4 (read status bits)
                                   (0208) 
095E: 18       POP   A             (0209)     pop A
095F: 21 01    AND   A,1           (0210)     and A, INT_MSK3_I2C                                                ; Only enable if it was previously enabled
0961: A0 04    JZ    0x0966        (0211)     jz  . + 5
0963: 43 DE 01 OR    REG[222],1    (0212)     M8C_EnableIntMask INT_MSK3, INT_MSK3_I2C
0966: 18       POP   A             (0213)     pop A
0967: 20       POP   X             (0214)     pop X
0968: 70 3F    AND   F,63
                                   (0215) 
                                   (0216)     RAM_EPILOGUE RAM_USE_CLASS_4
096A: 71 C0    OR    F,192         (0217)     RAM_EPILOGUE RAM_USE_CLASS_2
096C: 7F       RET                 (0218)     ret
                                   (0219) 
                                   (0220) .ENDSECTION
                                   (0221) 
                                   (0222) .SECTION
                                   (0223) ;-----------------------------------------------------------------------------
                                   (0224) ;  FUNCTION NAME: I2CHW_1_InitFlashRead
                                   (0225) ;
                                   (0226) ;  DESCRIPTION:
                                   (0227) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                   (0228) ;     data from, and zeroes the value of a count byte for the same buffer.
                                   (0229) ;
                                   (0230) ;-----------------------------------------------------------------------------
                                   (0231) ;
                                   (0232) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                   (0233) ;              [SP-5]   -- Low order part of flashRead counts
                                   (0234) ;              [SP-4]   -- Hi order part of the flash buf address
                                   (0235) ;              [SP-3]   -- Lo order part of flash buf address
                                   (0236) ;
                                   (0237) ;  RETURNS:
                                   (0238) ;
                                   (0239) ;  SIDE EFFECTS:
                                   (0240) ;    The A and X registers may be modified by this or future implementations
                                   (0241) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0242) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0243) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0244) ;    functions.
                                   (0245) ;          
                                   (0246) ;    Currently only the page pointer registers listed below are modified: 
                                   (0247) ;          CUR_PP
                                   (0248) ;
                                   (0249) ;    Read Status bits are cleared
                                   (0250) ;
                                   (0251) ;  THEORY of OPERATION or PROCEDURE:
                                   (0252) ;     The C compiler will place the upper order address of the buffer in Acc.
                                   (0253) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                   (0254) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                   (0255) ;     either case
                                   (0256) ;
                                   (0257)  I2CHW_1_InitFlashRead:
                                   (0258) _I2CHW_1_InitFlashRead:
                                   (0259) 
                                   (0260) FlRdCntHI:     equ   -6
                                   (0261) FlRdCntLO:     equ   -5
                                   (0262) FlBufAdrHI:    equ   -4
                                   (0263) FlBufAdrLO:    equ   -3
                                   (0264) 
                                   (0265) IF I2CHW_1_READ_FLASH
                                   (0266)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0267)     RAM_PROLOGUE RAM_USE_CLASS_2
                                   (0268)     RAM_SETPAGE_CUR >pI2CHW_1_Read_BufLO   
                                   (0269) 	push  X
                                   (0270) 	mov   X, SP
                                   (0271)     dec   X                                                            ;set up the pointer for correct param access
                                   (0272)     push  A
                                   (0273)     mov   A, reg[INT_MSK3]
                                   (0274)     push  A                                                            ;preserve flags prior to disabling int
                                   (0275)     M8C_DisableIntMask INT_MSK3, INT_MSK3_I2C
                                   (0276) 
                                   (0277)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                   (0278)     mov   [pI2CHW_1_Read_BufLO], A
                                   (0279)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                   (0280)     mov   [pI2CHW_1_Read_BufHI], A
                                   (0281)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                   (0282)     mov   [I2CHW_1_Read_Count], A
                                   (0283)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                   (0284)     mov   [I2CHW_1_Read_CountHI], A
                                   (0285) 
                                   (0286)     dec   [I2CHW_1_Read_Count]                                       ; since this will count throu zero
                                   (0287)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                   (0288)     dec   [I2CHW_1_Read_CountHI]
                                   (0289) 
                                   (0290)     and   [I2CHW_1_RsrcStatus], ~0x07                                ; clear the lower 3 (read status bits)
                                   (0291)     or    [I2CHW_1_RsrcStatus],I2CHW_READFLASH                       ; set the flash status bit
                                   (0292) 
                                   (0293)     pop A
                                   (0294)     and A, INT_MSK3_I2C                                                ; Only enable if it was previously enabled
                                   (0295)     jz  . + 5
                                   (0296)     M8C_EnableIntMask INT_MSK3, INT_MSK3_I2C
                                   (0297)     pop A
                                   (0298) 	pop X
                                   (0299)     RAM_EPILOGUE RAM_USE_CLASS_2
                                   (0300) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                   (0301) ENDIF
096D: 7F       RET                 (0302)     ret
                                   (0303) 
                                   (0304) .ENDSECTION
                                   (0305) 
                                   (0306) .SECTION
                                   (0307) ;-----------------------------------------------------------------------------
                                   (0308) ;  FUNCTION NAME: I2CHW_1_bReadI2CStatus
                                   (0309) ;
                                   (0310) ;  DESCRIPTION:
                                   (0311) ;     Returns the value in the the RsrcStatus variable.
                                   (0312) ;
                                   (0313) ;-----------------------------------------------------------------------------
                                   (0314) ;
                                   (0315) ;  ARGUMENTS:
                                   (0316) ;
                                   (0317) ;  RETURNS:
                                   (0318) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                   (0319) ;     returned in A.
                                   (0320) ;         I2CHW_RD_NOERR:                   equ 1
                                   (0321) ;         I2CHW_RD_OVERFLOW:                equ 2
                                   (0322) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                   (0323) ;         I2CHW_READFLASH:                  equ 8
                                   (0324) ;         I2CHW_WR_NOERR:                   equ 10h
                                   (0325) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                   (0326) ;         I2CHW_WR_COMPLETE:                equ 40h
                                   (0327) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                   (0328) ;
                                   (0329) ;  SIDE EFFECTS:
                                   (0330) ;    The A and X registers may be modified by this or future implementations
                                   (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0334) ;    functions.
                                   (0335) ;          
                                   (0336) ;    Currently only the page pointer registers listed below are modified: 
                                   (0337) ;          CUR_PP
                                   (0338) ;          
                                   (0339)  I2CHW_1_bReadI2CStatus:
                                   (0340) _I2CHW_1_bReadI2CStatus:
                                   (0341)     RAM_PROLOGUE RAM_USE_CLASS_4
096E: 62 D0 00 MOV   REG[208],0    (0342) 	RAM_SETPAGE_CUR >I2CHW_1_RsrcStatus
0971: 51 04    MOV   A,[4]         (0343)     mov   A, [I2CHW_1_RsrcStatus]                                    ;return the status in A
                                   (0344)     RAM_EPILOGUE RAM_USE_CLASS_4
0973: 7F       RET                 (0345)     ret
                                   (0346) 
                                   (0347) .ENDSECTION
                                   (0348) 
                                   (0349) .SECTION
                                   (0350) ;-----------------------------------------------------------------------------
                                   (0351) ;  FUNCTION NAME: I2CHW_1_ClrRdStatus
                                   (0352) ;
                                   (0353) ;  DESCRIPTION:
                                   (0354) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                   (0355) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                   (0356) ;
                                   (0357) ;-----------------------------------------------------------------------------
                                   (0358) ;
                                   (0359) ;  ARGUMENTS: none
                                   (0360) ;
                                   (0361) ;  RETURNS: none
                                   (0362) ;
                                   (0363) ;  SIDE EFFECTS:
                                   (0364) ;    The A and X registers may be modified by this or future implementations
                                   (0365) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0366) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0367) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0368) ;    functions.
                                   (0369) ;          
                                   (0370) ;    Currently only the page pointer registers listed below are modified: 
                                   (0371) ;          CUR_PP
                                   (0372) ;          
                                   (0373)  I2CHW_1_ClrRdStatus:
                                   (0374) _I2CHW_1_ClrRdStatus:
                                   (0375)     RAM_PROLOGUE RAM_USE_CLASS_4
0974: 62 D0 00 MOV   REG[208],0    (0376) 	RAM_SETPAGE_CUR >I2CHW_1_RsrcStatus
0977: 26 04 F8 AND   [4],248       (0377)     and   [I2CHW_1_RsrcStatus], ~0x07                                ; clear the lower 3 (read status bits)
                                   (0378)     RAM_EPILOGUE RAM_USE_CLASS_4
097A: 7F       RET                 (0379)     ret
                                   (0380) 
                                   (0381) .ENDSECTION
                                   (0382) 
                                   (0383) .SECTION
                                   (0384) ;-----------------------------------------------------------------------------
                                   (0385) ;  FUNCTION NAME: I2CHW_1_ClrWrStatus
                                   (0386) ;
                                   (0387) ;  DESCRIPTION:
                                   (0388) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                   (0389) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                   (0390) ;
                                   (0391) ;-----------------------------------------------------------------------------
                                   (0392) ;
                                   (0393) ;  ARGUMENTS: none
                                   (0394) ;
                                   (0395) ;  RETURNS: none
                                   (0396) ;
                                   (0397) ;  SIDE EFFECTS:
                                   (0398) ;    The A and X registers may be modified by this or future implementations
                                   (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0402) ;    functions.
                                   (0403) ;          
                                   (0404) ;    Currently only the page pointer registers listed below are modified: 
                                   (0405) ;          CUR_PP
                                   (0406) ;          
                                   (0407)  I2CHW_1_ClrWrStatus:
                                   (0408) _I2CHW_1_ClrWrStatus:
                                   (0409)     RAM_PROLOGUE RAM_USE_CLASS_4
097B: 62 D0 00 MOV   REG[208],0    (0410) 	RAM_SETPAGE_CUR >I2CHW_1_RsrcStatus
097E: 26 04 8F AND   [4],143       (0411)     and   [I2CHW_1_RsrcStatus], ~0x70                                ; clear bits 10,20 (write status bits)
                                   (0412)     RAM_EPILOGUE RAM_USE_CLASS_4
0981: 7F       RET                 (0413)     ret

FILE: lib\counter8_1.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME: Counter8_1.asm
                                   (0004) ;;   Version: 2.5, Updated on 2006/05/15 at 14:57:49
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                   (0008) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0009) ;;
                                   (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0012) ;;        This means it is the caller's responsibility to preserve any values
                                   (0013) ;;        in the X and A registers that are still needed after the API functions
                                   (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0018) ;;-----------------------------------------------------------------------------
                                   (0019) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0020) ;;*****************************************************************************
                                   (0021) ;;*****************************************************************************
                                   (0022) 
                                   (0023) include "m8c.inc"
                                   (0024) include "memory.inc"
                                   (0025) include "Counter8_1.inc"
                                   (0026) 
                                   (0027) ;-----------------------------------------------
                                   (0028) ;  Global Symbols
                                   (0029) ;-----------------------------------------------
                                   (0030) export  Counter8_1_EnableInt
                                   (0031) export _Counter8_1_EnableInt
                                   (0032) export  Counter8_1_DisableInt
                                   (0033) export _Counter8_1_DisableInt
                                   (0034) export  Counter8_1_Start
                                   (0035) export _Counter8_1_Start
                                   (0036) export  Counter8_1_Stop
                                   (0037) export _Counter8_1_Stop
                                   (0038) export  Counter8_1_WritePeriod
                                   (0039) export _Counter8_1_WritePeriod
                                   (0040) export  Counter8_1_WriteCompareValue
                                   (0041) export _Counter8_1_WriteCompareValue
                                   (0042) export  Counter8_1_bReadCompareValue
                                   (0043) export _Counter8_1_bReadCompareValue
                                   (0044) export  Counter8_1_bReadCounter
                                   (0045) export _Counter8_1_bReadCounter
                                   (0046) 
                                   (0047) ; The following functions are deprecated and subject to omission in future releases
                                   (0048) ;
                                   (0049) export  bCounter8_1_ReadCompareValue  ; deprecated
                                   (0050) export _bCounter8_1_ReadCompareValue  ; deprecated
                                   (0051) export  bCounter8_1_ReadCounter       ; deprecated
                                   (0052) export _bCounter8_1_ReadCounter       ; deprecated
                                   (0053) 
                                   (0054) 
                                   (0055) AREA radyopnl_RAM (RAM,REL)
                                   (0056) 
                                   (0057) ;-----------------------------------------------
                                   (0058) ;  Constant Definitions
                                   (0059) ;-----------------------------------------------
                                   (0060) 
                                   (0061) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                   (0062) 
                                   (0063) 
                                   (0064) ;-----------------------------------------------
                                   (0065) ; Variable Allocation
                                   (0066) ;-----------------------------------------------
                                   (0067) 
                                   (0068) 
                                   (0069) AREA UserModules (ROM, REL)
                                   (0070) 
                                   (0071) .SECTION
                                   (0072) ;-----------------------------------------------------------------------------
                                   (0073) ;  FUNCTION NAME: Counter8_1_EnableInt
                                   (0074) ;
                                   (0075) ;  DESCRIPTION:
                                   (0076) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                   (0077) ;     associated with this User Module. This function has no effect until and
                                   (0078) ;     unless the global interrupts are enabled (for example by using the
                                   (0079) ;     macro M8C_EnableGInt).
                                   (0080) ;-----------------------------------------------------------------------------
                                   (0081) ;
                                   (0082) ;  ARGUMENTS:    None.
                                   (0083) ;  RETURNS:      Nothing.
                                   (0084) ;  SIDE EFFECTS: 
                                   (0085) ;    The A and X registers may be modified by this or future implementations
                                   (0086) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0087) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0088) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0089) ;    functions.
                                   (0090) ;
                                   (0091)  Counter8_1_EnableInt:
                                   (0092) _Counter8_1_EnableInt:
                                   (0093)    RAM_PROLOGUE RAM_USE_CLASS_1
0982: 43 E1 08 OR    REG[225],8    (0094)    Counter8_1_EnableInt_M
                                   (0095)    RAM_EPILOGUE RAM_USE_CLASS_1
0985: 7F       RET                 (0096)    ret
                                   (0097) 
                                   (0098) .ENDSECTION
                                   (0099) 
                                   (0100) .SECTION
                                   (0101) ;-----------------------------------------------------------------------------
                                   (0102) ;  FUNCTION NAME: Counter8_1_DisableInt
                                   (0103) ;
                                   (0104) ;  DESCRIPTION:
                                   (0105) ;     Disables this counter's interrupt by clearing the interrupt enable
                                   (0106) ;     mask bit associated with this User Module.
                                   (0107) ;-----------------------------------------------------------------------------
                                   (0108) ;
                                   (0109) ;  ARGUMENTS:    None
                                   (0110) ;  RETURNS:      Nothing
                                   (0111) ;  SIDE EFFECTS: 
                                   (0112) ;    The A and X registers may be modified by this or future implementations
                                   (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0116) ;    functions.
                                   (0117) ;
                                   (0118)  Counter8_1_DisableInt:
                                   (0119) _Counter8_1_DisableInt:
                                   (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
0986: 41 E1 F7 AND   REG[225],247  (0121)    Counter8_1_DisableInt_M
                                   (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0989: 7F       RET                 (0123)    ret
                                   (0124) 
                                   (0125) 
                                   (0126) .ENDSECTION
                                   (0127) 
                                   (0128) .SECTION
                                   (0129) ;-----------------------------------------------------------------------------
                                   (0130) ;  FUNCTION NAME: Counter8_1_Start
                                   (0131) ;
                                   (0132) ;  DESCRIPTION:
                                   (0133) ;     Sets the start bit in the Control register of this user module.  The
                                   (0134) ;     counter will begin counting on the next input clock as soon as the
                                   (0135) ;     enable input is asserted high.
                                   (0136) ;-----------------------------------------------------------------------------
                                   (0137) ;
                                   (0138) ;  ARGUMENTS:    None
                                   (0139) ;  RETURNS:      Nothing
                                   (0140) ;  SIDE EFFECTS: 
                                   (0141) ;    The A and X registers may be modified by this or future implementations
                                   (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0145) ;    functions.
                                   (0146) ;
                                   (0147)  Counter8_1_Start:
                                   (0148) _Counter8_1_Start:
                                   (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
098A: 43 2F 01 OR    REG[47],1     (0150)    Counter8_1_Start_M
                                   (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
098D: 7F       RET                 (0152)    ret
                                   (0153) 
                                   (0154) 
                                   (0155) .ENDSECTION
                                   (0156) 
                                   (0157) .SECTION
                                   (0158) ;-----------------------------------------------------------------------------
                                   (0159) ;  FUNCTION NAME: Counter8_1_Stop
                                   (0160) ;
                                   (0161) ;  DESCRIPTION:
                                   (0162) ;     Disables counter operation by clearing the start bit in the Control
                                   (0163) ;     register.
                                   (0164) ;-----------------------------------------------------------------------------
                                   (0165) ;
                                   (0166) ;  ARGUMENTS:    None
                                   (0167) ;  RETURNS:      Nothing
                                   (0168) ;  SIDE EFFECTS: 
                                   (0169) ;    The A and X registers may be modified by this or future implementations
                                   (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0173) ;    functions.
                                   (0174) ;
                                   (0175)  Counter8_1_Stop:
                                   (0176) _Counter8_1_Stop:
                                   (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
098E: 41 2F FE AND   REG[47],254   (0178)    Counter8_1_Stop_M
                                   (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0991: 7F       RET                 (0180)    ret
                                   (0181) 
                                   (0182) 
                                   (0183) .ENDSECTION
                                   (0184) 
                                   (0185) .SECTION
                                   (0186) ;-----------------------------------------------------------------------------
                                   (0187) ;  FUNCTION NAME: Counter8_1_WritePeriod
                                   (0188) ;
                                   (0189) ;  DESCRIPTION:
                                   (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                   (0191) ;-----------------------------------------------------------------------------
                                   (0192) ;
                                   (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                   (0194) ;  RETURNS:   Nothing
                                   (0195) ;  SIDE EFFECTS:
                                   (0196) ;    If the counter user module is stopped, then this value will also be
                                   (0197) ;    latched into the Count register (DR0).
                                   (0198) ;     
                                   (0199) ;    The A and X registers may be modified by this or future implementations
                                   (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0203) ;    functions.
                                   (0204) ;
                                   (0205)  Counter8_1_WritePeriod:
                                   (0206) _Counter8_1_WritePeriod:
                                   (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0992: 60 2D    MOV   REG[45],A     (0208)    mov   reg[Counter8_1_PERIOD_REG], A
                                   (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0994: 7F       RET                 (0210)    ret
                                   (0211) 
                                   (0212) 
                                   (0213) .ENDSECTION
                                   (0214) 
                                   (0215) .SECTION
                                   (0216) ;-----------------------------------------------------------------------------
                                   (0217) ;  FUNCTION NAME: Counter8_1_WriteCompareValue
                                   (0218) ;
                                   (0219) ;  DESCRIPTION:
                                   (0220) ;     Writes compare value into the Compare register (DR2).
                                   (0221) ;-----------------------------------------------------------------------------
                                   (0222) ;
                                   (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                   (0224) ;  RETURNS:      Nothing
                                   (0225) ;  SIDE EFFECTS: 
                                   (0226) ;    The A and X registers may be modified by this or future implementations
                                   (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0230) ;    functions.
                                   (0231) ;
                                   (0232)  Counter8_1_WriteCompareValue:
                                   (0233) _Counter8_1_WriteCompareValue:
                                   (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0995: 60 2E    MOV   REG[46],A     (0235)    mov   reg[Counter8_1_COMPARE_REG], A
                                   (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0997: 7F       RET                 (0237)    ret
                                   (0238) 
                                   (0239) 
                                   (0240) .ENDSECTION
                                   (0241) 
                                   (0242) .SECTION
                                   (0243) ;-----------------------------------------------------------------------------
                                   (0244) ;  FUNCTION NAME: Counter8_1_bReadCompareValue
                                   (0245) ;
                                   (0246) ;  DESCRIPTION:
                                   (0247) ;     Reads the Compare register.
                                   (0248) ;-----------------------------------------------------------------------------
                                   (0249) ;
                                   (0250) ;  ARGUMENTS:    None
                                   (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                   (0252) ;  SIDE EFFECTS: 
                                   (0253) ;    The A and X registers may be modified by this or future implementations
                                   (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0257) ;    functions.
                                   (0258) ;
                                   (0259)  Counter8_1_bReadCompareValue:
                                   (0260) _Counter8_1_bReadCompareValue:
                                   (0261)  bCounter8_1_ReadCompareValue:                   ; this name deprecated
                                   (0262) _bCounter8_1_ReadCompareValue:                   ; this name deprecated
                                   (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0998: 5D 2E    MOV   A,REG[46]     (0264)    mov   A, reg[Counter8_1_COMPARE_REG]
                                   (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
099A: 7F       RET                 (0266)    ret
                                   (0267) 
                                   (0268) 
                                   (0269) .ENDSECTION
                                   (0270) 
                                   (0271) .SECTION
                                   (0272) ;-----------------------------------------------------------------------------
                                   (0273) ;  FUNCTION NAME: Counter8_1_bReadCounter
                                   (0274) ;
                                   (0275) ;  DESCRIPTION:
                                   (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                   (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                   (0278) ;     from the Count to the Compare registers by holding the clock low in
                                   (0279) ;     the PSoC block.
                                   (0280) ;-----------------------------------------------------------------------------
                                   (0281) ;
                                   (0282) ;  ARGUMENTS: None
                                   (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                   (0284) ;  SIDE EFFECTS:
                                   (0285) ;     1) If running, the user module is stopped momentarily and one or more
                                   (0286) ;        counts may be missed.
                                   (0287) ;     2) The A and X registers may be modified by this or future implementations
                                   (0288) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0289) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0290) ;        responsibility to perserve their values across calls to fastcall16 
                                   (0291) ;        functions.
                                   (0292) ;
                                   (0293)  Counter8_1_bReadCounter:
                                   (0294) _Counter8_1_bReadCounter:
                                   (0295)  bCounter8_1_ReadCounter:                        ; this name deprecated
                                   (0296) _bCounter8_1_ReadCounter:                        ; this name deprecated
                                   (0297) 
                                   (0298)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                   (0299)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                   (0300)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                   (0301)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                   (0302)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                   (0303) 
                                   (0304)    RAM_PROLOGUE RAM_USE_CLASS_2
099B: 4F       MOV   X,SP          (0305)    mov   X, SP                                   ; X <- stack frame pointer
099C: 5D 2E    MOV   A,REG[46]     (0306)    mov   A, reg[Counter8_1_COMPARE_REG]          ; Save the Compare register on the stack
099E: 08       PUSH  A             (0307)    push  A                                       ;
099F: 5D 2F    MOV   A,REG[47]     (0308)    mov   A, reg[Counter8_1_CONTROL_REG]          ; Save CR0 (running or stopped state)
09A1: 08       PUSH  A             (0309)    push  A                                       ;
09A2: 41 2F FE AND   REG[47],254   (0310)    Counter8_1_Stop_M                             ; Disable (stop) the Counter if running
09A5: 71 10    OR    F,16          (0311)    M8C_SetBank1                                  ;
09A7: 5D 2D    MOV   A,REG[45]     (0312)    mov   A, reg[Counter8_1_INPUT_REG]            ; save the clock input setting
09A9: 08       PUSH  A             (0313)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                   (0314)                                                  ;   hold the clock low:
09AA: 62 2D 00 MOV   REG[45],0     (0315)    mov   reg[Counter8_1_INPUT_REG], INPUT_REG_NULL
09AD: 70 EF    AND   F,239         (0316)    M8C_SetBank0
                                   (0317)                                                  ; Extract the Count via DR2 register
09AF: 5D 2C    MOV   A,REG[44]     (0318)    mov   A, reg[Counter8_1_COUNTER_REG]          ; DR2 <- DR0
09B1: 5D 2E    MOV   A,REG[46]     (0319)    mov   A, reg[Counter8_1_COMPARE_REG]          ; Stash the Count on the stack
09B3: 08       PUSH  A             (0320)    push  A                                       ;  -stack frame is now 3 bytes
09B4: 52 00    MOV   A,[X+0]       (0321)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
09B6: 60 2E    MOV   REG[46],A     (0322)    mov   reg[Counter8_1_COMPARE_REG], A
09B8: 71 10    OR    F,16          (0323)    M8C_SetBank1                                  ; Restore the counter operation:
09BA: 52 02    MOV   A,[X+2]       (0324)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
09BC: 60 2D    MOV   REG[45],A     (0325)    mov   reg[Counter8_1_INPUT_REG], A            ;
09BE: 70 EF    AND   F,239         (0326)    M8C_SetBank0                                  ;   then re-enable (start) the counter
09C0: 52 01    MOV   A,[X+1]       (0327)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
09C2: 60 2F    MOV   REG[47],A     (0328)    mov   reg[Counter8_1_CONTROL_REG], A          ;     this function was first called
09C4: 18       POP   A             (0329)    pop   A                                       ; Setup the return value
09C5: 38 FD    ADD   SP,253        (0330)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
09C7: 70 3F    AND   F,63
09C9: 71 C0    OR    F,192         (0331)    RAM_EPILOGUE RAM_USE_CLASS_2
09CB: 7F       RET                 (0332)    ret

FILE: lib\adcinc12_1int.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME:   ADCINC12_1INT.asm
                                   (0004) ;;  Version: 5.3, Updated on 2006/06/12 at 15:06:52
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:
                                   (0008) ;;    Assembler source for interrupt routines the 12 bit Incremential
                                   (0009) ;;    A/D converter.
                                   (0010) ;;-----------------------------------------------------------------------------
                                   (0011) ;;  Copyright (c) Cypress MicroSystems 2002-2003. All Rights Reserved.
                                   (0012) ;;*****************************************************************************
                                   (0013) ;;*****************************************************************************
                                   (0014) 
                                   (0015) include "ADCINC12_1.inc"
                                   (0016) include "m8c.inc"
                                   (0017) include "memory.inc"
                                   (0018) 
                                   (0019) ;-----------------------------------------------
                                   (0020) ;  Global Symbols
                                   (0021) ;-----------------------------------------------
                                   (0022) export _ADCINC12_1_CNT_ISR
                                   (0023) export _ADCINC12_1_TMR_ISR
                                   (0024) export  ADCINC12_1_cTimerU
                                   (0025) export  ADCINC12_1_cCounterU
                                   (0026) export _ADCINC12_1_iIncr
                                   (0027) export  ADCINC12_1_iIncr
                                   (0028) export _ADCINC12_1_fIncr
                                   (0029) export  ADCINC12_1_fIncr
                                   (0030) export  ADCINC12_1_bIncrC
                                   (0031) 
                                   (0032) ;-----------------------------------------------
                                   (0033) ; Variable Allocation
                                   (0034) ;-----------------------------------------------
                                   (0035) AREA InterruptRAM (RAM,REL,CON)
                                   (0036)     ADCINC12_1_cTimerU:   BLK  1                 ;The Upper byte of the Timer
                                   (0037)     ADCINC12_1_cCounterU: BLK  1                 ;The Upper byte of the Counter
                                   (0038)    _ADCINC12_1_iIncr:
                                   (0039)     ADCINC12_1_iIncr:     BLK  2                 ;A/D value
                                   (0040)    _ADCINC12_1_fIncr:
                                   (0041)     ADCINC12_1_fIncr:     BLK  1                 ;Data Valid Flag
                                   (0042)     ADCINC12_1_bIncrC:    BLK  1                 ;# of times to run A/D
                                   (0043) 
                                   (0044) 
                                   (0045) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                   (0046) ;---------------------------------------------------
                                   (0047) ; Insert your custom declarations below this banner
                                   (0048) ;---------------------------------------------------
                                   (0049) 
                                   (0050) ;------------------------
                                   (0051) ; Includes
                                   (0052) ;------------------------
                                   (0053) 
                                   (0054) 	
                                   (0055) ;------------------------
                                   (0056) ;  Constant Definitions
                                   (0057) ;------------------------
                                   (0058) 
                                   (0059) 
                                   (0060) ;------------------------
                                   (0061) ; Variable Allocation
                                   (0062) ;------------------------
                                   (0063) 
                                   (0064) 
                                   (0065) ;---------------------------------------------------
                                   (0066) ; Insert your custom declarations above this banner
                                   (0067) ;---------------------------------------------------
                                   (0068) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0069) 
                                   (0070) 
                                   (0071) AREA UserModules (ROM, REL)
                                   (0072) ;-----------------------------------------------
                                   (0073) ;  EQUATES
                                   (0074) ;-----------------------------------------------
                                   (0075) LowByte:   equ 1
                                   (0076) HighByte:  equ 0
                                   (0077) 
                                   (0078) ;-----------------------------------------------------------------------------
                                   (0079) ;  FUNCTION NAME: _ADCINC12_1_CNT_ISR
                                   (0080) ;
                                   (0081) ;  DESCRIPTION:
                                   (0082) ;    Increment the upper (software) half on the counter whenever the
                                   (0083) ;    lower (hardware) half of the counter underflows.
                                   (0084) ;
                                   (0085) ;-----------------------------------------------------------------------------
                                   (0086) ;
                                   (0087) _ADCINC12_1_CNT_ISR:
09CC: 76 0C    INC   [12]          (0088)    inc [ADCINC12_1_cCounterU]
                                   (0089)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                   (0090)    ;---------------------------------------------------
                                   (0091)    ; Insert your custom code below this banner
                                   (0092)    ;---------------------------------------------------
                                   (0093)    ;   NOTE: interrupt service routines must preserve
                                   (0094)    ;   the values of the A and X CPU registers.
                                   (0095) 
                                   (0096)    ;---------------------------------------------------
                                   (0097)    ; Insert your custom code above this banner
                                   (0098)    ;---------------------------------------------------
                                   (0099)    ;@PSoC_UserCode_END@ (Do not change this line.)
09CE: 7E       RETI                (0100)    reti
                                   (0101) 
                                   (0102) ;-----------------------------------------------------------------------------
                                   (0103) ;  FUNCTION NAME: _ADCINC12_1_TMR_ISR
                                   (0104) ;
                                   (0105) ;  DESCRIPTION:
                                   (0106) ;    This routine allows the counter to collect data for 64 timer cycles
                                   (0107) ;    This routine then holds the integrater in reset for one cycle while
                                   (0108) ;    the A/D value is calculated.
                                   (0109) ;
                                   (0110) ;-----------------------------------------------------------------------------
                                   (0111) ;
                                   (0112) _ADCINC12_1_TMR_ISR:
09CF: 7A 0B    DEC   [11]          (0113)    dec [ADCINC12_1_cTimerU]
                                   (0114) ;  if(upper count >0 )
09D1: A0 02    JZ    0x09D4        (0115)    jz  else1
09D3: 7E       RETI                (0116)       reti
                                   (0117)    else1:;(upper count decremented to 0)
09D4: 49 83 10 TST   REG[131],16   (0118)       tst reg[ADCINC12_1_AtoDcr3],10h
09D7: A0 0F    JZ    0x09E7        (0119)       jz   else2
                                   (0120) ;     if(A/D has been in reset mode)
09D9: 40       NOP                 (0121)          nop                                     ; Dummy statement to keep time
                                   (0122)                                              ; between turning on and off counter
                                   (0123)                          ; the same.
09DA: 62 27 05 MOV   REG[39],5     (0124)          mov reg[ADCINC12_1_CounterCR0],(ADCINC12_1_fDBLK_ENABLE|ADCINC12_1_fPULSE_WIDE)    ; Enable Counter
09DD: 41 83 EF AND   REG[131],239  (0125)          and reg[ADCINC12_1_AtoDcr3],~10h        ; Enable Analog Integrator
                                   (0126) IF ADCINC12_1_NoAZ
09E0: 41 82 DF AND   REG[130],223  (0127)          and reg[ADCINC12_1_AtoDcr2],~20h
                                   (0128) ENDIF
09E3: 55 0B 40 MOV   [11],64       (0129)          mov [ADCINC12_1_cTimerU],(1<<(ADCINC12_1_NUMBITS - 6))
                                   (0130)                                                  ; This will be the real counter value
09E6: 7E       RETI                (0131)          reti
                                   (0132)       else2:;(A/D has been in integrate mode)
09E7: 71 10    OR    F,16          (0133)          M8C_SetBank1
09E9: 41 25 0F AND   REG[37],15    (0134)          and reg[ADCINC12_1_CounterSL], 0x0F     ; Disable input to counter
09EC: 70 EF    AND   F,239         (0135)          M8C_SetBank0
                                   (0136) 
09EE: 71 01    OR    F,1           (0137)          or  F,01h                               ;Enable the interrupts
                                   (0138)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0139)          ; Good place to add code to switch inputs for multiplexed input to ADC
                                   (0140)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0141)          ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0142)          ;---------------------------------------------------
                                   (0143)          ; Insert your custom code below this banner
                                   (0144)          ;---------------------------------------------------
                                   (0145)          ;   NOTE: interrupt service routines must preserve
                                   (0146)          ;   the values of the A and X CPU registers.
                                   (0147) 
                                   (0148)          ;---------------------------------------------------
                                   (0149)          ; Insert your custom code above this banner
                                   (0150)          ;---------------------------------------------------
                                   (0151)          ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0152) 
                                   (0153) IF ADCINC12_1_NoAZ
09F0: 43 82 20 OR    REG[130],32   (0154)          or  reg[ADCINC12_1_AtoDcr2],20h         ;Reset Integrator
                                   (0155) ENDIF
09F3: 43 83 10 OR    REG[131],16   (0156)          or  reg[ADCINC12_1_AtoDcr3],10h
09F6: 08       PUSH  A             (0157)          push A
09F7: 5D 24    MOV   A,REG[36]     (0158)          mov A, reg[ADCINC12_1_CounterDR0]       ;read Counter
09F9: 5D 26    MOV   A,REG[38]     (0159)          mov A, reg[ADCINC12_1_CounterDR2]       ;now you really read the data
                                   (0160) 
09FB: 62 27 00 MOV   REG[39],0     (0161)          mov reg[ADCINC12_1_CounterCR0],00h      ;disable counter
09FE: 71 10    OR    F,16          (0162)      M8C_SetBank1
0A00: 43 25 40 OR    REG[37],64    (0163)          or  reg[ADCINC12_1_CounterSL],ADCINC12_1_CNTINPUT  ; Reconnect counter to comparitor
0A03: 70 EF    AND   F,239         (0164)      M8C_SetBank0
                                   (0165) 
                                   (0166) 
0A05: 73       CPL   A             (0167)          cpl A
0A06: 3C 0C 20 CMP   [12],32       (0168)          cmp [ADCINC12_1_cCounterU],(1<<(ADCINC12_1_NUMBITS - 7))
0A09: B0 05    JNZ   0x0A0F        (0169)          jnz endif10
                                   (0170) ;        if(max positive value)
0A0B: 7A 0C    DEC   [12]          (0171)             dec [ADCINC12_1_cCounterU]
0A0D: 50 FF    MOV   A,255         (0172)             mov A,ffh
                                   (0173)          endif10:
0A0F: 68 0C    ASR   [12]          (0174)          asr [ADCINC12_1_cCounterU]              ; divide by 4
0A11: 6D       RRC   A             (0175)          rrc A
0A12: 68 0C    ASR   [12]          (0176)          asr [ADCINC12_1_cCounterU]
0A14: 6D       RRC   A             (0177)          rrc A
                                   (0178) ;
0A15: 5F 0D 0C MOV   [13],[12]     (0179)          mov [(ADCINC12_1_iIncr + HighByte)],[ADCINC12_1_cCounterU]
0A18: 53 0E    MOV   [14],A        (0180)          mov [(ADCINC12_1_iIncr + LowByte)],A
0A1A: 55 0F 01 MOV   [15],1        (0181)          mov [ADCINC12_1_fIncr],01h              ;Set AD data flag
0A1D: 18       POP   A             (0182)          pop A
                                   (0183)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0184)          ; User code here for interrupt system.
                                   (0185)          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0186) 
                                   (0187)          ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                   (0188)          ;---------------------------------------------------
                                   (0189)          ; Insert your custom code below this banner
                                   (0190)          ;---------------------------------------------------
                                   (0191)          ;   NOTE: interrupt service routines must preserve
                                   (0192)          ;   the values of the A and X CPU registers.
                                   (0193) 
                                   (0194)          ;---------------------------------------------------
                                   (0195)          ; Insert your custom code above this banner
                                   (0196)          ;---------------------------------------------------
                                   (0197)          ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0198) 
0A1E: 3C 10 00 CMP   [16],0        (0199)          cmp [ADCINC12_1_bIncrC],00h
0A21: A0 17    JZ    0x0A39        (0200)          jz  endif3
                                   (0201) ;        if(ADCINC12_1_bIncrC is not zero)
0A23: 7A 10    DEC   [16]          (0202)             dec [ADCINC12_1_bIncrC]
0A25: B0 13    JNZ   0x0A39        (0203)             jnz endif4
                                   (0204) ;           if(ADCINC12_1_bIncrC has decremented down to zero to 0)
0A27: 62 23 00 MOV   REG[35],0     (0205)                mov reg[ADCINC12_1_TimerCR0],00h      ;disable the Timer
0A2A: 62 27 00 MOV   REG[39],0     (0206)                mov reg[ADCINC12_1_CounterCR0],00h    ;disable the Counter
0A2D: 40       NOP                 (0207)                nop
0A2E: 40       NOP                 (0208)                nop
0A2F: 41 E1 FC AND   REG[225],252  (0209)                and reg[INT_MSK1],~(ADCINC12_1_TimerMask | ADCINC12_1_CounterMask)
                                   (0210)                                                            ;Disable both interrupts
                                   (0211) IF ADCINC12_1_NoAZ
0A32: 43 82 20 OR    REG[130],32   (0212)                or  reg[ADCINC12_1_AtoDcr2],20h       ;Reset Integrator
                                   (0213) ENDIF
0A35: 43 83 10 OR    REG[131],16   (0214)                or  reg[ADCINC12_1_AtoDcr3],10h
0A38: 7E       RETI                (0215)                reti
                                   (0216)             endif4:;
                                   (0217)          endif3:;
                                   (0218)       endif2:;
0A39: 55 0B 01 MOV   [11],1        (0219)       mov [ADCINC12_1_cTimerU],1                     ;Set Timer for one cycle of reset
0A3C: 55 0C E0 MOV   [12],224      (0220)       mov [ADCINC12_1_cCounterU],(-(1<<(ADCINC12_1_NUMBITS - 7)))  ;Set Counter hardware for easy enable
0A3F: 62 25 FF MOV   REG[37],255   (0221)       mov reg[ADCINC12_1_CounterDR1],ffh
0A42: 7E       RETI                (0222)       reti

FILE: .\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Radio Panel 14.May.2009
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>
(0006) #include "PSoCAPI.h"
(0007) #include "hbheader.h"
(0008) #include "stdlib.h"
(0009) //A\x07MA S\xF5RESI
(0010) #define SLAVE_ADDRESS 21
(0011) 
(0012) void LCD_PrintInt(int val),disp_msg(BYTE line, BYTE row, char *msgm);
(0013) void LCD_PrintFloat(float vall), clrdisp(void);
(0014) 
(0015) BYTE    txBuffer[32];  
(0016) BYTE    rxBuffer[32]; 
(0017) BYTE	lastport;
(0018) BYTE 	adc_res[16] = {0}; 
(0019) BYTE	ekran_res[4] = {0};  // [0]=NAV ACT, [1]=NAV STB
(0020) BYTE	sol_intkisim=0, sol_decisim=0, sag_intkisim=0, sag_decisim=0;
(0021) BYTE 	dummy1;
(0022) 
(0023) BYTE    status;  
(0024) BYTE *ptr;
(0025) //char *intRet;
(0026) char intRet[8];
(0027) char TABELA[]="  \x06\x01\x02\x02\x03\x06  \x04\x06\x07\x05  ";
(0028) 
(0029) WORD cnt;
(0030) WORD acnt;
(0031) WORD Timeout_d;
(0032) void  I2Oku(void), I2Yaz(void);
(0033) void Int_tostring(int val);
(0034) 
(0035) #pragma interrupt_handler Counter8_1_ISR, encoder_isr
(0036) void Counter8_1_ISR(void); void encoder_isr(void);
(0037) 
(0038) void dly(long int mS), init_environment(void), init_cgram(void);
(0039) 
(0040) void Counter8_1_ISR() {Counter8_1_DisableInt(); Counter8_1_Stop(); DELAY_CLR;}
__text_start:
_Counter8_1_ISR:
0A43: 71 C0    OR    F,192
0A45: 08       PUSH  A
0A46: 5D D0    MOV   A,REG[208]
0A48: 08       PUSH  A
0A49: 5D D3    MOV   A,REG[211]
0A4B: 08       PUSH  A
0A4C: 5D D4    MOV   A,REG[212]
0A4E: 08       PUSH  A
0A4F: 5D D5    MOV   A,REG[213]
0A51: 08       PUSH  A
0A52: 62 D0 01 MOV   REG[208],1
0A55: 51 42    MOV   A,[__r0]
0A57: 08       PUSH  A
0A58: 51 41    MOV   A,[__r1]
0A5A: 08       PUSH  A
0A5B: 51 40    MOV   A,[__r2]
0A5D: 08       PUSH  A
0A5E: 51 3F    MOV   A,[__r3]
0A60: 08       PUSH  A
0A61: 51 3E    MOV   A,[__r4]
0A63: 08       PUSH  A
0A64: 51 3D    MOV   A,[__r5]
0A66: 08       PUSH  A
0A67: 51 3C    MOV   A,[__r6]
0A69: 08       PUSH  A
0A6A: 51 3B    MOV   A,[__r7]
0A6C: 08       PUSH  A
0A6D: 51 3A    MOV   A,[__r8]
0A6F: 08       PUSH  A
0A70: 51 39    MOV   A,[__r9]
0A72: 08       PUSH  A
0A73: 51 38    MOV   A,[__r10]
0A75: 08       PUSH  A
0A76: 51 37    MOV   A,[__r11]
0A78: 08       PUSH  A
0A79: 51 36    MOV   A,[__rX]
0A7B: 08       PUSH  A
0A7C: 51 35    MOV   A,[__rY]
0A7E: 08       PUSH  A
0A7F: 51 34    MOV   A,[__rZ]
0A81: 08       PUSH  A
0A82: 10       PUSH  X
0A83: 7C 09 86 LCALL 0x0986
0A86: 7C 09 8E LCALL 0x098E
0A89: 20       POP   X
0A8A: 62 D0 01 MOV   REG[208],1
0A8D: 51 5B    MOV   A,[STATUS+1]
0A8F: 21 FE    AND   A,254
0A91: 62 D0 01 MOV   REG[208],1
0A94: 53 41    MOV   [__r1],A
0A96: 62 D0 01 MOV   REG[208],1
0A99: 51 5A    MOV   A,[STATUS]
0A9B: 62 D0 01 MOV   REG[208],1
0A9E: 53 42    MOV   [__r0],A
0AA0: 51 41    MOV   A,[__r1]
0AA2: 08       PUSH  A
0AA3: 51 42    MOV   A,[__r0]
0AA5: 62 D0 01 MOV   REG[208],1
0AA8: 53 5A    MOV   [STATUS],A
0AAA: 18       POP   A
0AAB: 53 5B    MOV   [STATUS+1],A
0AAD: 62 D0 01 MOV   REG[208],1
0AB0: 18       POP   A
0AB1: 53 34    MOV   [__rZ],A
0AB3: 18       POP   A
0AB4: 53 35    MOV   [__rY],A
0AB6: 18       POP   A
0AB7: 53 36    MOV   [__rX],A
0AB9: 18       POP   A
0ABA: 53 37    MOV   [__r11],A
0ABC: 18       POP   A
0ABD: 53 38    MOV   [__r10],A
0ABF: 18       POP   A
0AC0: 53 39    MOV   [__r9],A
0AC2: 18       POP   A
0AC3: 53 3A    MOV   [__r8],A
0AC5: 18       POP   A
0AC6: 53 3B    MOV   [__r7],A
0AC8: 18       POP   A
0AC9: 53 3C    MOV   [__r6],A
0ACB: 18       POP   A
0ACC: 53 3D    MOV   [__r5],A
0ACE: 18       POP   A
0ACF: 53 3E    MOV   [__r4],A
0AD1: 18       POP   A
0AD2: 53 3F    MOV   [__r3],A
0AD4: 18       POP   A
0AD5: 53 40    MOV   [__r2],A
0AD7: 18       POP   A
0AD8: 53 41    MOV   [__r1],A
0ADA: 18       POP   A
0ADB: 53 42    MOV   [__r0],A
0ADD: 18       POP   A
0ADE: 60 D5    MOV   REG[213],A
0AE0: 18       POP   A
0AE1: 60 D4    MOV   REG[212],A
0AE3: 18       POP   A
0AE4: 60 D3    MOV   REG[211],A
0AE6: 18       POP   A
0AE7: 60 D0    MOV   REG[208],A
0AE9: 18       POP   A
0AEA: 7E       RETI  
(0041) 
(0042) const char CG[8][8][6] = {
(0043)     "     "," X  X"," XX  ","XXX  "," XXX ","X   X"," XX  ","  X  ",
(0044)     "     "," X  X"," X X ","X    ","  X  ","XX XX"," X X ","  X  ",
(0045)     "     "," X  X"," X X ","XX   ","  X  ","X X X"," XX  ","  X  ",
(0046)     "     "," X  X"," X X ","X    ","  X  ","X   X"," X X ","  X  ",
(0047)     "     ","  XX "," XX  ","XXX  ","  X  ","X   X"," X X ","  X  ",
(0048)     "     ","     ","     ","     ","     ","     ","     ","     ",
(0049)     "     ","     ","     ","     ","     ","     ","     ","     ",
(0050)     "     ","     ","     ","     ","     ","     ","     ","     "  };
(0051) 
(0052) void encoder_isr(void){
(0053) 
(0054) }
_encoder_isr:
0AEB: 7E       RETI  
(0055) 		
(0056) void init_environment()
(0057) {  	PRT1DR |= 0xA0;		//release et pinleri
_init_environment:
0AEC: 43 04 A0 OR    REG[4],160
(0058) 	I2CHW_1_Start(); I2CHW_1_EnableSlave(); I2CHW_1_EnableInt();
0AEF: 10       PUSH  X
0AF0: 7C 07 CA LCALL 0x07CA
0AF3: 7C 07 DB LCALL 0x07DB
0AF6: 7C 07 CB LCALL 0x07CB
(0059) 	I2CHW_1_InitRamRead(txBuffer,32);
0AF9: 50 20    MOV   A,32
0AFB: 08       PUSH  A
0AFC: 50 00    MOV   A,0
0AFE: 08       PUSH  A
0AFF: 50 D9    MOV   A,217
0B01: 08       PUSH  A
0B02: 7C 09 40 LCALL 0x0940
0B05: 38 FD    ADD   SP,253
(0060)     I2CHW_1_InitWrite(rxBuffer,32);
0B07: 50 20    MOV   A,32
0B09: 08       PUSH  A
0B0A: 50 00    MOV   A,0
0B0C: 08       PUSH  A
0B0D: 50 B9    MOV   A,185
0B0F: 08       PUSH  A
0B10: 7C 09 02 LCALL 0x0902
0B13: 38 FD    ADD   SP,253
0B15: 20       POP   X
(0061)                   // Initialize LCD  
(0062) 	M8C_EnableGInt;	M8C_EnableIntMask (INT_MSK0, INT_MSK0_GPIO);
0B16: 71 01    OR    F,1
0B18: 43 E0 20 OR    REG[224],32
(0063)   
(0064)     ekran_res[0]=124; lastport=0;
0B1B: 62 D0 00 MOV   REG[208],0
0B1E: 55 F9 7C MOV   [ekran_res],124
0B21: 62 D0 01 MOV   REG[208],1
0B24: 55 62 00 MOV   [lastport],0
(0065) 
(0066)     }
0B27: 7F       RET   
(0067)     
(0068) void init_cgram()
(0069) 	
(0070) { BYTE i,j,k, shift,addr,data,addrb,datab;
_init_cgram:
  addr                 --> X+7
  data                 --> X+6
  datab                --> X+5
  addrb                --> X+4
  i                    --> X+3
  j                    --> X+2
  k                    --> X+1
  shift                --> X+0
0B28: 10       PUSH  X
0B29: 4F       MOV   X,SP
0B2A: 38 08    ADD   SP,8
(0071) 	for(i=0;i<8;i++) for(j=0;j<8;j++)
0B2C: 56 03 00 MOV   [X+3],0
0B2F: 82 22    JMP   0x0D52
0B31: 56 02 00 MOV   [X+2],0
0B34: 82 16    JMP   0x0D4B
(0072)   	{ addr=0x40|i*8|j; k=0; data=0; shift=0x10; 
0B36: 52 03    MOV   A,[X+3]
0B38: 62 D0 01 MOV   REG[208],1
0B3B: 64       ASL   A
0B3C: 64       ASL   A
0B3D: 64       ASL   A
0B3E: 53 42    MOV   [__r0],A
0B40: 2E 42 40 OR    [__r0],64
0B43: 52 02    MOV   A,[X+2]
0B45: 2C 42    OR    [__r0],A
0B47: 51 42    MOV   A,[__r0]
0B49: 54 07    MOV   [X+7],A
0B4B: 56 01 00 MOV   [X+1],0
0B4E: 56 06 00 MOV   [X+6],0
0B51: 56 00 10 MOV   [X+0],16
0B54: 80 6F    JMP   0x0BC4
(0073)     	while(shift){ if(CG[j][i][k]=='X') data|=shift; k++; shift>>=1; }
0B56: 62 D0 01 MOV   REG[208],1
0B59: 52 02    MOV   A,[X+2]
0B5B: 53 41    MOV   [__r1],A
0B5D: 50 00    MOV   A,0
0B5F: 08       PUSH  A
0B60: 51 41    MOV   A,[__r1]
0B62: 08       PUSH  A
0B63: 50 00    MOV   A,0
0B65: 08       PUSH  A
0B66: 50 30    MOV   A,48
0B68: 08       PUSH  A
0B69: 7C 13 BD LCALL __mul16
0B6C: 38 FC    ADD   SP,252
0B6E: 51 36    MOV   A,[__rX]
0B70: 53 41    MOV   [__r1],A
0B72: 51 35    MOV   A,[__rY]
0B74: 53 42    MOV   [__r0],A
0B76: 06 41 A0 ADD   [__r1],160
0B79: 0E 42 01 ADC   [__r0],1
0B7C: 52 03    MOV   A,[X+3]
0B7E: 53 3F    MOV   [__r3],A
0B80: 50 00    MOV   A,0
0B82: 08       PUSH  A
0B83: 51 3F    MOV   A,[__r3]
0B85: 08       PUSH  A
0B86: 50 00    MOV   A,0
0B88: 08       PUSH  A
0B89: 50 06    MOV   A,6
0B8B: 08       PUSH  A
0B8C: 7C 13 BD LCALL __mul16
0B8F: 38 FC    ADD   SP,252
0B91: 51 36    MOV   A,[__rX]
0B93: 53 3F    MOV   [__r3],A
0B95: 51 35    MOV   A,[__rY]
0B97: 53 40    MOV   [__r2],A
0B99: 51 3F    MOV   A,[__r3]
0B9B: 02 41    ADD   A,[__r1]
0B9D: 53 41    MOV   [__r1],A
0B9F: 51 40    MOV   A,[__r2]
0BA1: 0A 42    ADC   A,[__r0]
0BA3: 53 42    MOV   [__r0],A
0BA5: 52 01    MOV   A,[X+1]
0BA7: 02 41    ADD   A,[__r1]
0BA9: 53 41    MOV   [__r1],A
0BAB: 50 00    MOV   A,0
0BAD: 0A 42    ADC   A,[__r0]
0BAF: 10       PUSH  X
0BB0: 58 41    MOV   X,[__r1]
0BB2: 28       ROMX  
0BB3: 20       POP   X
0BB4: 39 58    CMP   A,88
0BB6: B0 07    JNZ   0x0BBE
0BB8: 52 06    MOV   A,[X+6]
0BBA: 2B 00    OR    A,[X+0]
0BBC: 54 06    MOV   [X+6],A
0BBE: 77 01    INC   [X+1]
0BC0: 70 FB    AND   F,251
0BC2: 6F 00    RRC   [X+0]
0BC4: 3D 00 00 CMP   [X+0],0
0BC7: BF 8E    JNZ   0x0B56
(0074) 			RS0;RW0;EN0;dly(1); 
0BC9: 5D 00    MOV   A,REG[0]
0BCB: 62 D0 01 MOV   REG[208],1
0BCE: 53 42    MOV   [__r0],A
0BD0: 26 42 DF AND   [__r0],223
0BD3: 51 42    MOV   A,[__r0]
0BD5: 60 00    MOV   REG[0],A
0BD7: 5D 00    MOV   A,REG[0]
0BD9: 53 42    MOV   [__r0],A
0BDB: 26 42 BF AND   [__r0],191
0BDE: 51 42    MOV   A,[__r0]
0BE0: 60 00    MOV   REG[0],A
0BE2: 5D 00    MOV   A,REG[0]
0BE4: 53 42    MOV   [__r0],A
0BE6: 26 42 EF AND   [__r0],239
0BE9: 51 42    MOV   A,[__r0]
0BEB: 60 00    MOV   REG[0],A
0BED: 50 00    MOV   A,0
0BEF: 08       PUSH  A
0BF0: 08       PUSH  A
0BF1: 08       PUSH  A
0BF2: 50 01    MOV   A,1
0BF4: 08       PUSH  A
0BF5: 92 A6    CALL  _dly
(0075)     		addrb=(addr>>4); addrb|=BSET_4; addrb&=BCLR_5; addrb&=BCLR_6;
0BF7: 52 07    MOV   A,[X+7]
0BF9: 62 D0 01 MOV   REG[208],1
0BFC: 67       ASR   A
0BFD: 67       ASR   A
0BFE: 67       ASR   A
0BFF: 67       ASR   A
0C00: 21 0F    AND   A,15
0C02: 54 04    MOV   [X+4],A
0C04: 52 04    MOV   A,[X+4]
0C06: 29 10    OR    A,16
0C08: 54 04    MOV   [X+4],A
0C0A: 52 04    MOV   A,[X+4]
0C0C: 21 DF    AND   A,223
0C0E: 54 04    MOV   [X+4],A
0C10: 52 04    MOV   A,[X+4]
0C12: 21 BF    AND   A,191
0C14: 54 04    MOV   [X+4],A
(0076)     		LCD_BUS=(addrb); EN1;dly(1);EN0;dly(1);addrb=(addr); addrb|=BSET_4; addrb&=BCLR_5; addrb&=BCLR_6;
0C16: 52 04    MOV   A,[X+4]
0C18: 60 00    MOV   REG[0],A
0C1A: 43 00 10 OR    REG[0],16
0C1D: 50 00    MOV   A,0
0C1F: 08       PUSH  A
0C20: 08       PUSH  A
0C21: 08       PUSH  A
0C22: 50 01    MOV   A,1
0C24: 08       PUSH  A
0C25: 92 76    CALL  _dly
0C27: 38 F8    ADD   SP,248
0C29: 5D 00    MOV   A,REG[0]
0C2B: 62 D0 01 MOV   REG[208],1
0C2E: 53 42    MOV   [__r0],A
0C30: 26 42 EF AND   [__r0],239
0C33: 51 42    MOV   A,[__r0]
0C35: 60 00    MOV   REG[0],A
0C37: 50 00    MOV   A,0
0C39: 08       PUSH  A
0C3A: 08       PUSH  A
0C3B: 08       PUSH  A
0C3C: 50 01    MOV   A,1
0C3E: 08       PUSH  A
0C3F: 92 5C    CALL  _dly
0C41: 52 07    MOV   A,[X+7]
0C43: 54 04    MOV   [X+4],A
0C45: 62 D0 01 MOV   REG[208],1
0C48: 52 04    MOV   A,[X+4]
0C4A: 29 10    OR    A,16
0C4C: 54 04    MOV   [X+4],A
0C4E: 52 04    MOV   A,[X+4]
0C50: 21 DF    AND   A,223
0C52: 54 04    MOV   [X+4],A
0C54: 52 04    MOV   A,[X+4]
0C56: 21 BF    AND   A,191
0C58: 54 04    MOV   [X+4],A
(0077)     		LCD_BUS=(addrb); EN1;dly(1);EN0;dly(1);
0C5A: 52 04    MOV   A,[X+4]
0C5C: 60 00    MOV   REG[0],A
0C5E: 43 00 10 OR    REG[0],16
0C61: 50 00    MOV   A,0
0C63: 08       PUSH  A
0C64: 08       PUSH  A
0C65: 08       PUSH  A
0C66: 50 01    MOV   A,1
0C68: 08       PUSH  A
0C69: 92 32    CALL  _dly
0C6B: 38 F8    ADD   SP,248
0C6D: 5D 00    MOV   A,REG[0]
0C6F: 62 D0 01 MOV   REG[208],1
0C72: 53 42    MOV   [__r0],A
0C74: 26 42 EF AND   [__r0],239
0C77: 51 42    MOV   A,[__r0]
0C79: 60 00    MOV   REG[0],A
0C7B: 50 00    MOV   A,0
0C7D: 08       PUSH  A
0C7E: 08       PUSH  A
0C7F: 08       PUSH  A
0C80: 50 01    MOV   A,1
0C82: 08       PUSH  A
0C83: 92 18    CALL  _dly
(0078)     		
(0079)     		RS1;RW0;dly(1); 
0C85: 43 00 20 OR    REG[0],32
0C88: 5D 00    MOV   A,REG[0]
0C8A: 62 D0 01 MOV   REG[208],1
0C8D: 53 42    MOV   [__r0],A
0C8F: 26 42 BF AND   [__r0],191
0C92: 51 42    MOV   A,[__r0]
0C94: 60 00    MOV   REG[0],A
0C96: 50 00    MOV   A,0
0C98: 08       PUSH  A
0C99: 08       PUSH  A
0C9A: 08       PUSH  A
0C9B: 50 01    MOV   A,1
0C9D: 08       PUSH  A
0C9E: 91 FD    CALL  _dly
0CA0: 38 F8    ADD   SP,248
(0080)     		datab=(data>>4); datab|=BSET_4; datab|=BSET_5; datab&=BCLR_6;
0CA2: 52 06    MOV   A,[X+6]
0CA4: 62 D0 01 MOV   REG[208],1
0CA7: 67       ASR   A
0CA8: 67       ASR   A
0CA9: 67       ASR   A
0CAA: 67       ASR   A
0CAB: 21 0F    AND   A,15
0CAD: 54 05    MOV   [X+5],A
0CAF: 52 05    MOV   A,[X+5]
0CB1: 29 10    OR    A,16
0CB3: 54 05    MOV   [X+5],A
0CB5: 52 05    MOV   A,[X+5]
0CB7: 29 20    OR    A,32
0CB9: 54 05    MOV   [X+5],A
0CBB: 52 05    MOV   A,[X+5]
0CBD: 21 BF    AND   A,191
0CBF: 54 05    MOV   [X+5],A
(0081)     		LCD_BUS=(datab); EN1;dly(1);EN0;dly(1);datab=(data); datab|=BSET_4; datab|=BSET_5; datab&=BCLR_6;
0CC1: 52 05    MOV   A,[X+5]
0CC3: 60 00    MOV   REG[0],A
0CC5: 43 00 10 OR    REG[0],16
0CC8: 50 00    MOV   A,0
0CCA: 08       PUSH  A
0CCB: 08       PUSH  A
0CCC: 08       PUSH  A
0CCD: 50 01    MOV   A,1
0CCF: 08       PUSH  A
0CD0: 91 CB    CALL  _dly
0CD2: 5D 00    MOV   A,REG[0]
0CD4: 62 D0 01 MOV   REG[208],1
0CD7: 53 42    MOV   [__r0],A
0CD9: 26 42 EF AND   [__r0],239
0CDC: 51 42    MOV   A,[__r0]
0CDE: 60 00    MOV   REG[0],A
0CE0: 50 00    MOV   A,0
0CE2: 08       PUSH  A
0CE3: 08       PUSH  A
0CE4: 08       PUSH  A
0CE5: 50 01    MOV   A,1
0CE7: 08       PUSH  A
0CE8: 91 B3    CALL  _dly
0CEA: 38 F8    ADD   SP,248
0CEC: 52 06    MOV   A,[X+6]
0CEE: 54 05    MOV   [X+5],A
0CF0: 62 D0 01 MOV   REG[208],1
0CF3: 52 05    MOV   A,[X+5]
0CF5: 29 10    OR    A,16
0CF7: 54 05    MOV   [X+5],A
0CF9: 52 05    MOV   A,[X+5]
0CFB: 29 20    OR    A,32
0CFD: 54 05    MOV   [X+5],A
0CFF: 52 05    MOV   A,[X+5]
0D01: 21 BF    AND   A,191
0D03: 54 05    MOV   [X+5],A
(0082)     		LCD_BUS=(datab); EN1;dly(1);EN0;dly(1);
0D05: 52 05    MOV   A,[X+5]
0D07: 60 00    MOV   REG[0],A
0D09: 43 00 10 OR    REG[0],16
0D0C: 50 00    MOV   A,0
0D0E: 08       PUSH  A
0D0F: 08       PUSH  A
0D10: 08       PUSH  A
0D11: 50 01    MOV   A,1
0D13: 08       PUSH  A
0D14: 91 87    CALL  _dly
0D16: 5D 00    MOV   A,REG[0]
0D18: 62 D0 01 MOV   REG[208],1
0D1B: 53 42    MOV   [__r0],A
0D1D: 26 42 EF AND   [__r0],239
0D20: 51 42    MOV   A,[__r0]
0D22: 60 00    MOV   REG[0],A
0D24: 50 00    MOV   A,0
0D26: 08       PUSH  A
0D27: 08       PUSH  A
0D28: 08       PUSH  A
0D29: 50 01    MOV   A,1
0D2B: 08       PUSH  A
0D2C: 91 6F    CALL  _dly
0D2E: 38 F8    ADD   SP,248
(0083)    			RS0; RW0;} }
0D30: 5D 00    MOV   A,REG[0]
0D32: 62 D0 01 MOV   REG[208],1
0D35: 53 42    MOV   [__r0],A
0D37: 26 42 DF AND   [__r0],223
0D3A: 51 42    MOV   A,[__r0]
0D3C: 60 00    MOV   REG[0],A
0D3E: 5D 00    MOV   A,REG[0]
0D40: 53 42    MOV   [__r0],A
0D42: 26 42 BF AND   [__r0],191
0D45: 51 42    MOV   A,[__r0]
0D47: 60 00    MOV   REG[0],A
0D49: 77 02    INC   [X+2]
0D4B: 3D 02 08 CMP   [X+2],8
0D4E: CD E7    JC    0x0B36
0D50: 77 03    INC   [X+3]
0D52: 3D 03 08 CMP   [X+3],8
0D55: CD DB    JC    0x0B31
0D57: 38 F8    ADD   SP,248
0D59: 20       POP   X
0D5A: 7F       RET   
(0084) 
(0085) 
(0086) void init_delay_counter(long int mSn, long int DC)
(0087) {   Counter8_1_WritePeriod(mSn); Counter8_1_WriteCompareValue(DC); Counter8_1_EnableInt();DELAY_SET; Counter8_1_Start();}
_init_delay_counter:
  DC                   --> X-11
  mSn                  --> X-7
0D5B: 10       PUSH  X
0D5C: 4F       MOV   X,SP
0D5D: 62 D0 01 MOV   REG[208],1
0D60: 52 FC    MOV   A,[X-4]
0D62: 10       PUSH  X
0D63: 7C 09 92 LCALL 0x0992
0D66: 20       POP   X
0D67: 62 D0 01 MOV   REG[208],1
0D6A: 52 F8    MOV   A,[X-8]
0D6C: 10       PUSH  X
0D6D: 7C 09 95 LCALL 0x0995
0D70: 7C 09 82 LCALL 0x0982
0D73: 20       POP   X
0D74: 62 D0 01 MOV   REG[208],1
0D77: 2E 5B 01 OR    [STATUS+1],1
0D7A: 10       PUSH  X
0D7B: 7C 09 8A LCALL 0x098A
0D7E: 20       POP   X
0D7F: 20       POP   X
0D80: 7F       RET   
(0088) /* ---------------------------------------------------------------------- */
(0089) 
(0090) void main()
(0091) {
_main:
0D81: 10       PUSH  X
0D82: 4F       MOV   X,SP
0D83: 38 02    ADD   SP,2
(0092) // NAV LIMITS   = 108.00-117.95 (2048--6037)
(0093) // COMM LIMITS  = 118.00-136.97 (6144--13975)
(0094) // XPNDR LIMITS = 0000-7777		(Octal system)
(0095) // ADF LIMITS   = 0100.0-1799.9
(0096) 
(0097) 	init_environment(); LCD_1_Start(); LCD_1_InitBG(LCD_1_LINE_BG); //init_cgram();
0D85: 9D 65    CALL  _init_environment
0D87: 10       PUSH  X
0D88: 7C 06 51 LCALL 0x0651
0D8B: 50 01    MOV   A,1
0D8D: 7C 07 96 LCALL 0x0796
(0098)  
(0099)    LCD_1_Position(0,0);
0D90: 50 00    MOV   A,0
0D92: 5C       MOV   X,A
0D93: 7C 06 C4 LCALL 0x06C4
(0100)    LCD_1_PrCString("  RUDDER  TRIM  ");
0D96: 50 03    MOV   A,3
0D98: 08       PUSH  A
0D99: 50 31    MOV   A,49
0D9B: 5C       MOV   X,A
0D9C: 18       POP   A
0D9D: 7C 05 46 LCALL 0x0546
0DA0: 20       POP   X
0DA1: 80 F4    JMP   0x0E96
(0101) 
(0102) 	
(0103)  	while(1)  {
(0104) 			//txBuffer[0]=
(0105) 
(0106) 			I2Oku();
0DA3: 91 7E    CALL  _I2Oku
(0107) //DIKKAT REMARKLI SATIRLAR ALPS marka ICIN KONULDU. HEM HIGH HEM LOW DARBESI ICIN
(0108) 			dummy1 = PRT3DR^lastport;	//durumu degisen pin varmi?
0DA5: 5D 0C    MOV   A,REG[12]
0DA7: 62 D0 01 MOV   REG[208],1
0DAA: 53 42    MOV   [__r0],A
0DAC: 62 D0 01 MOV   REG[208],1
0DAF: 51 62    MOV   A,[lastport]
0DB1: 62 D0 01 MOV   REG[208],1
0DB4: 34 42    XOR   [__r0],A
0DB6: 51 42    MOV   A,[__r0]
0DB8: 62 D0 00 MOV   REG[208],0
0DBB: 53 FF    MOV   [dummy1],A
(0109) 
(0110) 			if (dummy1 & BSET_0) {		//0. pinin durumu degismis
0DBD: 47 FF 01 TST   [dummy1],1
0DC0: A0 4A    JZ    0x0E0B
(0111) 				lastport=PRT3DR;
0DC2: 5D 0C    MOV   A,REG[12]
0DC4: 62 D0 01 MOV   REG[208],1
0DC7: 53 62    MOV   [lastport],A
(0112) 				switch  (PRT3DR & 0b00000011) {	//bu encoder hangi yone donuyor?
0DC9: 5D 0C    MOV   A,REG[12]
0DCB: 62 D0 01 MOV   REG[208],1
0DCE: 21 03    AND   A,3
0DD0: 54 01    MOV   [X+1],A
0DD2: 56 00 00 MOV   [X+0],0
0DD5: 3D 00 00 CMP   [X+0],0
0DD8: B0 06    JNZ   0x0DDF
0DDA: 3D 01 01 CMP   [X+1],1
0DDD: A0 0D    JZ    0x0DEB
0DDF: 3D 00 00 CMP   [X+0],0
0DE2: B0 06    JNZ   0x0DE9
0DE4: 3D 01 03 CMP   [X+1],3
0DE7: A0 14    JZ    0x0DFC
0DE9: 80 21    JMP   0x0E0B
(0113) 						case 1: 
(0114) 									if (ekran_res[0]==3) {} else {ekran_res[0]--; }
0DEB: 62 D0 00 MOV   REG[208],0
0DEE: 3C F9 03 CMP   [ekran_res],3
0DF1: B0 03    JNZ   0x0DF5
0DF3: 80 17    JMP   0x0E0B
0DF5: 62 D0 00 MOV   REG[208],0
0DF8: 7A F9    DEC   [ekran_res]
(0115) 								break;
0DFA: 80 10    JMP   0x0E0B
(0116) 						case 3: 
(0117) 									if (ekran_res[0]==255) {} else {ekran_res[0]++; }
0DFC: 62 D0 00 MOV   REG[208],0
0DFF: 3C F9 FF CMP   [ekran_res],255
0E02: B0 03    JNZ   0x0E06
0E04: 80 06    JMP   0x0E0B
0E06: 62 D0 00 MOV   REG[208],0
0E09: 76 F9    INC   [ekran_res]
(0118) 								break;
(0119) 						
(0120) 						}}
(0121) 			if (dummy1 & BSET_2) {		//2. pinin durumu degismis
0E0B: 62 D0 00 MOV   REG[208],0
0E0E: 47 FF 04 TST   [dummy1],4
0E11: A0 52    JZ    0x0E64
(0122) 				lastport=PRT3DR;
0E13: 5D 0C    MOV   A,REG[12]
0E15: 62 D0 01 MOV   REG[208],1
0E18: 53 62    MOV   [lastport],A
(0123) 				switch  (PRT3DR & 0b00001100) {	//bu encoder hangi yone donuyor?
0E1A: 5D 0C    MOV   A,REG[12]
0E1C: 62 D0 01 MOV   REG[208],1
0E1F: 21 0C    AND   A,12
0E21: 54 01    MOV   [X+1],A
0E23: 56 00 00 MOV   [X+0],0
0E26: 52 01    MOV   A,[X+1]
0E28: 11 04    SUB   A,4
0E2A: 53 35    MOV   [__rY],A
0E2C: 52 00    MOV   A,[X+0]
0E2E: 31 80    XOR   A,128
0E30: 19 80    SBB   A,128
0E32: C0 31    JC    0x0E64
0E34: 2A 35    OR    A,[__rY]
0E36: A0 0D    JZ    0x0E44
0E38: 3D 00 00 CMP   [X+0],0
0E3B: B0 06    JNZ   0x0E42
0E3D: 3D 01 0C CMP   [X+1],12
0E40: A0 14    JZ    0x0E55
0E42: 80 21    JMP   0x0E64
(0124) 						
(0125) 						case 4: 
(0126) 									if (ekran_res[0]==3) {} else {ekran_res[0]--; }
0E44: 62 D0 00 MOV   REG[208],0
0E47: 3C F9 03 CMP   [ekran_res],3
0E4A: B0 03    JNZ   0x0E4E
0E4C: 80 17    JMP   0x0E64
0E4E: 62 D0 00 MOV   REG[208],0
0E51: 7A F9    DEC   [ekran_res]
(0127) 								break;
0E53: 80 10    JMP   0x0E64
(0128) 						
(0129) 						case 12: 
(0130) 									if (ekran_res[0]==255) {} else {ekran_res[0]++; }
0E55: 62 D0 00 MOV   REG[208],0
0E58: 3C F9 FF CMP   [ekran_res],255
0E5B: B0 03    JNZ   0x0E5F
0E5D: 80 06    JMP   0x0E64
0E5F: 62 D0 00 MOV   REG[208],0
0E62: 76 F9    INC   [ekran_res]
(0131) 								break;
(0132) 						
(0133) 						}}
(0134) 						
(0135) 				LCD_1_DrawBG(1,0,16,ekran_res[0]/3);
0E64: 62 D0 00 MOV   REG[208],0
0E67: 50 03    MOV   A,3
0E69: 08       PUSH  A
0E6A: 51 F9    MOV   A,[ekran_res]
0E6C: 08       PUSH  A
0E6D: 62 D0 01 MOV   REG[208],1
0E70: 7C 10 C0 LCALL __divmodu_8X8_8
0E73: 18       POP   A
0E74: 38 FF    ADD   SP,255
0E76: 10       PUSH  X
0E77: 08       PUSH  A
0E78: 50 10    MOV   A,16
0E7A: 08       PUSH  A
0E7B: 50 00    MOV   A,0
0E7D: 08       PUSH  A
0E7E: 50 01    MOV   A,1
0E80: 08       PUSH  A
0E81: 7C 06 F6 LCALL 0x06F6
0E84: 38 FC    ADD   SP,252
0E86: 20       POP   X
(0136) //   LCD_1_Position(1,5);
(0137) //   LCD_PrintInt(ekran_res[0]);
(0138) 				
(0139) 			txBuffer[0]=ekran_res[0];
0E87: 62 D0 00 MOV   REG[208],0
0E8A: 51 F9    MOV   A,[ekran_res]
0E8C: 62 D0 00 MOV   REG[208],0
0E8F: 53 D9    MOV   [txBuffer],A
(0140) 			txBuffer[1]=0;				//buton toggle vs...
0E91: 55 DA 00 MOV   [txBuffer+1],0
(0141) 						
(0142) 			I2Yaz();
0E94: 90 6A    CALL  _I2Yaz
0E96: 8F 0C    JMP   0x0DA3
(0143) 
(0144) 	
(0145) }//while kapa	
(0146) }//main kapa
0E98: 38 FE    ADD   SP,254
0E9A: 20       POP   X
0E9B: 8F FF    JMP   0x0E9B
(0147) 
(0148) void dly(long int mS){init_delay_counter(mS,mS/2); while (DELAY_INVOKE);{}}
_dly:
  mS                   --> X-7
0E9D: 10       PUSH  X
0E9E: 4F       MOV   X,SP
0E9F: 62 D0 01 MOV   REG[208],1
0EA2: 50 00    MOV   A,0
0EA4: 08       PUSH  A
0EA5: 08       PUSH  A
0EA6: 08       PUSH  A
0EA7: 50 02    MOV   A,2
0EA9: 08       PUSH  A
0EAA: 52 F9    MOV   A,[X-7]
0EAC: 08       PUSH  A
0EAD: 52 FA    MOV   A,[X-6]
0EAF: 08       PUSH  A
0EB0: 52 FB    MOV   A,[X-5]
0EB2: 08       PUSH  A
0EB3: 52 FC    MOV   A,[X-4]
0EB5: 08       PUSH  A
0EB6: 7C 10 69 LCALL __divmod_32X32_32
0EB9: 18       POP   A
0EBA: 53 3F    MOV   [__r3],A
0EBC: 18       POP   A
0EBD: 53 40    MOV   [__r2],A
0EBF: 18       POP   A
0EC0: 53 41    MOV   [__r1],A
0EC2: 18       POP   A
0EC3: 38 FC    ADD   SP,252
0EC5: 08       PUSH  A
0EC6: 51 41    MOV   A,[__r1]
0EC8: 08       PUSH  A
0EC9: 51 40    MOV   A,[__r2]
0ECB: 08       PUSH  A
0ECC: 51 3F    MOV   A,[__r3]
0ECE: 08       PUSH  A
0ECF: 52 F9    MOV   A,[X-7]
0ED1: 08       PUSH  A
0ED2: 52 FA    MOV   A,[X-6]
0ED4: 08       PUSH  A
0ED5: 52 FB    MOV   A,[X-5]
0ED7: 08       PUSH  A
0ED8: 52 FC    MOV   A,[X-4]
0EDA: 08       PUSH  A
0EDB: 9E 7E    CALL  _init_delay_counter
0EDD: 38 F8    ADD   SP,248
0EDF: 62 D0 01 MOV   REG[208],1
0EE2: 51 5B    MOV   A,[STATUS+1]
0EE4: 21 01    AND   A,1
0EE6: 62 D0 01 MOV   REG[208],1
0EE9: 53 41    MOV   [__r1],A
0EEB: 62 D0 01 MOV   REG[208],1
0EEE: 51 5A    MOV   A,[STATUS]
0EF0: 21 00    AND   A,0
0EF2: 62 D0 01 MOV   REG[208],1
0EF5: 39 00    CMP   A,0
0EF7: BF E7    JNZ   0x0EDF
0EF9: 3C 41 00 CMP   [__r1],0
0EFC: BF E2    JNZ   0x0EDF
0EFE: 20       POP   X
0EFF: 7F       RET   
(0149) 
(0150) void I2Yaz()
(0151) {
(0152) 		status = I2CHW_1_bReadI2CStatus();
_I2Yaz:
0F00: 10       PUSH  X
0F01: 7C 09 6E LCALL 0x096E
0F04: 20       POP   X
0F05: 62 D0 01 MOV   REG[208],1
0F08: 53 65    MOV   [status],A
(0153) 		if( status & I2CHW_RD_COMPLETE )
0F0A: 47 65 04 TST   [status],4
0F0D: A0 14    JZ    0x0F22
(0154) 		{
(0155) 			I2CHW_1_ClrRdStatus();
0F0F: 10       PUSH  X
0F10: 7C 09 74 LCALL 0x0974
(0156) 			I2CHW_1_InitRamRead(txBuffer,32);}}
0F13: 50 20    MOV   A,32
0F15: 08       PUSH  A
0F16: 50 00    MOV   A,0
0F18: 08       PUSH  A
0F19: 50 D9    MOV   A,217
0F1B: 08       PUSH  A
0F1C: 7C 09 40 LCALL 0x0940
0F1F: 38 FD    ADD   SP,253
0F21: 20       POP   X
0F22: 7F       RET   
(0157) 
(0158) void I2Oku()
(0159) {
(0160)         status = I2CHW_1_bReadI2CStatus();  
_I2Oku:
0F23: 10       PUSH  X
0F24: 7C 09 6E LCALL 0x096E
0F27: 20       POP   X
0F28: 62 D0 01 MOV   REG[208],1
0F2B: 53 65    MOV   [status],A
(0161)         if( status & I2CHW_WR_COMPLETE )  
0F2D: 47 65 40 TST   [status],64
0F30: A0 14    JZ    0x0F45
(0162)         {
(0163) 	        I2CHW_1_ClrWrStatus();  
0F32: 10       PUSH  X
0F33: 7C 09 7B LCALL 0x097B
(0164) 	        I2CHW_1_InitWrite(rxBuffer,32);}}
0F36: 50 20    MOV   A,32
0F38: 08       PUSH  A
0F39: 50 00    MOV   A,0
0F3B: 08       PUSH  A
0F3C: 50 B9    MOV   A,185
0F3E: 08       PUSH  A
0F3F: 7C 09 02 LCALL 0x0902
0F42: 38 FD    ADD   SP,253
0F44: 20       POP   X
0F45: 7F       RET   
(0165) 	        
(0166) void clrdisp(){LCD_1_Position(0,0);LCD_1_PrCString("                ");LCD_1_Position(1,0);LCD_1_PrCString("                ");}
_clrdisp:
0F46: 10       PUSH  X
0F47: 50 00    MOV   A,0
0F49: 5C       MOV   X,A
0F4A: 7C 06 C4 LCALL 0x06C4
0F4D: 50 03    MOV   A,3
0F4F: 08       PUSH  A
0F50: 50 20    MOV   A,32
0F52: 5C       MOV   X,A
0F53: 18       POP   A
0F54: 7C 05 46 LCALL 0x0546
0F57: 57 00    MOV   X,0
0F59: 50 01    MOV   A,1
0F5B: 7C 06 C4 LCALL 0x06C4
0F5E: 50 03    MOV   A,3
0F60: 08       PUSH  A
0F61: 50 20    MOV   A,32
0F63: 5C       MOV   X,A
0F64: 18       POP   A
0F65: 7C 05 46 LCALL 0x0546
0F68: 20       POP   X
0F69: 7F       RET   
(0167) void disp_msg(BYTE line, BYTE row, char *msgm){LCD_1_Position(line,row);LCD_1_PrString(msgm);}
_disp_msg:
  msgm                 --> X-7
  row                  --> X-5
  line                 --> X-4
0F6A: 10       PUSH  X
0F6B: 4F       MOV   X,SP
0F6C: 10       PUSH  X
0F6D: 52 FB    MOV   A,[X-5]
0F6F: 08       PUSH  A
0F70: 52 FC    MOV   A,[X-4]
0F72: 20       POP   X
0F73: 7C 06 C4 LCALL 0x06C4
0F76: 20       POP   X
0F77: 10       PUSH  X
0F78: 52 F9    MOV   A,[X-7]
0F7A: 08       PUSH  A
0F7B: 52 FA    MOV   A,[X-6]
0F7D: 5C       MOV   X,A
0F7E: 18       POP   A
0F7F: 7C 05 82 LCALL 0x0582
0F82: 20       POP   X
0F83: 20       POP   X
0F84: 7F       RET   
(0168) 
(0169) void LCD_PrintInt(int val) 
(0170) {char *intRet; itoa(intRet, val, 10 ); LCD_1_PrString(intRet);}
_LCD_PrintInt:
  intRet               --> X+0
  val                  --> X-5
0F85: 10       PUSH  X
0F86: 4F       MOV   X,SP
0F87: 38 02    ADD   SP,2
0F89: 50 00    MOV   A,0
0F8B: 08       PUSH  A
0F8C: 50 0A    MOV   A,10
0F8E: 08       PUSH  A
0F8F: 52 FB    MOV   A,[X-5]
0F91: 08       PUSH  A
0F92: 52 FC    MOV   A,[X-4]
0F94: 08       PUSH  A
0F95: 52 00    MOV   A,[X+0]
0F97: 08       PUSH  A
0F98: 52 01    MOV   A,[X+1]
0F9A: 08       PUSH  A
0F9B: 7C 18 4C LCALL _itoa
0F9E: 38 FA    ADD   SP,250
0FA0: 10       PUSH  X
0FA1: 52 00    MOV   A,[X+0]
0FA3: 08       PUSH  A
0FA4: 52 01    MOV   A,[X+1]
0FA6: 5C       MOV   X,A
0FA7: 18       POP   A
0FA8: 7C 05 82 LCALL 0x0582
0FAB: 20       POP   X
0FAC: 38 FE    ADD   SP,254
0FAE: 20       POP   X
0FAF: 7F       RET   
(0171) 
(0172) void LCD_PrintFloat(float vall)
(0173) {
_LCD_PrintFloat:
  statuss              --> X+4
  floatRet             --> X+2
  i                    --> X+0
  vall                 --> X-7
0FB0: 10       PUSH  X
0FB1: 4F       MOV   X,SP
0FB2: 38 06    ADD   SP,6
(0174) int statuss;
(0175) int i = 0;
0FB4: 56 01 00 MOV   [X+1],0
0FB7: 56 00 00 MOV   [X+0],0
(0176) char *floatRet;
(0177) 
(0178) floatRet = ftoa(vall + 0.005, &statuss);
0FBA: 62 D0 01 MOV   REG[208],1
0FBD: 5A 41    MOV   [__r1],X
0FBF: 06 41 04 ADD   [__r1],4
0FC2: 50 03    MOV   A,3
0FC4: 08       PUSH  A
0FC5: 51 41    MOV   A,[__r1]
0FC7: 08       PUSH  A
0FC8: 50 3B    MOV   A,59
0FCA: 08       PUSH  A
0FCB: 50 A3    MOV   A,163
0FCD: 08       PUSH  A
0FCE: 50 D7    MOV   A,215
0FD0: 08       PUSH  A
0FD1: 50 0A    MOV   A,10
0FD3: 08       PUSH  A
0FD4: 52 F9    MOV   A,[X-7]
0FD6: 08       PUSH  A
0FD7: 52 FA    MOV   A,[X-6]
0FD9: 08       PUSH  A
0FDA: 52 FB    MOV   A,[X-5]
0FDC: 08       PUSH  A
0FDD: 52 FC    MOV   A,[X-4]
0FDF: 08       PUSH  A
0FE0: 7C 11 93 LCALL __fpadd
0FE3: 18       POP   A
0FE4: 53 3F    MOV   [__r3],A
0FE6: 18       POP   A
0FE7: 53 40    MOV   [__r2],A
0FE9: 18       POP   A
0FEA: 53 41    MOV   [__r1],A
0FEC: 18       POP   A
0FED: 38 FC    ADD   SP,252
0FEF: 08       PUSH  A
0FF0: 51 41    MOV   A,[__r1]
0FF2: 08       PUSH  A
0FF3: 51 40    MOV   A,[__r2]
0FF5: 08       PUSH  A
0FF6: 51 3F    MOV   A,[__r3]
0FF8: 08       PUSH  A
0FF9: 7C 13 FB LCALL _ftoa
0FFC: 38 FA    ADD   SP,250
0FFE: 62 D0 01 MOV   REG[208],1
1001: 51 41    MOV   A,[__r1]
1003: 54 03    MOV   [X+3],A
1005: 51 42    MOV   A,[__r0]
1007: 54 02    MOV   [X+2],A
1009: 80 1D    JMP   0x1027
(0179) while(floatRet[i]){
(0180) if('.' == floatRet[i])
100B: 62 D0 01 MOV   REG[208],1
100E: 52 01    MOV   A,[X+1]
1010: 03 03    ADD   A,[X+3]
1012: 53 41    MOV   [__r1],A
1014: 52 00    MOV   A,[X+0]
1016: 0B 02    ADC   A,[X+2]
1018: 60 D4    MOV   REG[212],A
101A: 3E 41    MVI   A,[__r1]
101C: 39 2E    CMP   A,46
101E: B0 03    JNZ   0x1022
(0181) break;
1020: 80 1B    JMP   0x103C
(0182) i++;
1022: 77 01    INC   [X+1]
1024: 0F 00 00 ADC   [X+0],0
1027: 62 D0 01 MOV   REG[208],1
102A: 52 01    MOV   A,[X+1]
102C: 03 03    ADD   A,[X+3]
102E: 53 41    MOV   [__r1],A
1030: 52 00    MOV   A,[X+0]
1032: 0B 02    ADC   A,[X+2]
1034: 60 D4    MOV   REG[212],A
1036: 3E 41    MVI   A,[__r1]
1038: 39 00    CMP   A,0
103A: BF D0    JNZ   0x100B
(0183) }
(0184) floatRet[i+3] = '\0';
103C: 62 D0 01 MOV   REG[208],1
103F: 52 01    MOV   A,[X+1]
1041: 03 03    ADD   A,[X+3]
1043: 53 41    MOV   [__r1],A
1045: 52 00    MOV   A,[X+0]
1047: 0B 02    ADC   A,[X+2]
1049: 53 42    MOV   [__r0],A
104B: 06 41 03 ADD   [__r1],3
104E: 0E 42 00 ADC   [__r0],0
1051: 51 42    MOV   A,[__r0]
1053: 60 D5    MOV   REG[213],A
1055: 50 00    MOV   A,0
1057: 3F 41    MVI   [__r1],A
(0185) LCD_1_PrString(floatRet);}FILE: <library>
1059: 10       PUSH  X
105A: 52 02    MOV   A,[X+2]
105C: 08       PUSH  A
105D: 52 03    MOV   A,[X+3]
105F: 5C       MOV   X,A
1060: 18       POP   A
1061: 7C 05 82 LCALL 0x0582
1064: 20       POP   X
1065: 38 FA    ADD   SP,250
1067: 20       POP   X
1068: 7F       RET   
__divmod_32X32_32:
1069: 10       PUSH  X
106A: 4F       MOV   X,SP
106B: 38 01    ADD   SP,1
106D: 50 00    MOV   A,0
106F: 3D F9 80 CMP   [X-7],128
1072: C0 06    JC    0x1079
1074: 7C 13 8C LCALL __i_div32_not_util
1077: 50 C0    MOV   A,192
1079: 3D F5 80 CMP   [X-11],128
107C: C0 0C    JC    0x1089
107E: 10       PUSH  X
107F: 4B       SWAP  A,X
1080: 11 04    SUB   A,4
1082: 4B       SWAP  A,X
1083: 7C 13 8C LCALL __i_div32_not_util
1086: 31 80    XOR   A,128
1088: 20       POP   X
1089: 08       PUSH  A
108A: 7C 13 29 LCALL __i_div32_block_util
108D: 18       POP   A
108E: 6A       RLC   A
108F: D0 04    JNC   0x1094
1091: 7C 13 8C LCALL __i_div32_not_util
1094: 6A       RLC   A
1095: D0 08    JNC   0x109E
1097: 4B       SWAP  A,X
1098: 11 04    SUB   A,4
109A: 4B       SWAP  A,X
109B: 7C 13 8C LCALL __i_div32_not_util
109E: 38 FF    ADD   SP,255
10A0: 20       POP   X
10A1: 70 3F    AND   F,63
10A3: 71 C0    OR    F,192
10A5: 7F       RET   
__divmodu_16X16_16:
10A6: 10       PUSH  X
10A7: 4F       MOV   X,SP
10A8: 7C 12 F0 LCALL __i_div16_block_util
10AB: 20       POP   X
10AC: 70 3F    AND   F,63
10AE: 71 C0    OR    F,192
10B0: 7F       RET   
__divmodu_32X32_32:
10B1: 10       PUSH  X
10B2: 4F       MOV   X,SP
10B3: 38 01    ADD   SP,1
10B5: 7C 13 29 LCALL __i_div32_block_util
10B8: 38 FF    ADD   SP,255
10BA: 20       POP   X
10BB: 70 3F    AND   F,63
10BD: 71 C0    OR    F,192
10BF: 7F       RET   
__divmodu_8X8_8:
10C0: 10       PUSH  X
10C1: 4F       MOV   X,SP
10C2: 5D D0    MOV   A,REG[208]
10C4: 08       PUSH  A
10C5: 62 D0 01 MOV   REG[208],1
10C8: 7C 13 A4 LCALL __i_div8_block_util
10CB: 51 36    MOV   A,[__rX]
10CD: 54 FB    MOV   [X-5],A
10CF: 18       POP   A
10D0: 60 D0    MOV   REG[208],A
10D2: 20       POP   X
10D3: 70 3F    AND   F,63
10D5: 71 C0    OR    F,192
10D7: 7F       RET   
__F_analysisEject_util:
10D8: D0 20    JNC   __F_Normal_util
10DA: 52 F9    MOV   A,[X-7]
10DC: B0 06    JNZ   __F_Round_util
10DE: 47 34 01 TST   [__rZ],1
10E1: A0 17    JZ    __F_Normal_util
__F_Round_util:
10E3: 76 34    INC   [__rZ]
10E5: 0E 35 00 ADC   [__rY],0
10E8: 0E 36 00 ADC   [__rX],0
10EB: D0 0D    JNC   __F_Normal_util
10ED: 76 42    INC   [__r0]
10EF: 3C 42 FF CMP   [__r0],255
10F2: B0 06    JNZ   __F_Normal_util
10F4: 18       POP   A
10F5: 6A       RLC   A
10F6: 7D 11 49 LJMP  __F_sInf_Res_util
__F_Normal_util:
10F9: 18       POP   A
10FA: 6B 36    RLC   [__rX]
10FC: 6A       RLC   A
10FD: 6E 42    RRC   [__r0]
10FF: 6E 36    RRC   [__rX]
1101: 7D 11 1B LJMP  __F_SaveRes_util
__F_clrReg_util:
1104: 50 00    MOV   A,0
1106: 53 42    MOV   [__r0],A
1108: 53 36    MOV   [__rX],A
110A: 53 35    MOV   [__rY],A
110C: 53 34    MOV   [__rZ],A
110E: 7F       RET   
__F_NaN_Res_util:
110F: 7C 11 04 LCALL __F_clrReg_util
1112: 7A 42    DEC   [__r0]
1114: 6E 36    RRC   [__rX]
1116: 68 36    ASR   [__rX]
1118: 7D 11 1B LJMP  __F_SaveRes_util
111B: 4F       MOV   X,SP
111C: 51 42    MOV   A,[__r0]
111E: 54 F7    MOV   [X-9],A
1120: 51 36    MOV   A,[__rX]
1122: 54 F8    MOV   [X-8],A
1124: 51 35    MOV   A,[__rY]
1126: 54 F9    MOV   [X-7],A
1128: 51 34    MOV   A,[__rZ]
112A: 54 FA    MOV   [X-6],A
112C: 18       POP   A
112D: 53 42    MOV   [__r0],A
112F: 18       POP   A
1130: 60 D0    MOV   REG[208],A
1132: 20       POP   X
1133: 70 3F    AND   F,63
1135: 71 C0    OR    F,192
1137: 7F       RET   
__F_SendToReg_util:
1138: 52 FC    MOV   A,[X-4]
113A: 53 34    MOV   [__rZ],A
113C: 52 FB    MOV   A,[X-5]
113E: 53 35    MOV   [__rY],A
1140: 52 FA    MOV   A,[X-6]
1142: 53 36    MOV   [__rX],A
1144: 52 F9    MOV   A,[X-7]
1146: 53 42    MOV   [__r0],A
1148: 7F       RET   
__F_sInf_Res_util:
1149: 7C 11 04 LCALL __F_clrReg_util
114C: 55 42 FF MOV   [__r0],255
114F: 6E 42    RRC   [__r0]
1151: 6E 36    RRC   [__rX]
1153: 7D 11 1B LJMP  __F_SaveRes_util
__F_sZero_Res_util:
1156: 7C 11 04 LCALL __F_clrReg_util
1159: 6E 42    RRC   [__r0]
115B: 7D 11 1B LJMP  __F_SaveRes_util
__F_Type_Oprnd_util:
115E: 52 FA    MOV   A,[X-6]
1160: 6A       RLC   A
1161: 52 F9    MOV   A,[X-7]
1163: 6A       RLC   A
1164: B0 03    JNZ   0x1168
1166: 74       INC   A
1167: 7F       RET   
1168: 74       INC   A
1169: A0 04    JZ    0x116E
116B: 50 00    MOV   A,0
116D: 7F       RET   
116E: 52 FA    MOV   A,[X-6]
1170: 64       ASL   A
1171: 2B FB    OR    A,[X-5]
1173: 2B FC    OR    A,[X-4]
1175: A0 04    JZ    0x117A
1177: 50 04    MOV   A,4
1179: 7F       RET   
117A: 50 02    MOV   A,2
117C: 7F       RET   
__F_Unnormal_util:
117D: 6C FA    RLC   [X-6]
117F: 52 F9    MOV   A,[X-7]
1181: 33 F5    XOR   A,[X-11]
1183: 6C F9    RLC   [X-7]
1185: 6D       RRC   A
1186: 71 04    OR    F,4
1188: 6F FA    RRC   [X-6]
118A: 66 F6    ASL   [X-10]
118C: 6C F5    RLC   [X-11]
118E: 71 04    OR    F,4
1190: 6F F6    RRC   [X-10]
1192: 7F       RET   
__fpadd:
1193: 10       PUSH  X
1194: 4F       MOV   X,SP
1195: 5D D0    MOV   A,REG[208]
1197: 08       PUSH  A
1198: 62 D0 01 MOV   REG[208],1
119B: 51 42    MOV   A,[__r0]
119D: 08       PUSH  A
119E: 5B       MOV   A,X
119F: 11 04    SUB   A,4
11A1: 53 42    MOV   [__r0],A
11A3: 7C 11 5E LCALL __F_Type_Oprnd_util
11A6: 53 36    MOV   [__rX],A
11A8: 4D 42    SWAP  X,[__r0]
11AA: 7C 11 5E LCALL __F_Type_Oprnd_util
11AD: 4D 42    SWAP  X,[__r0]
11AF: 53 35    MOV   [__rY],A
11B1: 2A 36    OR    A,[__rX]
11B3: A0 34    JZ    0x11E8
11B5: 39 04    CMP   A,4
11B7: C0 04    JC    0x11BC
11B9: 7D 11 0F LJMP  __F_NaN_Res_util
11BC: 21 02    AND   A,2
11BE: A0 19    JZ    0x11D8
11C0: 22 36    AND   A,[__rX]
11C2: B0 09    JNZ   0x11CC
11C4: 4D 42    SWAP  X,[__r0]
11C6: 7C 11 38 LCALL __F_SendToReg_util
11C9: 7D 11 1B LJMP  __F_SaveRes_util
11CC: 22 35    AND   A,[__rY]
11CE: AF F7    JZ    0x11C6
11D0: 52 F9    MOV   A,[X-7]
11D2: 33 F5    XOR   A,[X-11]
11D4: BF E4    JNZ   0x11B9
11D6: 8F EF    JMP   0x11C6
11D8: 51 36    MOV   A,[__rX]
11DA: AF EB    JZ    0x11C6
11DC: 22 35    AND   A,[__rY]
11DE: AF E5    JZ    0x11C4
11E0: 52 F9    MOV   A,[X-7]
11E2: 23 F5    AND   A,[X-11]
11E4: 6A       RLC   A
11E5: 7D 11 56 LJMP  __F_sZero_Res_util
11E8: 7C 11 7D LCALL __F_Unnormal_util
11EB: 08       PUSH  A
11EC: 6A       RLC   A
11ED: 21 80    AND   A,128
11EF: 53 36    MOV   [__rX],A
11F1: 52 FC    MOV   A,[X-4]
11F3: 13 F8    SUB   A,[X-8]
11F5: 52 FB    MOV   A,[X-5]
11F7: 1B F7    SBB   A,[X-9]
11F9: 52 FA    MOV   A,[X-6]
11FB: 1B F6    SBB   A,[X-10]
11FD: 52 F9    MOV   A,[X-7]
11FF: 1B F5    SBB   A,[X-11]
1201: D0 07    JNC   0x1209
1203: 4D 42    SWAP  X,[__r0]
1205: 18       POP   A
1206: 32 36    XOR   A,[__rX]
1208: 08       PUSH  A
1209: 51 42    MOV   A,[__r0]
120B: 08       PUSH  A
120C: 7C 11 38 LCALL __F_SendToReg_util
120F: 20       POP   X
1210: 13 F9    SUB   A,[X-7]
1212: 56 F9 00 MOV   [X-7],0
1215: A0 1A    JZ    0x1230
1217: 39 1A    CMP   A,26
1219: C0 04    JC    0x121E
121B: 7D 10 F9 LJMP  __F_Normal_util
121E: 70 FB    AND   F,251
1220: 6F FA    RRC   [X-6]
1222: 6F FB    RRC   [X-5]
1224: 6F FC    RRC   [X-4]
1226: 6F F9    RRC   [X-7]
1228: D0 04    JNC   0x122D
122A: 2F F9 01 OR    [X-7],1
122D: 78       DEC   A
122E: BF F1    JNZ   0x1220
1230: 18       POP   A
1231: 08       PUSH  A
1232: 21 40    AND   A,64
1234: B0 26    JNZ   0x125B
1236: 52 FC    MOV   A,[X-4]
1238: 04 34    ADD   [__rZ],A
123A: 52 FB    MOV   A,[X-5]
123C: 0C 35    ADC   [__rY],A
123E: 52 FA    MOV   A,[X-6]
1240: 0C 36    ADC   [__rX],A
1242: D0 4B    JNC   0x128E
1244: 3C 42 FE CMP   [__r0],254
1247: B0 06    JNZ   0x124E
1249: 18       POP   A
124A: 6A       RLC   A
124B: 7D 11 49 LJMP  __F_sInf_Res_util
124E: 76 42    INC   [__r0]
1250: 6E 36    RRC   [__rX]
1252: 2E 36 80 OR    [__rX],128
1255: 6E 35    RRC   [__rY]
1257: 6E 34    RRC   [__rZ]
1259: 80 36    JMP   0x1290
125B: 50 00    MOV   A,0
125D: 13 F9    SUB   A,[X-7]
125F: 54 F9    MOV   [X-7],A
1261: 52 FC    MOV   A,[X-4]
1263: 1C 34    SBB   [__rZ],A
1265: 52 FB    MOV   A,[X-5]
1267: 1C 35    SBB   [__rY],A
1269: 52 FA    MOV   A,[X-6]
126B: 1C 36    SBB   [__rX],A
126D: 52 F9    MOV   A,[X-7]
126F: 2A 34    OR    A,[__rZ]
1271: 2A 35    OR    A,[__rY]
1273: 2A 36    OR    A,[__rX]
1275: A0 0A    JZ    0x1280
1277: 47 36 80 TST   [__rX],128
127A: B0 13    JNZ   0x128E
127C: 7A 42    DEC   [__r0]
127E: B0 05    JNZ   0x1284
1280: 18       POP   A
1281: 7D 11 56 LJMP  __F_sZero_Res_util
1284: 66 F9    ASL   [X-7]
1286: 6B 34    RLC   [__rZ]
1288: 6B 35    RLC   [__rY]
128A: 6B 36    RLC   [__rX]
128C: 8F EA    JMP   0x1277
128E: 66 F9    ASL   [X-7]
1290: 7D 10 D8 LJMP  __F_analysisEject_util
__fpcmp:
1293: 10       PUSH  X
1294: 4F       MOV   X,SP
1295: 5D D0    MOV   A,REG[208]
1297: 08       PUSH  A
1298: 62 D0 01 MOV   REG[208],1
129B: 52 FA    MOV   A,[X-6]
129D: 2B F6    OR    A,[X-10]
129F: 6A       RLC   A
12A0: C0 08    JC    0x12A9
12A2: 52 F9    MOV   A,[X-7]
12A4: 2B F5    OR    A,[X-11]
12A6: 64       ASL   A
12A7: A0 3D    JZ    0x12E5
12A9: 52 F9    MOV   A,[X-7]
12AB: 53 36    MOV   [__rX],A
12AD: 33 F5    XOR   A,[X-11]
12AF: 53 35    MOV   [__rY],A
12B1: 27 F5 7F AND   [X-11],127
12B4: 52 FC    MOV   A,[X-4]
12B6: 13 F8    SUB   A,[X-8]
12B8: 53 34    MOV   [__rZ],A
12BA: 52 FB    MOV   A,[X-5]
12BC: 1B F7    SBB   A,[X-9]
12BE: 2C 34    OR    [__rZ],A
12C0: 52 FA    MOV   A,[X-6]
12C2: 1B F6    SBB   A,[X-10]
12C4: 2C 34    OR    [__rZ],A
12C6: 52 F9    MOV   A,[X-7]
12C8: 21 7F    AND   A,127
12CA: 1B F5    SBB   A,[X-11]
12CC: 2A 34    OR    A,[__rZ]
12CE: 6E 34    RRC   [__rZ]
12D0: 6B 35    RLC   [__rY]
12D2: 29 00    OR    A,0
12D4: C0 07    JC    0x12DC
12D6: A0 0E    JZ    0x12E5
12D8: 51 34    MOV   A,[__rZ]
12DA: 34 36    XOR   [__rX],A
12DC: 6B 36    RLC   [__rX]
12DE: 50 00    MOV   A,0
12E0: C0 03    JC    0x12E4
12E2: 74       INC   A
12E3: 73       CPL   A
12E4: 73       CPL   A
12E5: 5C       MOV   X,A
12E6: 18       POP   A
12E7: 60 D0    MOV   REG[208],A
12E9: 5B       MOV   A,X
12EA: 20       POP   X
12EB: 70 3F    AND   F,63
12ED: 71 C0    OR    F,192
12EF: 7F       RET   
__i_div16_block_util:
12F0: 5D D0    MOV   A,REG[208]
12F2: 08       PUSH  A
12F3: 62 D0 01 MOV   REG[208],1
12F6: 50 00    MOV   A,0
12F8: 53 35    MOV   [__rY],A
12FA: 53 36    MOV   [__rX],A
12FC: 55 34 10 MOV   [__rZ],16
12FF: 66 FC    ASL   [X-4]
1301: 6C FB    RLC   [X-5]
1303: 6B 35    RLC   [__rY]
1305: 6B 36    RLC   [__rX]
1307: 51 35    MOV   A,[__rY]
1309: 1B FA    SBB   A,[X-6]
130B: 51 36    MOV   A,[__rX]
130D: 1B F9    SBB   A,[X-7]
130F: C0 09    JC    0x1319
1311: 53 36    MOV   [__rX],A
1313: 52 FA    MOV   A,[X-6]
1315: 1C 35    SBB   [__rY],A
1317: 77 FC    INC   [X-4]
1319: 7A 34    DEC   [__rZ]
131B: BF E3    JNZ   0x12FF
131D: 51 35    MOV   A,[__rY]
131F: 54 FA    MOV   [X-6],A
1321: 51 36    MOV   A,[__rX]
1323: 54 F9    MOV   [X-7],A
1325: 18       POP   A
1326: 60 D0    MOV   REG[208],A
1328: 7F       RET   
__i_div32_block_util:
1329: 5D D0    MOV   A,REG[208]
132B: 08       PUSH  A
132C: 62 D0 01 MOV   REG[208],1
132F: 51 42    MOV   A,[__r0]
1331: 08       PUSH  A
1332: 50 00    MOV   A,0
1334: 53 42    MOV   [__r0],A
1336: 53 36    MOV   [__rX],A
1338: 53 35    MOV   [__rY],A
133A: 53 34    MOV   [__rZ],A
133C: 56 00 20 MOV   [X+0],32
133F: 66 FC    ASL   [X-4]
1341: 6C FB    RLC   [X-5]
1343: 6C FA    RLC   [X-6]
1345: 6C F9    RLC   [X-7]
1347: 6B 34    RLC   [__rZ]
1349: 6B 35    RLC   [__rY]
134B: 6B 36    RLC   [__rX]
134D: 6B 42    RLC   [__r0]
134F: 51 34    MOV   A,[__rZ]
1351: 1B F8    SBB   A,[X-8]
1353: 51 35    MOV   A,[__rY]
1355: 1B F7    SBB   A,[X-9]
1357: 51 36    MOV   A,[__rX]
1359: 1B F6    SBB   A,[X-10]
135B: 51 42    MOV   A,[__r0]
135D: 1B F5    SBB   A,[X-11]
135F: C0 11    JC    0x1371
1361: 53 42    MOV   [__r0],A
1363: 52 F8    MOV   A,[X-8]
1365: 14 34    SUB   [__rZ],A
1367: 52 F7    MOV   A,[X-9]
1369: 1C 35    SBB   [__rY],A
136B: 52 F6    MOV   A,[X-10]
136D: 1C 36    SBB   [__rX],A
136F: 77 FC    INC   [X-4]
1371: 7B 00    DEC   [X+0]
1373: BF CB    JNZ   0x133F
1375: 51 34    MOV   A,[__rZ]
1377: 54 F8    MOV   [X-8],A
1379: 51 35    MOV   A,[__rY]
137B: 54 F7    MOV   [X-9],A
137D: 51 36    MOV   A,[__rX]
137F: 54 F6    MOV   [X-10],A
1381: 51 42    MOV   A,[__r0]
1383: 54 F5    MOV   [X-11],A
1385: 18       POP   A
1386: 53 42    MOV   [__r0],A
1388: 18       POP   A
1389: 60 D0    MOV   REG[208],A
138B: 7F       RET   
__i_div32_not_util:
138C: 37 FC FF XOR   [X-4],255
138F: 77 FC    INC   [X-4]
1391: 37 FB FF XOR   [X-5],255
1394: 0F FB 00 ADC   [X-5],0
1397: 37 FA FF XOR   [X-6],255
139A: 0F FA 00 ADC   [X-6],0
139D: 37 F9 FF XOR   [X-7],255
13A0: 0F F9 00 ADC   [X-7],0
13A3: 7F       RET   
__i_div8_block_util:
13A4: 55 36 00 MOV   [__rX],0
13A7: 55 35 08 MOV   [__rY],8
13AA: 66 FC    ASL   [X-4]
13AC: 6B 36    RLC   [__rX]
13AE: 51 36    MOV   A,[__rX]
13B0: 1B FB    SBB   A,[X-5]
13B2: C0 05    JC    0x13B8
13B4: 53 36    MOV   [__rX],A
13B6: 77 FC    INC   [X-4]
13B8: 7A 35    DEC   [__rY]
13BA: BF EF    JNZ   0x13AA
13BC: 7F       RET   
__mul16:
13BD: 10       PUSH  X
13BE: 4F       MOV   X,SP
13BF: 5D D0    MOV   A,REG[208]
13C1: 08       PUSH  A
13C2: 62 D0 01 MOV   REG[208],1
13C5: 52 F9    MOV   A,[X-7]
13C7: 60 E9    MOV   REG[233],A
13C9: 52 FC    MOV   A,[X-4]
13CB: 60 E8    MOV   REG[232],A
13CD: 5D EB    MOV   A,REG[235]
13CF: 53 35    MOV   [__rY],A
13D1: 52 FA    MOV   A,[X-6]
13D3: 60 E9    MOV   REG[233],A
13D5: 5D EB    MOV   A,REG[235]
13D7: 53 36    MOV   [__rX],A
13D9: 5D EA    MOV   A,REG[234]
13DB: 48 FC 80 TST   [X-4],128
13DE: A0 03    JZ    0x13E2
13E0: 03 FA    ADD   A,[X-6]
13E2: 6C FA    RLC   [X-6]
13E4: D0 03    JNC   0x13E8
13E6: 03 FC    ADD   A,[X-4]
13E8: 04 35    ADD   [__rY],A
13EA: 52 FB    MOV   A,[X-5]
13EC: 60 E8    MOV   REG[232],A
13EE: 5D EB    MOV   A,REG[235]
13F0: 04 35    ADD   [__rY],A
13F2: 18       POP   A
13F3: 60 D0    MOV   REG[208],A
13F5: 20       POP   X
13F6: 70 3F    AND   F,63
13F8: 71 C0    OR    F,192
13FA: 7F       RET   
_ftoa:
13FB: 10       PUSH  X
13FC: 4F       MOV   X,SP
13FD: 38 16    ADD   SP,22
13FF: 50 00    MOV   A,0
1401: 08       PUSH  A
1402: 08       PUSH  A
1403: 08       PUSH  A
1404: 08       PUSH  A
1405: 52 F9    MOV   A,[X-7]
1407: 08       PUSH  A
1408: 52 FA    MOV   A,[X-6]
140A: 08       PUSH  A
140B: 52 FB    MOV   A,[X-5]
140D: 08       PUSH  A
140E: 52 FC    MOV   A,[X-4]
1410: 08       PUSH  A
1411: 62 D0 01 MOV   REG[208],1
1414: 7C 12 93 LCALL __fpcmp
1417: 38 F8    ADD   SP,248
1419: 39 00    CMP   A,0
141B: B0 1B    JNZ   0x1437
141D: 62 D0 01 MOV   REG[208],1
1420: 55 43 30 MOV   [67],48
1423: 55 44 2E MOV   [68],46
1426: 55 45 30 MOV   [69],48
1429: 55 46 00 MOV   [70],0
142C: 62 D0 01 MOV   REG[208],1
142F: 55 41 43 MOV   [__r1],67
1432: 55 42 01 MOV   [__r0],1
1435: 84 12    JMP   0x1848
1437: 52 F9    MOV   A,[X-7]
1439: 54 06    MOV   [X+6],A
143B: 52 FA    MOV   A,[X-6]
143D: 54 07    MOV   [X+7],A
143F: 52 FB    MOV   A,[X-5]
1441: 54 08    MOV   [X+8],A
1443: 52 FC    MOV   A,[X-4]
1445: 54 09    MOV   [X+9],A
1447: 62 D0 01 MOV   REG[208],1
144A: 52 06    MOV   A,[X+6]
144C: 53 42    MOV   [__r0],A
144E: 52 07    MOV   A,[X+7]
1450: 53 41    MOV   [__r1],A
1452: 52 08    MOV   A,[X+8]
1454: 53 40    MOV   [__r2],A
1456: 52 09    MOV   A,[X+9]
1458: 53 3F    MOV   [__r3],A
145A: 50 17    MOV   A,23
145C: 62 D0 01 MOV   REG[208],1
145F: 68 42    ASR   [__r0]
1461: 6E 41    RRC   [__r1]
1463: 6E 40    RRC   [__r2]
1465: 6E 3F    RRC   [__r3]
1467: 78       DEC   A
1468: BF F3    JNZ   0x145C
146A: 51 3F    MOV   A,[__r3]
146C: 11 7F    SUB   A,127
146E: 54 0B    MOV   [X+11],A
1470: 50 00    MOV   A,0
1472: 19 00    SBB   A,0
1474: 54 0A    MOV   [X+10],A
1476: 52 09    MOV   A,[X+9]
1478: 53 3F    MOV   [__r3],A
147A: 52 08    MOV   A,[X+8]
147C: 53 40    MOV   [__r2],A
147E: 52 07    MOV   A,[X+7]
1480: 53 41    MOV   [__r1],A
1482: 52 06    MOV   A,[X+6]
1484: 21 00    AND   A,0
1486: 53 42    MOV   [__r0],A
1488: 51 3F    MOV   A,[__r3]
148A: 54 13    MOV   [X+19],A
148C: 51 40    MOV   A,[__r2]
148E: 54 12    MOV   [X+18],A
1490: 51 41    MOV   A,[__r1]
1492: 29 80    OR    A,128
1494: 54 11    MOV   [X+17],A
1496: 51 42    MOV   A,[__r0]
1498: 54 10    MOV   [X+16],A
149A: 56 02 00 MOV   [X+2],0
149D: 56 03 00 MOV   [X+3],0
14A0: 56 04 00 MOV   [X+4],0
14A3: 56 05 00 MOV   [X+5],0
14A6: 56 0C 00 MOV   [X+12],0
14A9: 56 0D 00 MOV   [X+13],0
14AC: 56 0E 00 MOV   [X+14],0
14AF: 56 0F 00 MOV   [X+15],0
14B2: 52 0B    MOV   A,[X+11]
14B4: 11 1F    SUB   A,31
14B6: 52 0A    MOV   A,[X+10]
14B8: 31 80    XOR   A,128
14BA: 19 80    SBB   A,128
14BC: C0 1C    JC    0x14D9
14BE: 62 D0 01 MOV   REG[208],1
14C1: 52 F8    MOV   A,[X-8]
14C3: 53 41    MOV   [__r1],A
14C5: 52 F7    MOV   A,[X-9]
14C7: 60 D5    MOV   REG[213],A
14C9: 50 FF    MOV   A,255
14CB: 3F 41    MVI   [__r1],A
14CD: 50 FE    MOV   A,254
14CF: 3F 41    MVI   [__r1],A
14D1: 55 41 00 MOV   [__r1],0
14D4: 55 42 00 MOV   [__r0],0
14D7: 83 70    JMP   0x1848
14D9: 52 0B    MOV   A,[X+11]
14DB: 11 E9    SUB   A,233
14DD: 52 0A    MOV   A,[X+10]
14DF: 31 80    XOR   A,128
14E1: 19 7F    SBB   A,127
14E3: D0 1A    JNC   0x14FE
14E5: 62 D0 01 MOV   REG[208],1
14E8: 52 F8    MOV   A,[X-8]
14EA: 53 41    MOV   [__r1],A
14EC: 52 F7    MOV   A,[X-9]
14EE: 60 D5    MOV   REG[213],A
14F0: 50 FF    MOV   A,255
14F2: 3F 41    MVI   [__r1],A
14F4: 3F 41    MVI   [__r1],A
14F6: 55 41 00 MOV   [__r1],0
14F9: 55 42 00 MOV   [__r0],0
14FC: 83 4B    JMP   0x1848
14FE: 52 0B    MOV   A,[X+11]
1500: 11 17    SUB   A,23
1502: 52 0A    MOV   A,[X+10]
1504: 31 80    XOR   A,128
1506: 19 80    SBB   A,128
1508: C0 43    JC    0x154C
150A: 62 D0 01 MOV   REG[208],1
150D: 52 0B    MOV   A,[X+11]
150F: 11 17    SUB   A,23
1511: 53 41    MOV   [__r1],A
1513: 52 10    MOV   A,[X+16]
1515: 53 3E    MOV   [__r4],A
1517: 52 11    MOV   A,[X+17]
1519: 53 3D    MOV   [__r5],A
151B: 52 12    MOV   A,[X+18]
151D: 53 3C    MOV   [__r6],A
151F: 52 13    MOV   A,[X+19]
1521: 53 3B    MOV   [__r7],A
1523: 51 41    MOV   A,[__r1]
1525: 21 1F    AND   A,31
1527: A0 0F    JZ    0x1537
1529: 62 D0 01 MOV   REG[208],1
152C: 65 3B    ASL   [__r7]
152E: 6B 3C    RLC   [__r6]
1530: 6B 3D    RLC   [__r5]
1532: 6B 3E    RLC   [__r4]
1534: 78       DEC   A
1535: BF F3    JNZ   0x1529
1537: 62 D0 01 MOV   REG[208],1
153A: 51 3E    MOV   A,[__r4]
153C: 54 0C    MOV   [X+12],A
153E: 51 3D    MOV   A,[__r5]
1540: 54 0D    MOV   [X+13],A
1542: 51 3C    MOV   A,[__r6]
1544: 54 0E    MOV   [X+14],A
1546: 51 3B    MOV   A,[__r7]
1548: 54 0F    MOV   [X+15],A
154A: 80 D0    JMP   0x161B
154C: 52 0B    MOV   A,[X+11]
154E: 11 00    SUB   A,0
1550: 52 0A    MOV   A,[X+10]
1552: 31 80    XOR   A,128
1554: 19 80    SBB   A,128
1556: C0 7F    JC    0x15D6
1558: 62 D0 01 MOV   REG[208],1
155B: 50 17    MOV   A,23
155D: 13 0B    SUB   A,[X+11]
155F: 53 41    MOV   [__r1],A
1561: 52 10    MOV   A,[X+16]
1563: 53 3E    MOV   [__r4],A
1565: 52 11    MOV   A,[X+17]
1567: 53 3D    MOV   [__r5],A
1569: 52 12    MOV   A,[X+18]
156B: 53 3C    MOV   [__r6],A
156D: 52 13    MOV   A,[X+19]
156F: 53 3B    MOV   [__r7],A
1571: 51 41    MOV   A,[__r1]
1573: 21 1F    AND   A,31
1575: A0 0F    JZ    0x1585
1577: 62 D0 01 MOV   REG[208],1
157A: 68 3E    ASR   [__r4]
157C: 6E 3D    RRC   [__r5]
157E: 6E 3C    RRC   [__r6]
1580: 6E 3B    RRC   [__r7]
1582: 78       DEC   A
1583: BF F3    JNZ   0x1577
1585: 62 D0 01 MOV   REG[208],1
1588: 51 3E    MOV   A,[__r4]
158A: 54 0C    MOV   [X+12],A
158C: 51 3D    MOV   A,[__r5]
158E: 54 0D    MOV   [X+13],A
1590: 51 3C    MOV   A,[__r6]
1592: 54 0E    MOV   [X+14],A
1594: 51 3B    MOV   A,[__r7]
1596: 54 0F    MOV   [X+15],A
1598: 52 0B    MOV   A,[X+11]
159A: 01 01    ADD   A,1
159C: 53 41    MOV   [__r1],A
159E: 52 10    MOV   A,[X+16]
15A0: 53 3E    MOV   [__r4],A
15A2: 52 11    MOV   A,[X+17]
15A4: 53 3D    MOV   [__r5],A
15A6: 52 12    MOV   A,[X+18]
15A8: 53 3C    MOV   [__r6],A
15AA: 52 13    MOV   A,[X+19]
15AC: 53 3B    MOV   [__r7],A
15AE: 51 41    MOV   A,[__r1]
15B0: 21 1F    AND   A,31
15B2: A0 0F    JZ    0x15C2
15B4: 62 D0 01 MOV   REG[208],1
15B7: 65 3B    ASL   [__r7]
15B9: 6B 3C    RLC   [__r6]
15BB: 6B 3D    RLC   [__r5]
15BD: 6B 3E    RLC   [__r4]
15BF: 78       DEC   A
15C0: BF F3    JNZ   0x15B4
15C2: 62 D0 01 MOV   REG[208],1
15C5: 51 3B    MOV   A,[__r7]
15C7: 54 05    MOV   [X+5],A
15C9: 51 3C    MOV   A,[__r6]
15CB: 54 04    MOV   [X+4],A
15CD: 51 3D    MOV   A,[__r5]
15CF: 54 03    MOV   [X+3],A
15D1: 56 02 00 MOV   [X+2],0
15D4: 80 46    JMP   0x161B
15D6: 62 D0 01 MOV   REG[208],1
15D9: 52 0B    MOV   A,[X+11]
15DB: 01 01    ADD   A,1
15DD: 73       CPL   A
15DE: 11 FF    SUB   A,255
15E0: 53 41    MOV   [__r1],A
15E2: 52 13    MOV   A,[X+19]
15E4: 53 3B    MOV   [__r7],A
15E6: 52 12    MOV   A,[X+18]
15E8: 53 3C    MOV   [__r6],A
15EA: 52 11    MOV   A,[X+17]
15EC: 53 3D    MOV   [__r5],A
15EE: 52 10    MOV   A,[X+16]
15F0: 21 00    AND   A,0
15F2: 53 3E    MOV   [__r4],A
15F4: 51 41    MOV   A,[__r1]
15F6: 21 1F    AND   A,31
15F8: A0 0F    JZ    0x1608
15FA: 62 D0 01 MOV   REG[208],1
15FD: 68 3E    ASR   [__r4]
15FF: 6E 3D    RRC   [__r5]
1601: 6E 3C    RRC   [__r6]
1603: 6E 3B    RRC   [__r7]
1605: 78       DEC   A
1606: BF F3    JNZ   0x15FA
1608: 62 D0 01 MOV   REG[208],1
160B: 51 3E    MOV   A,[__r4]
160D: 54 02    MOV   [X+2],A
160F: 51 3D    MOV   A,[__r5]
1611: 54 03    MOV   [X+3],A
1613: 51 3C    MOV   A,[__r6]
1615: 54 04    MOV   [X+4],A
1617: 51 3B    MOV   A,[__r7]
1619: 54 05    MOV   [X+5],A
161B: 56 01 43 MOV   [X+1],67
161E: 56 00 01 MOV   [X+0],1
1621: 52 09    MOV   A,[X+9]
1623: 11 00    SUB   A,0
1625: 52 08    MOV   A,[X+8]
1627: 19 00    SBB   A,0
1629: 52 07    MOV   A,[X+7]
162B: 19 00    SBB   A,0
162D: 52 06    MOV   A,[X+6]
162F: 31 80    XOR   A,128
1631: 19 80    SBB   A,128
1633: D0 20    JNC   0x1654
1635: 62 D0 01 MOV   REG[208],1
1638: 52 01    MOV   A,[X+1]
163A: 53 41    MOV   [__r1],A
163C: 52 00    MOV   A,[X+0]
163E: 53 42    MOV   [__r0],A
1640: 51 41    MOV   A,[__r1]
1642: 01 01    ADD   A,1
1644: 54 01    MOV   [X+1],A
1646: 51 42    MOV   A,[__r0]
1648: 09 00    ADC   A,0
164A: 54 00    MOV   [X+0],A
164C: 51 42    MOV   A,[__r0]
164E: 60 D5    MOV   REG[213],A
1650: 50 2D    MOV   A,45
1652: 3F 41    MVI   [__r1],A
1654: 3D 0C 00 CMP   [X+12],0
1657: B0 31    JNZ   0x1689
1659: 3D 0D 00 CMP   [X+13],0
165C: B0 2C    JNZ   0x1689
165E: 3D 0E 00 CMP   [X+14],0
1661: B0 27    JNZ   0x1689
1663: 3D 0F 00 CMP   [X+15],0
1666: B0 22    JNZ   0x1689
1668: 62 D0 01 MOV   REG[208],1
166B: 52 01    MOV   A,[X+1]
166D: 53 41    MOV   [__r1],A
166F: 52 00    MOV   A,[X+0]
1671: 53 42    MOV   [__r0],A
1673: 51 41    MOV   A,[__r1]
1675: 01 01    ADD   A,1
1677: 54 01    MOV   [X+1],A
1679: 51 42    MOV   A,[__r0]
167B: 09 00    ADC   A,0
167D: 54 00    MOV   [X+0],A
167F: 51 42    MOV   A,[__r0]
1681: 60 D5    MOV   REG[213],A
1683: 50 30    MOV   A,48
1685: 3F 41    MVI   [__r1],A
1687: 80 36    JMP   0x16BE
1689: 50 00    MOV   A,0
168B: 08       PUSH  A
168C: 50 0A    MOV   A,10
168E: 08       PUSH  A
168F: 52 0C    MOV   A,[X+12]
1691: 08       PUSH  A
1692: 52 0D    MOV   A,[X+13]
1694: 08       PUSH  A
1695: 52 0E    MOV   A,[X+14]
1697: 08       PUSH  A
1698: 52 0F    MOV   A,[X+15]
169A: 08       PUSH  A
169B: 52 00    MOV   A,[X+0]
169D: 08       PUSH  A
169E: 52 01    MOV   A,[X+1]
16A0: 08       PUSH  A
16A1: 7C 1A 25 LCALL _ltoa
16A4: 38 F8    ADD   SP,248
16A6: 80 06    JMP   0x16AD
16A8: 77 01    INC   [X+1]
16AA: 0F 00 00 ADC   [X+0],0
16AD: 62 D0 01 MOV   REG[208],1
16B0: 52 01    MOV   A,[X+1]
16B2: 53 41    MOV   [__r1],A
16B4: 52 00    MOV   A,[X+0]
16B6: 60 D4    MOV   REG[212],A
16B8: 3E 41    MVI   A,[__r1]
16BA: 39 00    CMP   A,0
16BC: BF EB    JNZ   0x16A8
16BE: 62 D0 01 MOV   REG[208],1
16C1: 52 01    MOV   A,[X+1]
16C3: 53 41    MOV   [__r1],A
16C5: 52 00    MOV   A,[X+0]
16C7: 53 42    MOV   [__r0],A
16C9: 51 41    MOV   A,[__r1]
16CB: 01 01    ADD   A,1
16CD: 54 01    MOV   [X+1],A
16CF: 51 42    MOV   A,[__r0]
16D1: 09 00    ADC   A,0
16D3: 54 00    MOV   [X+0],A
16D5: 51 42    MOV   A,[__r0]
16D7: 60 D5    MOV   REG[213],A
16D9: 50 2E    MOV   A,46
16DB: 3F 41    MVI   [__r1],A
16DD: 3D 02 00 CMP   [X+2],0
16E0: B0 31    JNZ   0x1712
16E2: 3D 03 00 CMP   [X+3],0
16E5: B0 2C    JNZ   0x1712
16E7: 3D 04 00 CMP   [X+4],0
16EA: B0 27    JNZ   0x1712
16EC: 3D 05 00 CMP   [X+5],0
16EF: B0 22    JNZ   0x1712
16F1: 62 D0 01 MOV   REG[208],1
16F4: 52 01    MOV   A,[X+1]
16F6: 53 41    MOV   [__r1],A
16F8: 52 00    MOV   A,[X+0]
16FA: 53 42    MOV   [__r0],A
16FC: 51 41    MOV   A,[__r1]
16FE: 01 01    ADD   A,1
1700: 54 01    MOV   [X+1],A
1702: 51 42    MOV   A,[__r0]
1704: 09 00    ADC   A,0
1706: 54 00    MOV   [X+0],A
1708: 51 42    MOV   A,[__r0]
170A: 60 D5    MOV   REG[213],A
170C: 50 30    MOV   A,48
170E: 3F 41    MVI   [__r1],A
1710: 81 14    JMP   0x1825
1712: 62 D0 01 MOV   REG[208],1
1715: 52 01    MOV   A,[X+1]
1717: 11 43    SUB   A,67
1719: 53 41    MOV   [__r1],A
171B: 52 00    MOV   A,[X+0]
171D: 19 01    SBB   A,1
171F: 53 42    MOV   [__r0],A
1721: 50 0F    MOV   A,15
1723: 12 41    SUB   A,[__r1]
1725: 53 41    MOV   [__r1],A
1727: 50 00    MOV   A,0
1729: 1A 42    SBB   A,[__r0]
172B: 53 42    MOV   [__r0],A
172D: 16 41 01 SUB   [__r1],1
1730: 1E 42 00 SBB   [__r0],0
1733: 51 41    MOV   A,[__r1]
1735: 54 15    MOV   [X+21],A
1737: 50 07    MOV   A,7
1739: 3B 15    CMP   A,[X+21]
173B: D0 04    JNC   0x1740
173D: 56 15 07 MOV   [X+21],7
1740: 56 14 00 MOV   [X+20],0
1743: 80 A5    JMP   0x17E9
1745: 62 D0 01 MOV   REG[208],1
1748: 52 02    MOV   A,[X+2]
174A: 53 42    MOV   [__r0],A
174C: 52 03    MOV   A,[X+3]
174E: 53 41    MOV   [__r1],A
1750: 52 04    MOV   A,[X+4]
1752: 53 40    MOV   [__r2],A
1754: 52 05    MOV   A,[X+5]
1756: 53 3F    MOV   [__r3],A
1758: 65 3F    ASL   [__r3]
175A: 6B 40    RLC   [__r2]
175C: 6B 41    RLC   [__r1]
175E: 6B 42    RLC   [__r0]
1760: 52 02    MOV   A,[X+2]
1762: 53 3E    MOV   [__r4],A
1764: 52 03    MOV   A,[X+3]
1766: 53 3D    MOV   [__r5],A
1768: 52 04    MOV   A,[X+4]
176A: 53 3C    MOV   [__r6],A
176C: 52 05    MOV   A,[X+5]
176E: 53 3B    MOV   [__r7],A
1770: 50 03    MOV   A,3
1772: 62 D0 01 MOV   REG[208],1
1775: 65 3B    ASL   [__r7]
1777: 6B 3C    RLC   [__r6]
1779: 6B 3D    RLC   [__r5]
177B: 6B 3E    RLC   [__r4]
177D: 78       DEC   A
177E: BF F3    JNZ   0x1772
1780: 51 3B    MOV   A,[__r7]
1782: 02 3F    ADD   A,[__r3]
1784: 54 05    MOV   [X+5],A
1786: 51 3C    MOV   A,[__r6]
1788: 0A 40    ADC   A,[__r2]
178A: 54 04    MOV   [X+4],A
178C: 51 3D    MOV   A,[__r5]
178E: 0A 41    ADC   A,[__r1]
1790: 54 03    MOV   [X+3],A
1792: 51 3E    MOV   A,[__r4]
1794: 0A 42    ADC   A,[__r0]
1796: 54 02    MOV   [X+2],A
1798: 52 01    MOV   A,[X+1]
179A: 53 41    MOV   [__r1],A
179C: 52 00    MOV   A,[X+0]
179E: 53 42    MOV   [__r0],A
17A0: 51 41    MOV   A,[__r1]
17A2: 01 01    ADD   A,1
17A4: 54 01    MOV   [X+1],A
17A6: 51 42    MOV   A,[__r0]
17A8: 09 00    ADC   A,0
17AA: 54 00    MOV   [X+0],A
17AC: 52 02    MOV   A,[X+2]
17AE: 53 3E    MOV   [__r4],A
17B0: 52 03    MOV   A,[X+3]
17B2: 53 3D    MOV   [__r5],A
17B4: 52 04    MOV   A,[X+4]
17B6: 53 3C    MOV   [__r6],A
17B8: 52 05    MOV   A,[X+5]
17BA: 53 3B    MOV   [__r7],A
17BC: 50 18    MOV   A,24
17BE: 62 D0 01 MOV   REG[208],1
17C1: 68 3E    ASR   [__r4]
17C3: 6E 3D    RRC   [__r5]
17C5: 6E 3C    RRC   [__r6]
17C7: 6E 3B    RRC   [__r7]
17C9: 78       DEC   A
17CA: BF F3    JNZ   0x17BE
17CC: 06 3B 30 ADD   [__r7],48
17CF: 0E 3C 00 ADC   [__r6],0
17D2: 0E 3D 00 ADC   [__r5],0
17D5: 0E 3E 00 ADC   [__r4],0
17D8: 51 3B    MOV   A,[__r7]
17DA: 53 40    MOV   [__r2],A
17DC: 51 42    MOV   A,[__r0]
17DE: 60 D5    MOV   REG[213],A
17E0: 51 40    MOV   A,[__r2]
17E2: 3F 41    MVI   [__r1],A
17E4: 27 02 00 AND   [X+2],0
17E7: 77 14    INC   [X+20]
17E9: 52 14    MOV   A,[X+20]
17EB: 3B 15    CMP   A,[X+21]
17ED: CF 57    JC    0x1745
17EF: 07 01 FF ADD   [X+1],255
17F2: 0F 00 FF ADC   [X+0],255
17F5: 80 07    JMP   0x17FD
17F7: 07 01 FF ADD   [X+1],255
17FA: 0F 00 FF ADC   [X+0],255
17FD: 62 D0 01 MOV   REG[208],1
1800: 52 01    MOV   A,[X+1]
1802: 53 41    MOV   [__r1],A
1804: 52 00    MOV   A,[X+0]
1806: 60 D4    MOV   REG[212],A
1808: 3E 41    MVI   A,[__r1]
180A: 39 30    CMP   A,48
180C: B0 13    JNZ   0x1820
180E: 52 01    MOV   A,[X+1]
1810: 01 FF    ADD   A,255
1812: 53 41    MOV   [__r1],A
1814: 52 00    MOV   A,[X+0]
1816: 09 FF    ADC   A,255
1818: 60 D4    MOV   REG[212],A
181A: 3E 41    MVI   A,[__r1]
181C: 39 2E    CMP   A,46
181E: BF D8    JNZ   0x17F7
1820: 77 01    INC   [X+1]
1822: 0F 00 00 ADC   [X+0],0
1825: 62 D0 01 MOV   REG[208],1
1828: 52 01    MOV   A,[X+1]
182A: 53 41    MOV   [__r1],A
182C: 52 00    MOV   A,[X+0]
182E: 60 D5    MOV   REG[213],A
1830: 50 00    MOV   A,0
1832: 3F 41    MVI   [__r1],A
1834: 52 F8    MOV   A,[X-8]
1836: 53 41    MOV   [__r1],A
1838: 52 F7    MOV   A,[X-9]
183A: 60 D5    MOV   REG[213],A
183C: 50 00    MOV   A,0
183E: 3F 41    MVI   [__r1],A
1840: 3F 41    MVI   [__r1],A
1842: 55 41 43 MOV   [__r1],67
1845: 55 42 01 MOV   [__r0],1
1848: 38 EA    ADD   SP,234
184A: 20       POP   X
184B: 7F       RET   
_itoa:
184C: 10       PUSH  X
184D: 4F       MOV   X,SP
184E: 38 09    ADD   SP,9
1850: 52 FA    MOV   A,[X-6]
1852: 54 03    MOV   [X+3],A
1854: 52 F9    MOV   A,[X-7]
1856: 54 02    MOV   [X+2],A
1858: 3D F9 00 CMP   [X-7],0
185B: B0 2F    JNZ   0x188B
185D: 3D FA 00 CMP   [X-6],0
1860: B0 2A    JNZ   0x188B
1862: 62 D0 01 MOV   REG[208],1
1865: 52 FC    MOV   A,[X-4]
1867: 53 41    MOV   [__r1],A
1869: 52 FB    MOV   A,[X-5]
186B: 60 D5    MOV   REG[213],A
186D: 50 30    MOV   A,48
186F: 3F 41    MVI   [__r1],A
1871: 52 FC    MOV   A,[X-4]
1873: 01 01    ADD   A,1
1875: 53 41    MOV   [__r1],A
1877: 52 FB    MOV   A,[X-5]
1879: 09 00    ADC   A,0
187B: 60 D5    MOV   REG[213],A
187D: 50 00    MOV   A,0
187F: 3F 41    MVI   [__r1],A
1881: 52 FC    MOV   A,[X-4]
1883: 53 41    MOV   [__r1],A
1885: 52 FB    MOV   A,[X-5]
1887: 53 42    MOV   [__r0],A
1889: 81 97    JMP   0x1A21
188B: 52 FA    MOV   A,[X-6]
188D: 11 00    SUB   A,0
188F: 52 F9    MOV   A,[X-7]
1891: 31 80    XOR   A,128
1893: 19 80    SBB   A,128
1895: D0 29    JNC   0x18BF
1897: 3D F7 00 CMP   [X-9],0
189A: B0 24    JNZ   0x18BF
189C: 3D F8 0A CMP   [X-8],10
189F: B0 1F    JNZ   0x18BF
18A1: 56 06 01 MOV   [X+6],1
18A4: 62 D0 01 MOV   REG[208],1
18A7: 52 03    MOV   A,[X+3]
18A9: 73       CPL   A
18AA: 53 41    MOV   [__r1],A
18AC: 52 02    MOV   A,[X+2]
18AE: 73       CPL   A
18AF: 53 42    MOV   [__r0],A
18B1: 51 41    MOV   A,[__r1]
18B3: 01 01    ADD   A,1
18B5: 54 03    MOV   [X+3],A
18B7: 51 42    MOV   A,[__r0]
18B9: 09 00    ADC   A,0
18BB: 54 02    MOV   [X+2],A
18BD: 80 04    JMP   0x18C2
18BF: 56 06 00 MOV   [X+6],0
18C2: 52 FC    MOV   A,[X-4]
18C4: 54 01    MOV   [X+1],A
18C6: 52 FB    MOV   A,[X-5]
18C8: 54 00    MOV   [X+0],A
18CA: 62 D0 01 MOV   REG[208],1
18CD: 52 F7    MOV   A,[X-9]
18CF: 08       PUSH  A
18D0: 52 F8    MOV   A,[X-8]
18D2: 08       PUSH  A
18D3: 52 02    MOV   A,[X+2]
18D5: 08       PUSH  A
18D6: 52 03    MOV   A,[X+3]
18D8: 08       PUSH  A
18D9: 7C 10 A6 LCALL __divmodu_16X16_16
18DC: 38 FE    ADD   SP,254
18DE: 18       POP   A
18DF: 53 41    MOV   [__r1],A
18E1: 18       POP   A
18E2: 53 42    MOV   [__r0],A
18E4: 51 41    MOV   A,[__r1]
18E6: 54 08    MOV   [X+8],A
18E8: 51 42    MOV   A,[__r0]
18EA: 54 07    MOV   [X+7],A
18EC: 50 09    MOV   A,9
18EE: 13 08    SUB   A,[X+8]
18F0: 52 07    MOV   A,[X+7]
18F2: 31 80    XOR   A,128
18F4: 53 36    MOV   [__rX],A
18F6: 50 80    MOV   A,128
18F8: 1A 36    SBB   A,[__rX]
18FA: C0 28    JC    0x1923
18FC: 62 D0 01 MOV   REG[208],1
18FF: 52 01    MOV   A,[X+1]
1901: 53 41    MOV   [__r1],A
1903: 52 00    MOV   A,[X+0]
1905: 53 42    MOV   [__r0],A
1907: 51 41    MOV   A,[__r1]
1909: 01 01    ADD   A,1
190B: 54 01    MOV   [X+1],A
190D: 51 42    MOV   A,[__r0]
190F: 09 00    ADC   A,0
1911: 54 00    MOV   [X+0],A
1913: 52 08    MOV   A,[X+8]
1915: 01 30    ADD   A,48
1917: 53 40    MOV   [__r2],A
1919: 51 42    MOV   A,[__r0]
191B: 60 D5    MOV   REG[213],A
191D: 51 40    MOV   A,[__r2]
191F: 3F 41    MVI   [__r1],A
1921: 80 26    JMP   0x1948
1923: 62 D0 01 MOV   REG[208],1
1926: 52 01    MOV   A,[X+1]
1928: 53 41    MOV   [__r1],A
192A: 52 00    MOV   A,[X+0]
192C: 53 42    MOV   [__r0],A
192E: 51 41    MOV   A,[__r1]
1930: 01 01    ADD   A,1
1932: 54 01    MOV   [X+1],A
1934: 51 42    MOV   A,[__r0]
1936: 09 00    ADC   A,0
1938: 54 00    MOV   [X+0],A
193A: 52 08    MOV   A,[X+8]
193C: 01 57    ADD   A,87
193E: 53 40    MOV   [__r2],A
1940: 51 42    MOV   A,[__r0]
1942: 60 D5    MOV   REG[213],A
1944: 51 40    MOV   A,[__r2]
1946: 3F 41    MVI   [__r1],A
1948: 52 F7    MOV   A,[X-9]
194A: 08       PUSH  A
194B: 52 F8    MOV   A,[X-8]
194D: 08       PUSH  A
194E: 52 02    MOV   A,[X+2]
1950: 08       PUSH  A
1951: 52 03    MOV   A,[X+3]
1953: 08       PUSH  A
1954: 62 D0 01 MOV   REG[208],1
1957: 7C 10 A6 LCALL __divmodu_16X16_16
195A: 18       POP   A
195B: 54 03    MOV   [X+3],A
195D: 18       POP   A
195E: 54 02    MOV   [X+2],A
1960: 38 FE    ADD   SP,254
1962: 3D 02 00 CMP   [X+2],0
1965: BF 64    JNZ   0x18CA
1967: 3D 03 00 CMP   [X+3],0
196A: BF 5F    JNZ   0x18CA
196C: 3D 06 00 CMP   [X+6],0
196F: A0 20    JZ    0x1990
1971: 62 D0 01 MOV   REG[208],1
1974: 52 01    MOV   A,[X+1]
1976: 53 41    MOV   [__r1],A
1978: 52 00    MOV   A,[X+0]
197A: 53 42    MOV   [__r0],A
197C: 51 41    MOV   A,[__r1]
197E: 01 01    ADD   A,1
1980: 54 01    MOV   [X+1],A
1982: 51 42    MOV   A,[__r0]
1984: 09 00    ADC   A,0
1986: 54 00    MOV   [X+0],A
1988: 51 42    MOV   A,[__r0]
198A: 60 D5    MOV   REG[213],A
198C: 50 2D    MOV   A,45
198E: 3F 41    MVI   [__r1],A
1990: 62 D0 01 MOV   REG[208],1
1993: 52 01    MOV   A,[X+1]
1995: 53 41    MOV   [__r1],A
1997: 52 00    MOV   A,[X+0]
1999: 53 42    MOV   [__r0],A
199B: 51 41    MOV   A,[__r1]
199D: 01 FF    ADD   A,255
199F: 54 01    MOV   [X+1],A
19A1: 51 42    MOV   A,[__r0]
19A3: 09 FF    ADC   A,255
19A5: 54 00    MOV   [X+0],A
19A7: 51 42    MOV   A,[__r0]
19A9: 60 D5    MOV   REG[213],A
19AB: 50 00    MOV   A,0
19AD: 3F 41    MVI   [__r1],A
19AF: 52 FC    MOV   A,[X-4]
19B1: 54 05    MOV   [X+5],A
19B3: 52 FB    MOV   A,[X-5]
19B5: 54 04    MOV   [X+4],A
19B7: 80 54    JMP   0x1A0C
19B9: 62 D0 01 MOV   REG[208],1
19BC: 52 05    MOV   A,[X+5]
19BE: 53 41    MOV   [__r1],A
19C0: 52 04    MOV   A,[X+4]
19C2: 60 D4    MOV   REG[212],A
19C4: 3E 41    MVI   A,[__r1]
19C6: 54 06    MOV   [X+6],A
19C8: 52 05    MOV   A,[X+5]
19CA: 53 41    MOV   [__r1],A
19CC: 52 04    MOV   A,[X+4]
19CE: 53 42    MOV   [__r0],A
19D0: 51 41    MOV   A,[__r1]
19D2: 01 01    ADD   A,1
19D4: 54 05    MOV   [X+5],A
19D6: 51 42    MOV   A,[__r0]
19D8: 09 00    ADC   A,0
19DA: 54 04    MOV   [X+4],A
19DC: 52 01    MOV   A,[X+1]
19DE: 53 3F    MOV   [__r3],A
19E0: 52 00    MOV   A,[X+0]
19E2: 60 D4    MOV   REG[212],A
19E4: 3E 3F    MVI   A,[__r3]
19E6: 53 40    MOV   [__r2],A
19E8: 51 42    MOV   A,[__r0]
19EA: 60 D5    MOV   REG[213],A
19EC: 51 40    MOV   A,[__r2]
19EE: 3F 41    MVI   [__r1],A
19F0: 52 01    MOV   A,[X+1]
19F2: 53 41    MOV   [__r1],A
19F4: 52 00    MOV   A,[X+0]
19F6: 53 42    MOV   [__r0],A
19F8: 51 41    MOV   A,[__r1]
19FA: 01 FF    ADD   A,255
19FC: 54 01    MOV   [X+1],A
19FE: 51 42    MOV   A,[__r0]
1A00: 09 FF    ADC   A,255
1A02: 54 00    MOV   [X+0],A
1A04: 51 42    MOV   A,[__r0]
1A06: 60 D5    MOV   REG[213],A
1A08: 52 06    MOV   A,[X+6]
1A0A: 3F 41    MVI   [__r1],A
1A0C: 52 05    MOV   A,[X+5]
1A0E: 13 01    SUB   A,[X+1]
1A10: 52 04    MOV   A,[X+4]
1A12: 1B 00    SBB   A,[X+0]
1A14: CF A4    JC    0x19B9
1A16: 62 D0 01 MOV   REG[208],1
1A19: 52 FC    MOV   A,[X-4]
1A1B: 53 41    MOV   [__r1],A
1A1D: 52 FB    MOV   A,[X-5]
1A1F: 53 42    MOV   [__r0],A
1A21: 38 F7    ADD   SP,247
1A23: 20       POP   X
1A24: 7F       RET   
_ltoa:
1A25: 10       PUSH  X
1A26: 4F       MOV   X,SP
1A27: 38 0B    ADD   SP,11
1A29: 52 F7    MOV   A,[X-9]
1A2B: 54 02    MOV   [X+2],A
1A2D: 52 F8    MOV   A,[X-8]
1A2F: 54 03    MOV   [X+3],A
1A31: 52 F9    MOV   A,[X-7]
1A33: 54 04    MOV   [X+4],A
1A35: 52 FA    MOV   A,[X-6]
1A37: 54 05    MOV   [X+5],A
1A39: 3D F7 00 CMP   [X-9],0
1A3C: B0 39    JNZ   0x1A76
1A3E: 3D F8 00 CMP   [X-8],0
1A41: B0 34    JNZ   0x1A76
1A43: 3D F9 00 CMP   [X-7],0
1A46: B0 2F    JNZ   0x1A76
1A48: 3D FA 00 CMP   [X-6],0
1A4B: B0 2A    JNZ   0x1A76
1A4D: 62 D0 01 MOV   REG[208],1
1A50: 52 FC    MOV   A,[X-4]
1A52: 53 41    MOV   [__r1],A
1A54: 52 FB    MOV   A,[X-5]
1A56: 60 D5    MOV   REG[213],A
1A58: 50 30    MOV   A,48
1A5A: 3F 41    MVI   [__r1],A
1A5C: 52 FC    MOV   A,[X-4]
1A5E: 01 01    ADD   A,1
1A60: 53 41    MOV   [__r1],A
1A62: 52 FB    MOV   A,[X-5]
1A64: 09 00    ADC   A,0
1A66: 60 D5    MOV   REG[213],A
1A68: 50 00    MOV   A,0
1A6A: 3F 41    MVI   [__r1],A
1A6C: 52 FC    MOV   A,[X-4]
1A6E: 53 41    MOV   [__r1],A
1A70: 52 FB    MOV   A,[X-5]
1A72: 53 42    MOV   [__r0],A
1A74: 82 25    JMP   0x1C9A
1A76: 52 FA    MOV   A,[X-6]
1A78: 11 00    SUB   A,0
1A7A: 52 F9    MOV   A,[X-7]
1A7C: 19 00    SBB   A,0
1A7E: 52 F8    MOV   A,[X-8]
1A80: 19 00    SBB   A,0
1A82: 52 F7    MOV   A,[X-9]
1A84: 31 80    XOR   A,128
1A86: 19 80    SBB   A,128
1A88: D0 3B    JNC   0x1AC4
1A8A: 3D F5 00 CMP   [X-11],0
1A8D: B0 36    JNZ   0x1AC4
1A8F: 3D F6 0A CMP   [X-10],10
1A92: B0 31    JNZ   0x1AC4
1A94: 56 08 01 MOV   [X+8],1
1A97: 62 D0 01 MOV   REG[208],1
1A9A: 52 02    MOV   A,[X+2]
1A9C: 73       CPL   A
1A9D: 53 42    MOV   [__r0],A
1A9F: 52 03    MOV   A,[X+3]
1AA1: 73       CPL   A
1AA2: 53 41    MOV   [__r1],A
1AA4: 52 04    MOV   A,[X+4]
1AA6: 73       CPL   A
1AA7: 53 40    MOV   [__r2],A
1AA9: 52 05    MOV   A,[X+5]
1AAB: 73       CPL   A
1AAC: 01 01    ADD   A,1
1AAE: 54 05    MOV   [X+5],A
1AB0: 51 40    MOV   A,[__r2]
1AB2: 09 00    ADC   A,0
1AB4: 54 04    MOV   [X+4],A
1AB6: 51 41    MOV   A,[__r1]
1AB8: 09 00    ADC   A,0
1ABA: 54 03    MOV   [X+3],A
1ABC: 51 42    MOV   A,[__r0]
1ABE: 09 00    ADC   A,0
1AC0: 54 02    MOV   [X+2],A
1AC2: 80 04    JMP   0x1AC7
1AC4: 56 08 00 MOV   [X+8],0
1AC7: 52 FC    MOV   A,[X-4]
1AC9: 54 01    MOV   [X+1],A
1ACB: 52 FB    MOV   A,[X-5]
1ACD: 54 00    MOV   [X+0],A
1ACF: 62 D0 01 MOV   REG[208],1
1AD2: 52 F6    MOV   A,[X-10]
1AD4: 53 3F    MOV   [__r3],A
1AD6: 52 F5    MOV   A,[X-11]
1AD8: 53 40    MOV   [__r2],A
1ADA: 47 40 80 TST   [__r2],128
1ADD: A0 09    JZ    0x1AE7
1ADF: 55 41 FF MOV   [__r1],255
1AE2: 55 42 FF MOV   [__r0],255
1AE5: 80 0A    JMP   0x1AF0
1AE7: 62 D0 01 MOV   REG[208],1
1AEA: 55 41 00 MOV   [__r1],0
1AED: 55 42 00 MOV   [__r0],0
1AF0: 62 D0 01 MOV   REG[208],1
1AF3: 51 42    MOV   A,[__r0]
1AF5: 08       PUSH  A
1AF6: 51 41    MOV   A,[__r1]
1AF8: 08       PUSH  A
1AF9: 51 40    MOV   A,[__r2]
1AFB: 08       PUSH  A
1AFC: 51 3F    MOV   A,[__r3]
1AFE: 08       PUSH  A
1AFF: 52 02    MOV   A,[X+2]
1B01: 08       PUSH  A
1B02: 52 03    MOV   A,[X+3]
1B04: 08       PUSH  A
1B05: 52 04    MOV   A,[X+4]
1B07: 08       PUSH  A
1B08: 52 05    MOV   A,[X+5]
1B0A: 08       PUSH  A
1B0B: 7C 10 B1 LCALL __divmodu_32X32_32
1B0E: 38 FC    ADD   SP,252
1B10: 18       POP   A
1B11: 53 3F    MOV   [__r3],A
1B13: 18       POP   A
1B14: 53 40    MOV   [__r2],A
1B16: 18       POP   A
1B17: 18       POP   A
1B18: 51 3F    MOV   A,[__r3]
1B1A: 53 41    MOV   [__r1],A
1B1C: 51 40    MOV   A,[__r2]
1B1E: 53 42    MOV   [__r0],A
1B20: 51 41    MOV   A,[__r1]
1B22: 54 0A    MOV   [X+10],A
1B24: 51 42    MOV   A,[__r0]
1B26: 54 09    MOV   [X+9],A
1B28: 50 09    MOV   A,9
1B2A: 13 0A    SUB   A,[X+10]
1B2C: 52 09    MOV   A,[X+9]
1B2E: 31 80    XOR   A,128
1B30: 53 36    MOV   [__rX],A
1B32: 50 80    MOV   A,128
1B34: 1A 36    SBB   A,[__rX]
1B36: C0 28    JC    0x1B5F
1B38: 62 D0 01 MOV   REG[208],1
1B3B: 52 01    MOV   A,[X+1]
1B3D: 53 41    MOV   [__r1],A
1B3F: 52 00    MOV   A,[X+0]
1B41: 53 42    MOV   [__r0],A
1B43: 51 41    MOV   A,[__r1]
1B45: 01 01    ADD   A,1
1B47: 54 01    MOV   [X+1],A
1B49: 51 42    MOV   A,[__r0]
1B4B: 09 00    ADC   A,0
1B4D: 54 00    MOV   [X+0],A
1B4F: 52 0A    MOV   A,[X+10]
1B51: 01 30    ADD   A,48
1B53: 53 40    MOV   [__r2],A
1B55: 51 42    MOV   A,[__r0]
1B57: 60 D5    MOV   REG[213],A
1B59: 51 40    MOV   A,[__r2]
1B5B: 3F 41    MVI   [__r1],A
1B5D: 80 26    JMP   0x1B84
1B5F: 62 D0 01 MOV   REG[208],1
1B62: 52 01    MOV   A,[X+1]
1B64: 53 41    MOV   [__r1],A
1B66: 52 00    MOV   A,[X+0]
1B68: 53 42    MOV   [__r0],A
1B6A: 51 41    MOV   A,[__r1]
1B6C: 01 01    ADD   A,1
1B6E: 54 01    MOV   [X+1],A
1B70: 51 42    MOV   A,[__r0]
1B72: 09 00    ADC   A,0
1B74: 54 00    MOV   [X+0],A
1B76: 52 0A    MOV   A,[X+10]
1B78: 01 57    ADD   A,87
1B7A: 53 40    MOV   [__r2],A
1B7C: 51 42    MOV   A,[__r0]
1B7E: 60 D5    MOV   REG[213],A
1B80: 51 40    MOV   A,[__r2]
1B82: 3F 41    MVI   [__r1],A
1B84: 62 D0 01 MOV   REG[208],1
1B87: 52 F6    MOV   A,[X-10]
1B89: 53 3F    MOV   [__r3],A
1B8B: 52 F5    MOV   A,[X-11]
1B8D: 53 40    MOV   [__r2],A
1B8F: 47 40 80 TST   [__r2],128
1B92: A0 09    JZ    0x1B9C
1B94: 55 41 FF MOV   [__r1],255
1B97: 55 42 FF MOV   [__r0],255
1B9A: 80 0A    JMP   0x1BA5
1B9C: 62 D0 01 MOV   REG[208],1
1B9F: 55 41 00 MOV   [__r1],0
1BA2: 55 42 00 MOV   [__r0],0
1BA5: 62 D0 01 MOV   REG[208],1
1BA8: 51 42    MOV   A,[__r0]
1BAA: 08       PUSH  A
1BAB: 51 41    MOV   A,[__r1]
1BAD: 08       PUSH  A
1BAE: 51 40    MOV   A,[__r2]
1BB0: 08       PUSH  A
1BB1: 51 3F    MOV   A,[__r3]
1BB3: 08       PUSH  A
1BB4: 52 02    MOV   A,[X+2]
1BB6: 08       PUSH  A
1BB7: 52 03    MOV   A,[X+3]
1BB9: 08       PUSH  A
1BBA: 52 04    MOV   A,[X+4]
1BBC: 08       PUSH  A
1BBD: 52 05    MOV   A,[X+5]
1BBF: 08       PUSH  A
1BC0: 7C 10 B1 LCALL __divmodu_32X32_32
1BC3: 18       POP   A
1BC4: 54 05    MOV   [X+5],A
1BC6: 18       POP   A
1BC7: 54 04    MOV   [X+4],A
1BC9: 18       POP   A
1BCA: 54 03    MOV   [X+3],A
1BCC: 18       POP   A
1BCD: 54 02    MOV   [X+2],A
1BCF: 38 FC    ADD   SP,252
1BD1: 3D 02 00 CMP   [X+2],0
1BD4: BE FA    JNZ   0x1ACF
1BD6: 3D 03 00 CMP   [X+3],0
1BD9: BE F5    JNZ   0x1ACF
1BDB: 3D 04 00 CMP   [X+4],0
1BDE: BE F0    JNZ   0x1ACF
1BE0: 3D 05 00 CMP   [X+5],0
1BE3: BE EB    JNZ   0x1ACF
1BE5: 3D 08 00 CMP   [X+8],0
1BE8: A0 20    JZ    0x1C09
1BEA: 62 D0 01 MOV   REG[208],1
1BED: 52 01    MOV   A,[X+1]
1BEF: 53 41    MOV   [__r1],A
1BF1: 52 00    MOV   A,[X+0]
1BF3: 53 42    MOV   [__r0],A
1BF5: 51 41    MOV   A,[__r1]
1BF7: 01 01    ADD   A,1
1BF9: 54 01    MOV   [X+1],A
1BFB: 51 42    MOV   A,[__r0]
1BFD: 09 00    ADC   A,0
1BFF: 54 00    MOV   [X+0],A
1C01: 51 42    MOV   A,[__r0]
1C03: 60 D5    MOV   REG[213],A
1C05: 50 2D    MOV   A,45
1C07: 3F 41    MVI   [__r1],A
1C09: 62 D0 01 MOV   REG[208],1
1C0C: 52 01    MOV   A,[X+1]
1C0E: 53 41    MOV   [__r1],A
1C10: 52 00    MOV   A,[X+0]
1C12: 53 42    MOV   [__r0],A
1C14: 51 41    MOV   A,[__r1]
1C16: 01 FF    ADD   A,255
1C18: 54 01    MOV   [X+1],A
1C1A: 51 42    MOV   A,[__r0]
1C1C: 09 FF    ADC   A,255
1C1E: 54 00    MOV   [X+0],A
1C20: 51 42    MOV   A,[__r0]
1C22: 60 D5    MOV   REG[213],A
1C24: 50 00    MOV   A,0
1C26: 3F 41    MVI   [__r1],A
1C28: 52 FC    MOV   A,[X-4]
1C2A: 54 07    MOV   [X+7],A
1C2C: 52 FB    MOV   A,[X-5]
1C2E: 54 06    MOV   [X+6],A
1C30: 80 54    JMP   0x1C85
1C32: 62 D0 01 MOV   REG[208],1
1C35: 52 07    MOV   A,[X+7]
1C37: 53 41    MOV   [__r1],A
1C39: 52 06    MOV   A,[X+6]
1C3B: 60 D4    MOV   REG[212],A
1C3D: 3E 41    MVI   A,[__r1]
1C3F: 54 08    MOV   [X+8],A
1C41: 52 07    MOV   A,[X+7]
1C43: 53 41    MOV   [__r1],A
1C45: 52 06    MOV   A,[X+6]
1C47: 53 42    MOV   [__r0],A
1C49: 51 41    MOV   A,[__r1]
1C4B: 01 01    ADD   A,1
1C4D: 54 07    MOV   [X+7],A
1C4F: 51 42    MOV   A,[__r0]
1C51: 09 00    ADC   A,0
1C53: 54 06    MOV   [X+6],A
1C55: 52 01    MOV   A,[X+1]
1C57: 53 3F    MOV   [__r3],A
1C59: 52 00    MOV   A,[X+0]
1C5B: 60 D4    MOV   REG[212],A
1C5D: 3E 3F    MVI   A,[__r3]
1C5F: 53 40    MOV   [__r2],A
1C61: 51 42    MOV   A,[__r0]
1C63: 60 D5    MOV   REG[213],A
1C65: 51 40    MOV   A,[__r2]
1C67: 3F 41    MVI   [__r1],A
1C69: 52 01    MOV   A,[X+1]
1C6B: 53 41    MOV   [__r1],A
1C6D: 52 00    MOV   A,[X+0]
1C6F: 53 42    MOV   [__r0],A
1C71: 51 41    MOV   A,[__r1]
1C73: 01 FF    ADD   A,255
1C75: 54 01    MOV   [X+1],A
1C77: 51 42    MOV   A,[__r0]
1C79: 09 FF    ADC   A,255
1C7B: 54 00    MOV   [X+0],A
1C7D: 51 42    MOV   A,[__r0]
1C7F: 60 D5    MOV   REG[213],A
1C81: 52 08    MOV   A,[X+8]
1C83: 3F 41    MVI   [__r1],A
1C85: 52 07    MOV   A,[X+7]
1C87: 13 01    SUB   A,[X+1]
1C89: 52 06    MOV   A,[X+6]
1C8B: 1B 00    SBB   A,[X+0]
1C8D: CF A4    JC    0x1C32
1C8F: 62 D0 01 MOV   REG[208],1
1C92: 52 FC    MOV   A,[X-4]
1C94: 53 41    MOV   [__r1],A
1C96: 52 FB    MOV   A,[X-5]
1C98: 53 42    MOV   [__r0],A
1C9A: 38 F5    ADD   SP,245
1C9C: 20       POP   X
1C9D: 7F       RET   
--------------------------------------------------------------------------------


PSoC Designer Version: 4.4.1184

Copyright (C) 1994 - 2001 ImageCraft
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Code Compressor V1.09
ICCM8C version V1.69A
